// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
    Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function () {
    var loadPackage = function (metadata) {

        function runWithFS() {

            function assert(check, msg) {
                if (!check) throw msg + new Error().stack;
            }
            var fileData0 = [];
            fileData0.push.apply(fileData0, [239, 187, 191, 67, 97, 116, 101, 103, 111, 114, 121, 44, 83, 117, 98, 45, 99, 97, 116, 101, 103, 111, 114, 121, 44, 83, 117, 98, 45, 115, 117, 98, 45, 99, 97, 116, 101, 103, 111, 114, 121, 44, 78, 97, 109, 101, 44, 82, 101, 97, 100, 97, 98, 108, 101, 32, 78, 97, 109, 101, 44, 82, 101, 97, 100, 97, 98, 108, 101, 32, 78, 97, 109, 101, 32, 40, 70, 82, 41, 44, 35, 32, 111, 102, 32, 98, 121, 116, 101, 115, 44, 66, 121, 116, 101, 32, 49, 44, 66, 121, 116, 101, 32, 50, 44, 86, 97, 114, 105, 97, 98, 108, 101, 32, 82, 47, 87, 32, 115, 116, 97, 116, 117, 115, 44, 84, 121, 112, 101, 44, 65, 114, 103, 117, 109, 101, 110, 116, 40, 115, 41, 32, 116, 121, 112, 101, 40, 115, 41, 32, 38, 32, 118, 97, 108, 117, 101, 40, 115, 41, 44, 82, 101, 116, 117, 114, 110, 32, 116, 121, 112, 101, 32, 38, 32, 118, 97, 108, 117, 101, 44, 67, 111, 109, 109, 101, 110, 116, 115, 44, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 13, 10, 44, 44, 44, 44, 44, 44, 49, 44, 48, 44, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 52, 68, 77, 83, 44, 226, 150, 186, 68, 77, 83, 44, 226, 150, 186, 68, 77, 83, 44, 49, 44, 48, 49, 44, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 52, 68, 101, 99, 44, 226, 150, 186, 68, 101, 99, 44, 226, 150, 186, 68, 101, 99, 44, 49, 44, 48, 50, 44, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 52, 70, 114, 97, 99, 44, 226, 150, 186, 70, 114, 97, 99, 44, 226, 150, 186, 70, 114, 97, 99, 44, 49, 44, 48, 51, 44, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 49, 57, 50, 44, 226, 134, 146, 44, 226, 134, 146, 44, 49, 44, 48, 52, 44, 44, 44, 68, 101, 108, 105, 109, 105, 116, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 66, 111, 120, 112, 108, 111, 116, 44, 66, 111, 120, 112, 108, 111, 116, 44, 67, 97, 114, 114, 195, 169, 44, 49, 44, 48, 53, 44, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 44, 91, 44, 91, 44, 49, 44, 48, 54, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 93, 44, 93, 44, 93, 44, 49, 44, 48, 55, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 123, 44, 123, 44, 123, 44, 49, 44, 48, 56, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 125, 44, 125, 44, 125, 44, 49, 44, 48, 57, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 49, 44, 202, 179, 44, 202, 179, 44, 49, 44, 48, 65, 44, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 98, 48, 44, 194, 176, 44, 194, 176, 44, 49, 44, 48, 66, 44, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 53, 44, 203, 137, 194, 185, 44, 203, 137, 194, 185, 44, 49, 44, 48, 67, 44, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 98, 50, 44, 194, 178, 44, 194, 178, 44, 49, 44, 48, 68, 44, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 50, 44, 225, 181, 128, 44, 225, 181, 128, 44, 49, 44, 48, 69, 44, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 100, 44, 194, 179, 44, 194, 179, 44, 49, 44, 48, 70, 44, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 40, 44, 40, 44, 40, 44, 49, 44, 49, 48, 44, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 41, 44, 41, 44, 41, 44, 49, 44, 49, 49, 44, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 111, 117, 110, 100, 40, 44, 114, 111, 117, 110, 100, 40, 44, 97, 114, 114, 111, 110, 100, 105, 40, 44, 49, 44, 49, 50, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 112, 120, 108, 45, 84, 101, 115, 116, 40, 44, 112, 120, 108, 45, 84, 101, 115, 116, 40, 44, 112, 120, 108, 45, 84, 101, 115, 116, 40, 44, 49, 44, 49, 51, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 97, 117, 103, 109, 101, 110, 116, 40, 44, 97, 117, 103, 109, 101, 110, 116, 40, 44, 99, 104, 97, 195, 174, 110, 101, 40, 44, 49, 44, 49, 52, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 111, 119, 83, 119, 97, 112, 40, 44, 114, 111, 119, 83, 119, 97, 112, 40, 44, 112, 101, 114, 109, 117, 116, 76, 105, 103, 110, 101, 40, 44, 49, 44, 49, 53, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 111, 119, 43, 40, 44, 114, 111, 119, 43, 40, 44, 108, 105, 103, 110, 101, 43, 40, 44, 49, 44, 49, 54, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 42, 114, 111, 119, 40, 44, 42, 114, 111, 119, 40, 44, 42, 108, 105, 103, 110, 101, 40, 44, 49, 44, 49, 55, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 42, 114, 111, 119, 43, 40, 44, 42, 114, 111, 119, 43, 40, 44, 42, 108, 105, 103, 110, 101, 43, 40, 44, 49, 44, 49, 56, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 109, 97, 120, 40, 44, 109, 97, 120, 40, 44, 109, 97, 120, 40, 44, 49, 44, 49, 57, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 109, 105, 110, 40, 44, 109, 105, 110, 40, 44, 109, 105, 110, 40, 44, 49, 44, 49, 65, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 92, 117, 102, 48, 49, 52, 80, 114, 40, 44, 82, 226, 150, 186, 80, 114, 40, 44, 82, 226, 150, 186, 80, 114, 40, 44, 49, 44, 49, 66, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 92, 117, 102, 48, 49, 52, 80, 92, 117, 48, 51, 98, 56, 40, 44, 82, 226, 150, 186, 80, 206, 184, 40, 44, 82, 226, 150, 186, 80, 206, 184, 40, 44, 49, 44, 49, 67, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 92, 117, 102, 48, 49, 52, 82, 120, 40, 44, 80, 226, 150, 186, 82, 120, 40, 44, 80, 226, 150, 186, 82, 120, 40, 44, 49, 44, 49, 68, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 92, 117, 102, 48, 49, 52, 82, 121, 40, 44, 80, 226, 150, 186, 82, 121, 40, 44, 80, 226, 150, 186, 82, 121, 40, 44, 49, 44, 49, 69, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 109, 101, 100, 105, 97, 110, 40, 44, 109, 101, 100, 105, 97, 110, 40, 44, 109, 195, 169, 100, 105, 97, 110, 110, 101, 44, 49, 44, 49, 70, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 97, 110, 100, 77, 40, 44, 114, 97, 110, 100, 77, 40, 44, 77, 97, 116, 65, 108, 195, 169, 97, 116, 40, 44, 49, 44, 50, 48, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 109, 101, 97, 110, 40, 44, 109, 101, 97, 110, 40, 44, 109, 111, 121, 101, 110, 110, 101, 40, 44, 49, 44, 50, 49, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 111, 108, 118, 101, 40, 44, 115, 111, 108, 118, 101, 40, 44, 114, 195, 169, 115, 111, 117, 100, 114, 101, 40, 44, 49, 44, 50, 50, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 101, 113, 40, 44, 115, 101, 113, 40, 44, 115, 117, 105, 116, 101, 40, 44, 49, 44, 50, 51, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 102, 110, 73, 110, 116, 40, 44, 102, 110, 73, 110, 116, 40, 44, 102, 110, 73, 110, 116, 40, 44, 49, 44, 50, 52, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 110, 68, 101, 114, 105, 118, 40, 44, 110, 68, 101, 114, 105, 118, 40, 44, 110, 68, 101, 114, 105, 118, 40, 44, 49, 44, 50, 53, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 102, 77, 105, 110, 40, 44, 102, 77, 105, 110, 40, 44, 102, 77, 105, 110, 40, 44, 49, 44, 50, 55, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 102, 77, 97, 120, 40, 44, 102, 77, 97, 120, 40, 44, 102, 77, 97, 120, 40, 44, 49, 44, 50, 56, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 32, 44, 32, 44, 32, 44, 49, 44, 50, 57, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 34, 34, 34, 34, 44, 34, 34, 34, 34, 44, 34, 34, 34, 34, 44, 49, 44, 50, 65, 44, 44, 44, 68, 101, 108, 105, 109, 105, 116, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 34, 44, 34, 44, 34, 44, 34, 44, 34, 44, 34, 44, 49, 44, 50, 66, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 50, 102, 44, 240, 157, 145, 150, 44, 240, 157, 145, 150, 44, 49, 44, 50, 67, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 67, 111, 109, 112, 108, 101, 120, 32, 105, 44, 13, 10, 44, 44, 44, 33, 44, 33, 44, 33, 44, 49, 44, 50, 68, 44, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 117, 98, 105, 99, 82, 101, 103, 32, 44, 67, 117, 98, 105, 99, 82, 101, 103, 32, 44, 82, 101, 103, 67, 117, 98, 105, 113, 117, 101, 32, 44, 49, 44, 50, 69, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 81, 117, 97, 114, 116, 82, 101, 103, 32, 44, 81, 117, 97, 114, 116, 82, 101, 103, 32, 44, 82, 101, 103, 81, 117, 97, 116, 114, 101, 32, 44, 49, 44, 50, 70, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 48, 44, 48, 44, 48, 44, 49, 44, 51, 48, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 44, 13, 10, 44, 44, 44, 49, 44, 49, 44, 49, 44, 49, 44, 51, 49, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 44, 13, 10, 44, 44, 44, 50, 44, 50, 44, 50, 44, 49, 44, 51, 50, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 44, 13, 10, 44, 44, 44, 51, 44, 51, 44, 51, 44, 49, 44, 51, 51, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 44, 13, 10, 44, 44, 44, 52, 44, 52, 44, 52, 44, 49, 44, 51, 52, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 44, 13, 10, 44, 44, 44, 53, 44, 53, 44, 53, 44, 49, 44, 51, 53, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 44, 13, 10, 44, 44, 44, 54, 44, 54, 44, 54, 44, 49, 44, 51, 54, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 44, 13, 10, 44, 44, 44, 55, 44, 55, 44, 55, 44, 49, 44, 51, 55, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 44, 13, 10, 44, 44, 44, 56, 44, 56, 44, 56, 44, 49, 44, 51, 56, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 44, 13, 10, 44, 44, 44, 57, 44, 57, 44, 57, 44, 49, 44, 51, 57, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 44, 13, 10, 44, 44, 44, 46, 44, 46, 44, 46, 44, 49, 44, 51, 65, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 48, 44, 225, 180, 135, 44, 225, 180, 135, 44, 49, 44, 51, 66, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 34, 32, 111, 114, 32, 34, 44, 34, 32, 111, 114, 32, 34, 44, 34, 32, 111, 117, 32, 34, 44, 49, 44, 51, 67, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 34, 32, 120, 111, 114, 32, 34, 44, 34, 32, 120, 111, 114, 32, 34, 44, 34, 32, 111, 117, 69, 120, 99, 108, 32, 34, 44, 49, 44, 51, 68, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 34, 111, 110, 32, 70, 114, 101, 110, 99, 104, 32, 67, 69, 44, 32, 105, 116, 32, 105, 115, 32, 115, 116, 105, 108, 108, 32, 39, 32, 120, 111, 114, 32, 39, 46, 46, 46, 34, 13, 10, 44, 44, 44, 58, 44, 58, 44, 58, 44, 49, 44, 51, 69, 44, 44, 44, 68, 101, 108, 105, 109, 105, 116, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 110, 44, 34, 13, 10, 34, 44, 34, 13, 10, 34, 44, 49, 44, 51, 70, 44, 44, 44, 68, 101, 108, 105, 109, 105, 116, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 34, 32, 97, 110, 100, 32, 34, 44, 34, 32, 97, 110, 100, 32, 34, 44, 34, 32, 101, 116, 32, 34, 44, 49, 44, 52, 48, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 65, 44, 65, 44, 65, 44, 49, 44, 52, 49, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 66, 44, 66, 44, 66, 44, 49, 44, 52, 50, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 44, 67, 44, 67, 44, 49, 44, 52, 51, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 44, 68, 44, 68, 44, 49, 44, 52, 52, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 69, 44, 69, 44, 69, 44, 49, 44, 52, 53, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 70, 44, 70, 44, 70, 44, 49, 44, 52, 54, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 44, 71, 44, 71, 44, 49, 44, 52, 55, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 72, 44, 72, 44, 72, 44, 49, 44, 52, 56, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 44, 73, 44, 73, 44, 49, 44, 52, 57, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 74, 44, 74, 44, 74, 44, 49, 44, 52, 65, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 75, 44, 75, 44, 75, 44, 49, 44, 52, 66, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 44, 76, 44, 76, 44, 49, 44, 52, 67, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 77, 44, 77, 44, 77, 44, 49, 44, 52, 68, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 78, 44, 78, 44, 78, 44, 49, 44, 52, 69, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 79, 44, 79, 44, 79, 44, 49, 44, 52, 70, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 44, 80, 44, 80, 44, 49, 44, 53, 48, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 81, 44, 81, 44, 81, 44, 49, 44, 53, 49, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 44, 82, 44, 82, 44, 49, 44, 53, 50, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 44, 83, 44, 83, 44, 49, 44, 53, 51, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 44, 84, 44, 84, 44, 49, 44, 53, 52, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 85, 44, 85, 44, 85, 44, 49, 44, 53, 53, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 86, 44, 86, 44, 86, 44, 49, 44, 53, 54, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 87, 44, 87, 44, 87, 44, 49, 44, 53, 55, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 88, 44, 88, 44, 88, 44, 49, 44, 53, 56, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 44, 89, 44, 89, 44, 49, 44, 53, 57, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 44, 90, 44, 90, 44, 49, 44, 53, 65, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 98, 56, 44, 206, 184, 44, 206, 184, 44, 49, 44, 53, 66, 44, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 65, 93, 44, 91, 65, 93, 44, 91, 65, 93, 44, 50, 44, 53, 67, 44, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 66, 93, 44, 91, 66, 93, 44, 91, 66, 93, 44, 50, 44, 53, 67, 44, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 67, 93, 44, 91, 67, 93, 44, 91, 67, 93, 44, 50, 44, 53, 67, 44, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 68, 93, 44, 91, 68, 93, 44, 91, 68, 93, 44, 50, 44, 53, 67, 44, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 69, 93, 44, 91, 69, 93, 44, 91, 69, 93, 44, 50, 44, 53, 67, 44, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 70, 93, 44, 91, 70, 93, 44, 91, 70, 93, 44, 50, 44, 53, 67, 44, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 71, 93, 44, 91, 71, 93, 44, 91, 71, 93, 44, 50, 44, 53, 67, 44, 54, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 72, 93, 44, 91, 72, 93, 44, 91, 72, 93, 44, 50, 44, 53, 67, 44, 55, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 73, 93, 44, 91, 73, 93, 44, 91, 73, 93, 44, 50, 44, 53, 67, 44, 56, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 74, 93, 44, 91, 74, 93, 44, 91, 74, 93, 44, 50, 44, 53, 67, 44, 57, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 92, 117, 50, 48, 56, 49, 44, 76, 226, 130, 129, 44, 76, 226, 130, 129, 44, 50, 44, 53, 68, 44, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 92, 117, 50, 48, 56, 50, 44, 76, 226, 130, 130, 44, 76, 226, 130, 130, 44, 50, 44, 53, 68, 44, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 92, 117, 50, 48, 56, 51, 44, 76, 226, 130, 131, 44, 76, 226, 130, 131, 44, 50, 44, 53, 68, 44, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 92, 117, 50, 48, 56, 52, 44, 76, 226, 130, 132, 44, 76, 226, 130, 132, 44, 50, 44, 53, 68, 44, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 92, 117, 50, 48, 56, 53, 44, 76, 226, 130, 133, 44, 76, 226, 130, 133, 44, 50, 44, 53, 68, 44, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 92, 117, 50, 48, 56, 54, 44, 76, 226, 130, 134, 44, 76, 226, 130, 134, 44, 50, 44, 53, 68, 44, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 49, 44, 89, 226, 130, 129, 44, 89, 226, 130, 129, 44, 50, 44, 53, 69, 44, 49, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 50, 44, 89, 226, 130, 130, 44, 89, 226, 130, 130, 44, 50, 44, 53, 69, 44, 49, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 51, 44, 89, 226, 130, 131, 44, 89, 226, 130, 131, 44, 50, 44, 53, 69, 44, 49, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 52, 44, 89, 226, 130, 132, 44, 89, 226, 130, 132, 44, 50, 44, 53, 69, 44, 49, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 53, 44, 89, 226, 130, 133, 44, 89, 226, 130, 133, 44, 50, 44, 53, 69, 44, 49, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 54, 44, 89, 226, 130, 134, 44, 89, 226, 130, 134, 44, 50, 44, 53, 69, 44, 49, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 55, 44, 89, 226, 130, 135, 44, 89, 226, 130, 135, 44, 50, 44, 53, 69, 44, 49, 54, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 56, 44, 89, 226, 130, 136, 44, 89, 226, 130, 136, 44, 50, 44, 53, 69, 44, 49, 55, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 57, 44, 89, 226, 130, 137, 44, 89, 226, 130, 137, 44, 50, 44, 53, 69, 44, 49, 56, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 48, 44, 89, 226, 130, 128, 44, 89, 226, 130, 128, 44, 50, 44, 53, 69, 44, 49, 57, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 88, 92, 117, 50, 48, 56, 49, 92, 117, 102, 48, 51, 56, 44, 88, 226, 130, 129, 225, 180, 155, 44, 88, 226, 130, 129, 225, 180, 155, 44, 50, 44, 53, 69, 44, 50, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 49, 92, 117, 102, 48, 51, 56, 44, 89, 226, 130, 129, 225, 180, 155, 44, 89, 226, 130, 129, 225, 180, 155, 44, 50, 44, 53, 69, 44, 50, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 88, 92, 117, 50, 48, 56, 50, 92, 117, 102, 48, 51, 56, 44, 88, 226, 130, 130, 225, 180, 155, 44, 88, 226, 130, 130, 225, 180, 155, 44, 50, 44, 53, 69, 44, 50, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 50, 92, 117, 102, 48, 51, 56, 44, 89, 226, 130, 130, 225, 180, 155, 44, 89, 226, 130, 130, 225, 180, 155, 44, 50, 44, 53, 69, 44, 50, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 88, 92, 117, 50, 48, 56, 51, 92, 117, 102, 48, 51, 56, 44, 88, 226, 130, 131, 225, 180, 155, 44, 88, 226, 130, 131, 225, 180, 155, 44, 50, 44, 53, 69, 44, 50, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 51, 92, 117, 102, 48, 51, 56, 44, 89, 226, 130, 131, 225, 180, 155, 44, 89, 226, 130, 131, 225, 180, 155, 44, 50, 44, 53, 69, 44, 50, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 88, 92, 117, 50, 48, 56, 52, 92, 117, 102, 48, 51, 56, 44, 88, 226, 130, 132, 225, 180, 155, 44, 88, 226, 130, 132, 225, 180, 155, 44, 50, 44, 53, 69, 44, 50, 54, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 52, 92, 117, 102, 48, 51, 56, 44, 89, 226, 130, 132, 225, 180, 155, 44, 89, 226, 130, 132, 225, 180, 155, 44, 50, 44, 53, 69, 44, 50, 55, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 88, 92, 117, 50, 48, 56, 53, 92, 117, 102, 48, 51, 56, 44, 88, 226, 130, 133, 225, 180, 155, 44, 88, 226, 130, 133, 225, 180, 155, 44, 50, 44, 53, 69, 44, 50, 56, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 53, 92, 117, 102, 48, 51, 56, 44, 89, 226, 130, 133, 225, 180, 155, 44, 89, 226, 130, 133, 225, 180, 155, 44, 50, 44, 53, 69, 44, 50, 57, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 88, 92, 117, 50, 48, 56, 54, 92, 117, 102, 48, 51, 56, 44, 88, 226, 130, 134, 225, 180, 155, 44, 88, 226, 130, 134, 225, 180, 155, 44, 50, 44, 53, 69, 44, 50, 65, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 92, 117, 50, 48, 56, 54, 92, 117, 102, 48, 51, 56, 44, 89, 226, 130, 134, 225, 180, 155, 44, 89, 226, 130, 134, 225, 180, 155, 44, 50, 44, 53, 69, 44, 50, 66, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 92, 117, 50, 48, 56, 49, 44, 114, 226, 130, 129, 44, 114, 226, 130, 129, 44, 50, 44, 53, 69, 44, 52, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 92, 117, 50, 48, 56, 50, 44, 114, 226, 130, 130, 44, 114, 226, 130, 130, 44, 50, 44, 53, 69, 44, 52, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 92, 117, 50, 48, 56, 51, 44, 114, 226, 130, 131, 44, 114, 226, 130, 131, 44, 50, 44, 53, 69, 44, 52, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 92, 117, 50, 48, 56, 52, 44, 114, 226, 130, 132, 44, 114, 226, 130, 132, 44, 50, 44, 53, 69, 44, 52, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 92, 117, 50, 48, 56, 53, 44, 114, 226, 130, 133, 44, 114, 226, 130, 133, 44, 50, 44, 53, 69, 44, 52, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 92, 117, 50, 48, 56, 54, 44, 114, 226, 130, 134, 44, 114, 226, 130, 134, 44, 50, 44, 53, 69, 44, 52, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 117, 44, 124, 117, 44, 124, 117, 44, 50, 44, 53, 69, 44, 56, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 118, 44, 124, 118, 44, 124, 118, 44, 50, 44, 53, 69, 44, 56, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 119, 44, 124, 119, 44, 124, 119, 44, 50, 44, 53, 69, 44, 56, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 112, 114, 103, 109, 44, 112, 114, 103, 109, 44, 112, 114, 103, 109, 44, 49, 44, 53, 70, 44, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 105, 99, 49, 44, 80, 105, 99, 49, 44, 73, 109, 103, 49, 44, 50, 44, 54, 48, 44, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 105, 99, 50, 44, 80, 105, 99, 50, 44, 73, 109, 103, 50, 44, 50, 44, 54, 48, 44, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 105, 99, 51, 44, 80, 105, 99, 51, 44, 73, 109, 103, 51, 44, 50, 44, 54, 48, 44, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 105, 99, 52, 44, 80, 105, 99, 52, 44, 73, 109, 103, 52, 44, 50, 44, 54, 48, 44, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 105, 99, 53, 44, 80, 105, 99, 53, 44, 73, 109, 103, 53, 44, 50, 44, 54, 48, 44, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 105, 99, 54, 44, 80, 105, 99, 54, 44, 73, 109, 103, 54, 44, 50, 44, 54, 48, 44, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 105, 99, 55, 44, 80, 105, 99, 55, 44, 73, 109, 103, 55, 44, 50, 44, 54, 48, 44, 54, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 105, 99, 56, 44, 80, 105, 99, 56, 44, 73, 109, 103, 56, 44, 50, 44, 54, 48, 44, 55, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 105, 99, 57, 44, 80, 105, 99, 57, 44, 73, 109, 103, 57, 44, 50, 44, 54, 48, 44, 56, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 105, 99, 48, 44, 80, 105, 99, 48, 44, 73, 109, 103, 48, 44, 50, 44, 54, 48, 44, 57, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 68, 66, 49, 44, 71, 68, 66, 49, 44, 66, 68, 71, 49, 44, 50, 44, 54, 49, 44, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 68, 66, 50, 44, 71, 68, 66, 50, 44, 66, 68, 71, 50, 44, 50, 44, 54, 49, 44, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 68, 66, 51, 44, 71, 68, 66, 51, 44, 66, 68, 71, 51, 44, 50, 44, 54, 49, 44, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 68, 66, 52, 44, 71, 68, 66, 52, 44, 66, 68, 71, 52, 44, 50, 44, 54, 49, 44, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 68, 66, 53, 44, 71, 68, 66, 53, 44, 66, 68, 71, 53, 44, 50, 44, 54, 49, 44, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 68, 66, 54, 44, 71, 68, 66, 54, 44, 66, 68, 71, 54, 44, 50, 44, 54, 49, 44, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 68, 66, 55, 44, 71, 68, 66, 55, 44, 66, 68, 71, 55, 44, 50, 44, 54, 49, 44, 54, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 68, 66, 56, 44, 71, 68, 66, 56, 44, 66, 68, 71, 56, 44, 50, 44, 54, 49, 44, 55, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 68, 66, 57, 44, 71, 68, 66, 57, 44, 66, 68, 71, 57, 44, 50, 44, 54, 49, 44, 56, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 68, 66, 48, 44, 71, 68, 66, 48, 44, 66, 68, 71, 48, 44, 50, 44, 54, 49, 44, 57, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 101, 103, 69, 81, 44, 82, 101, 103, 69, 81, 44, 82, 101, 103, 69, 81, 44, 50, 44, 54, 50, 44, 49, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 110, 44, 110, 44, 110, 44, 50, 44, 54, 50, 44, 50, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 51, 44, 120, 204, 132, 44, 120, 204, 132, 44, 50, 44, 54, 50, 44, 51, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 97, 51, 120, 44, 206, 163, 120, 44, 206, 163, 120, 44, 50, 44, 54, 50, 44, 52, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 97, 51, 120, 92, 117, 48, 48, 98, 50, 44, 206, 163, 120, 194, 178, 44, 206, 163, 120, 194, 178, 44, 50, 44, 54, 50, 44, 53, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 120, 44, 91, 83, 120, 93, 44, 91, 83, 120, 93, 44, 50, 44, 54, 50, 44, 54, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 51, 120, 44, 207, 131, 120, 44, 207, 131, 120, 44, 50, 44, 54, 50, 44, 55, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 109, 105, 110, 88, 44, 91, 109, 105, 110, 88, 93, 44, 91, 109, 105, 110, 88, 93, 44, 50, 44, 54, 50, 44, 56, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 109, 97, 120, 88, 44, 91, 109, 97, 120, 88, 93, 44, 91, 109, 97, 120, 88, 93, 44, 50, 44, 54, 50, 44, 57, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 109, 105, 110, 89, 44, 91, 109, 105, 110, 89, 93, 44, 91, 109, 105, 110, 89, 93, 44, 50, 44, 54, 50, 44, 48, 65, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 109, 97, 120, 89, 44, 91, 109, 97, 120, 89, 93, 44, 91, 109, 97, 120, 89, 93, 44, 50, 44, 54, 50, 44, 48, 66, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 52, 44, 200, 179, 44, 200, 179, 44, 50, 44, 54, 50, 44, 48, 67, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 97, 51, 121, 44, 206, 163, 121, 44, 206, 163, 121, 44, 50, 44, 54, 50, 44, 48, 68, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 97, 51, 121, 92, 117, 48, 48, 98, 50, 44, 206, 163, 121, 194, 178, 44, 206, 163, 121, 194, 178, 44, 50, 44, 54, 50, 44, 48, 69, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 121, 44, 91, 83, 121, 93, 44, 91, 83, 121, 93, 44, 50, 44, 54, 50, 44, 48, 70, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 51, 121, 44, 207, 131, 121, 44, 207, 131, 121, 44, 50, 44, 54, 50, 44, 49, 48, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 97, 51, 120, 121, 44, 206, 163, 120, 121, 44, 206, 163, 120, 121, 44, 50, 44, 54, 50, 44, 49, 49, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 44, 91, 114, 93, 44, 91, 114, 93, 44, 50, 44, 54, 50, 44, 49, 50, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 77, 101, 100, 44, 91, 77, 101, 100, 93, 44, 91, 77, 101, 100, 93, 44, 50, 44, 54, 50, 44, 49, 51, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 81, 92, 117, 50, 48, 56, 49, 44, 81, 226, 130, 129, 44, 81, 226, 130, 129, 44, 50, 44, 54, 50, 44, 49, 52, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 81, 92, 117, 50, 48, 56, 51, 44, 81, 226, 130, 131, 44, 81, 226, 130, 131, 44, 50, 44, 54, 50, 44, 49, 53, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 97, 44, 91, 124, 97, 93, 44, 91, 124, 97, 93, 44, 50, 44, 54, 50, 44, 49, 54, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 98, 44, 91, 124, 98, 93, 44, 91, 124, 98, 93, 44, 50, 44, 54, 50, 44, 49, 55, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 99, 44, 91, 124, 99, 93, 44, 91, 124, 99, 93, 44, 50, 44, 54, 50, 44, 49, 56, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 100, 44, 91, 124, 100, 93, 44, 91, 124, 100, 93, 44, 50, 44, 54, 50, 44, 49, 57, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 101, 44, 91, 124, 101, 93, 44, 91, 124, 101, 93, 44, 50, 44, 54, 50, 44, 49, 65, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 120, 92, 117, 50, 48, 56, 49, 44, 120, 226, 130, 129, 44, 120, 226, 130, 129, 44, 50, 44, 54, 50, 44, 49, 66, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 120, 92, 117, 50, 48, 56, 50, 44, 120, 226, 130, 130, 44, 120, 226, 130, 130, 44, 50, 44, 54, 50, 44, 49, 67, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 120, 92, 117, 50, 48, 56, 51, 44, 120, 226, 130, 131, 44, 120, 226, 130, 131, 44, 50, 44, 54, 50, 44, 49, 68, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 121, 92, 117, 50, 48, 56, 49, 44, 121, 226, 130, 129, 44, 121, 226, 130, 129, 44, 50, 44, 54, 50, 44, 49, 69, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 121, 92, 117, 50, 48, 56, 50, 44, 121, 226, 130, 130, 44, 121, 226, 130, 130, 44, 50, 44, 54, 50, 44, 49, 70, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 121, 92, 117, 50, 48, 56, 51, 44, 121, 226, 130, 131, 44, 121, 226, 130, 131, 44, 50, 44, 54, 50, 44, 50, 48, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 101, 44, 240, 157, 146, 143, 44, 240, 157, 146, 143, 44, 50, 44, 54, 50, 44, 50, 49, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 112, 44, 91, 112, 93, 44, 91, 112, 93, 44, 50, 44, 54, 50, 44, 50, 50, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 122, 44, 91, 122, 93, 44, 91, 122, 93, 44, 50, 44, 54, 50, 44, 50, 51, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 44, 91, 116, 93, 44, 91, 116, 93, 44, 50, 44, 54, 50, 44, 50, 52, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 55, 92, 117, 48, 48, 98, 50, 44, 207, 135, 194, 178, 44, 207, 135, 194, 178, 44, 50, 44, 54, 50, 44, 50, 53, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 50, 49, 44, 91, 124, 70, 93, 44, 91, 124, 70, 93, 44, 50, 44, 54, 50, 44, 50, 54, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 100, 102, 44, 91, 100, 102, 93, 44, 91, 100, 102, 93, 44, 50, 44, 54, 50, 44, 50, 55, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 50, 50, 44, 112, 204, 130, 44, 112, 204, 130, 44, 50, 44, 54, 50, 44, 50, 56, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 50, 50, 92, 117, 50, 48, 56, 49, 44, 112, 204, 130, 226, 130, 129, 44, 112, 204, 130, 226, 130, 129, 44, 50, 44, 54, 50, 44, 50, 57, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 50, 50, 92, 117, 50, 48, 56, 50, 44, 112, 204, 130, 226, 130, 130, 44, 112, 204, 130, 226, 130, 130, 44, 50, 44, 54, 50, 44, 50, 65, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 51, 92, 117, 50, 48, 56, 49, 44, 120, 204, 132, 226, 130, 129, 44, 120, 204, 132, 226, 130, 129, 44, 50, 44, 54, 50, 44, 50, 66, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 120, 92, 117, 50, 48, 56, 49, 44, 83, 120, 226, 130, 129, 44, 195, 137, 99, 116, 121, 112, 120, 226, 130, 129, 44, 50, 44, 54, 50, 44, 50, 67, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 110, 92, 117, 50, 48, 56, 49, 44, 110, 226, 130, 129, 44, 110, 226, 130, 129, 44, 50, 44, 54, 50, 44, 50, 68, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 51, 92, 117, 50, 48, 56, 50, 44, 120, 204, 132, 226, 130, 130, 44, 120, 204, 132, 226, 130, 130, 44, 50, 44, 54, 50, 44, 50, 69, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 120, 92, 117, 50, 48, 56, 50, 44, 83, 120, 226, 130, 130, 44, 195, 137, 99, 116, 121, 112, 120, 226, 130, 130, 44, 50, 44, 54, 50, 44, 50, 70, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 110, 92, 117, 50, 48, 56, 50, 44, 110, 226, 130, 130, 44, 110]);
            fileData0.push.apply(fileData0, [226, 130, 130, 44, 50, 44, 54, 50, 44, 51, 48, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 120, 112, 44, 83, 120, 112, 44, 195, 137, 99, 116, 121, 112, 120, 112, 44, 50, 44, 54, 50, 44, 51, 49, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 108, 111, 119, 101, 114, 44, 108, 111, 119, 101, 114, 44, 98, 111, 114, 110, 105, 110, 102, 44, 50, 44, 54, 50, 44, 51, 50, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 117, 112, 112, 101, 114, 44, 117, 112, 112, 101, 114, 44, 98, 111, 114, 110, 115, 117, 112, 44, 50, 44, 54, 50, 44, 51, 51, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 44, 91, 115, 93, 44, 91, 115, 93, 44, 50, 44, 54, 50, 44, 51, 52, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 92, 117, 48, 48, 98, 50, 44, 114, 194, 178, 44, 114, 194, 178, 44, 50, 44, 54, 50, 44, 51, 53, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 92, 117, 48, 48, 98, 50, 44, 82, 194, 178, 44, 82, 194, 178, 44, 50, 44, 54, 50, 44, 51, 54, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 102, 97, 99, 116, 111, 114, 100, 102, 93, 44, 91, 102, 97, 99, 116, 111, 114, 100, 102, 93, 44, 91, 102, 97, 99, 116, 111, 114, 100, 102, 93, 44, 50, 44, 54, 50, 44, 51, 55, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 102, 97, 99, 116, 111, 114, 83, 83, 93, 44, 91, 102, 97, 99, 116, 111, 114, 83, 83, 93, 44, 91, 102, 97, 99, 116, 111, 114, 83, 83, 93, 44, 50, 44, 54, 50, 44, 51, 56, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 102, 97, 99, 116, 111, 114, 77, 83, 93, 44, 91, 102, 97, 99, 116, 111, 114, 77, 83, 93, 44, 91, 102, 97, 99, 116, 111, 114, 77, 83, 93, 44, 50, 44, 54, 50, 44, 51, 57, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 101, 114, 114, 111, 114, 100, 102, 93, 44, 91, 101, 114, 114, 111, 114, 100, 102, 93, 44, 91, 101, 114, 114, 111, 114, 100, 102, 93, 44, 50, 44, 54, 50, 44, 51, 65, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 101, 114, 114, 111, 114, 83, 83, 93, 44, 91, 101, 114, 114, 111, 114, 83, 83, 93, 44, 91, 101, 114, 114, 111, 114, 83, 83, 93, 44, 50, 44, 54, 50, 44, 51, 66, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 91, 101, 114, 114, 111, 114, 77, 83, 93, 44, 91, 101, 114, 114, 111, 114, 77, 83, 93, 44, 91, 101, 114, 114, 111, 114, 77, 83, 93, 44, 50, 44, 54, 50, 44, 51, 67, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 88, 115, 99, 108, 44, 90, 88, 115, 99, 108, 44, 90, 88, 115, 99, 108, 44, 50, 44, 54, 51, 44, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 89, 115, 99, 108, 44, 90, 89, 115, 99, 108, 44, 90, 89, 115, 99, 108, 44, 50, 44, 54, 51, 44, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 88, 115, 99, 108, 44, 88, 115, 99, 108, 44, 88, 115, 99, 108, 44, 50, 44, 54, 51, 44, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 115, 99, 108, 44, 89, 115, 99, 108, 44, 89, 115, 99, 108, 44, 50, 44, 54, 51, 44, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 117, 40, 92, 117, 102, 48, 48, 101, 77, 105, 110, 41, 44, 117, 40, 110, 77, 105, 110, 41, 44, 117, 40, 110, 77, 105, 110, 41, 44, 50, 44, 54, 51, 44, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 118, 40, 92, 117, 102, 48, 48, 101, 77, 105, 110, 41, 44, 118, 40, 110, 77, 105, 110, 41, 44, 118, 40, 110, 77, 105, 110, 41, 44, 50, 44, 54, 51, 44, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 85, 110, 45, 226, 130, 129, 44, 85, 110, 45, 226, 130, 129, 44, 85, 110, 45, 226, 130, 129, 44, 50, 44, 54, 51, 44, 54, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 86, 110, 45, 226, 130, 129, 44, 86, 110, 45, 226, 130, 129, 44, 86, 110, 45, 226, 130, 129, 44, 50, 44, 54, 51, 44, 55, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 117, 40, 92, 117, 102, 48, 48, 101, 77, 105, 110, 41, 44, 90, 117, 40, 110, 109, 105, 110, 41, 44, 90, 117, 40, 110, 109, 105, 110, 41, 44, 50, 44, 54, 51, 44, 56, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 118, 40, 92, 117, 102, 48, 48, 101, 77, 105, 110, 41, 44, 90, 118, 40, 110, 109, 105, 110, 41, 44, 90, 118, 40, 110, 109, 105, 110, 41, 44, 50, 44, 54, 51, 44, 57, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 88, 109, 105, 110, 44, 88, 109, 105, 110, 44, 88, 109, 105, 110, 44, 50, 44, 54, 51, 44, 48, 65, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 88, 109, 97, 120, 44, 88, 109, 97, 120, 44, 88, 109, 97, 120, 44, 50, 44, 54, 51, 44, 48, 66, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 109, 105, 110, 44, 89, 109, 105, 110, 44, 89, 109, 105, 110, 44, 50, 44, 54, 51, 44, 48, 67, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 109, 97, 120, 44, 89, 109, 97, 120, 44, 89, 109, 97, 120, 44, 50, 44, 54, 51, 44, 48, 68, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 109, 105, 110, 44, 84, 109, 105, 110, 44, 84, 109, 105, 110, 44, 50, 44, 54, 51, 44, 48, 69, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 109, 97, 120, 44, 84, 109, 97, 120, 44, 84, 109, 97, 120, 44, 50, 44, 54, 51, 44, 48, 70, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 98, 56, 109, 105, 110, 44, 206, 184, 77, 105, 110, 44, 206, 184, 77, 105, 110, 44, 50, 44, 54, 51, 44, 49, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 98, 56, 109, 97, 120, 44, 206, 184, 77, 97, 120, 44, 206, 184, 77, 97, 120, 44, 50, 44, 54, 51, 44, 49, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 88, 109, 105, 110, 44, 90, 88, 109, 105, 110, 44, 90, 88, 109, 105, 110, 44, 50, 44, 54, 51, 44, 49, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 88, 109, 97, 120, 44, 90, 88, 109, 97, 120, 44, 90, 88, 109, 97, 120, 44, 50, 44, 54, 51, 44, 49, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 89, 109, 105, 110, 44, 90, 89, 109, 105, 110, 44, 90, 89, 109, 105, 110, 44, 50, 44, 54, 51, 44, 49, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 89, 109, 97, 120, 44, 90, 89, 109, 97, 120, 44, 90, 89, 109, 97, 120, 44, 50, 44, 54, 51, 44, 49, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 92, 117, 48, 51, 98, 56, 109, 105, 110, 44, 90, 206, 184, 109, 105, 110, 44, 90, 206, 184, 109, 105, 110, 44, 50, 44, 54, 51, 44, 49, 54, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 92, 117, 48, 51, 98, 56, 109, 97, 120, 44, 90, 206, 184, 109, 97, 120, 44, 90, 206, 184, 109, 97, 120, 44, 50, 44, 54, 51, 44, 49, 55, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 84, 109, 105, 110, 44, 90, 84, 109, 105, 110, 44, 90, 84, 109, 105, 110, 44, 50, 44, 54, 51, 44, 49, 56, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 84, 109, 97, 120, 44, 90, 84, 109, 97, 120, 44, 90, 84, 109, 97, 120, 44, 50, 44, 54, 51, 44, 49, 57, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 98, 108, 83, 116, 97, 114, 116, 44, 84, 98, 108, 83, 116, 97, 114, 116, 44, 84, 98, 108, 83, 116, 97, 114, 116, 44, 50, 44, 54, 51, 44, 49, 65, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 108, 111, 116, 83, 116, 97, 114, 116, 44, 80, 108, 111, 116, 83, 116, 97, 114, 116, 44, 80, 108, 111, 116, 83, 116, 97, 114, 116, 44, 50, 44, 54, 51, 44, 49, 66, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 80, 108, 111, 116, 83, 116, 97, 114, 116, 44, 90, 80, 108, 111, 116, 83, 116, 97, 114, 116, 44, 90, 80, 108, 111, 116, 83, 116, 97, 114, 116, 44, 50, 44, 54, 51, 44, 49, 67, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 101, 77, 97, 120, 44, 110, 77, 97, 120, 44, 110, 77, 97, 120, 44, 50, 44, 54, 51, 44, 49, 68, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 92, 117, 102, 48, 48, 101, 77, 97, 120, 44, 90, 110, 77, 97, 120, 44, 90, 110, 77, 97, 120, 44, 50, 44, 54, 51, 44, 49, 69, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 101, 77, 105, 110, 44, 110, 77, 105, 110, 44, 110, 77, 105, 110, 44, 50, 44, 54, 51, 44, 49, 70, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 92, 117, 102, 48, 48, 101, 77, 105, 110, 44, 90, 110, 77, 105, 110, 44, 90, 110, 77, 105, 110, 44, 50, 44, 54, 51, 44, 50, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 50, 52, 84, 98, 108, 44, 226, 136, 134, 84, 98, 108, 44, 226, 136, 134, 84, 98, 108, 44, 50, 44, 54, 51, 44, 50, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 115, 116, 101, 112, 44, 84, 115, 116, 101, 112, 44, 84, 115, 116, 101, 112, 44, 50, 44, 54, 51, 44, 50, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 98, 56, 115, 116, 101, 112, 44, 206, 184, 115, 116, 101, 112, 44, 206, 184, 115, 116, 101, 112, 44, 50, 44, 54, 51, 44, 50, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 84, 115, 116, 101, 112, 44, 90, 84, 115, 116, 101, 112, 44, 90, 84, 115, 116, 101, 112, 44, 50, 44, 54, 51, 44, 50, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 92, 117, 48, 51, 98, 56, 115, 116, 101, 112, 44, 90, 206, 184, 115, 116, 101, 112, 44, 90, 206, 184, 115, 116, 101, 112, 44, 50, 44, 54, 51, 44, 50, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 50, 52, 88, 44, 226, 136, 134, 88, 44, 226, 136, 134, 88, 44, 50, 44, 54, 51, 44, 50, 54, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 50, 52, 89, 44, 226, 136, 134, 89, 44, 226, 136, 134, 89, 44, 50, 44, 54, 51, 44, 50, 55, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 88, 70, 97, 99, 116, 44, 88, 70, 97, 99, 116, 44, 88, 70, 97, 99, 116, 44, 50, 44, 54, 51, 44, 50, 56, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 70, 97, 99, 116, 44, 89, 70, 97, 99, 116, 44, 89, 70, 97, 99, 116, 44, 50, 44, 54, 51, 44, 50, 57, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 98, 108, 73, 110, 112, 117, 116, 44, 84, 98, 108, 73, 110, 112, 117, 116, 44, 84, 98, 108, 73, 110, 112, 117, 116, 44, 50, 44, 54, 51, 44, 50, 65, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 108, 105, 115, 116, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 49, 53, 97, 44, 240, 157, 151, 161, 44, 240, 157, 151, 161, 44, 50, 44, 54, 51, 44, 50, 66, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 37, 44, 73, 37, 44, 73, 37, 44, 50, 44, 54, 51, 44, 50, 67, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 86, 44, 80, 86, 44, 80, 86, 44, 50, 44, 54, 51, 44, 50, 68, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 77, 84, 44, 80, 77, 84, 44, 80, 77, 84, 44, 50, 44, 54, 51, 44, 50, 69, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 70, 86, 44, 70, 86, 44, 70, 86, 44, 50, 44, 54, 51, 44, 50, 70, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 47, 89, 44, 124, 80, 47, 89, 44, 124, 80, 47, 89, 44, 50, 44, 54, 51, 44, 51, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 47, 89, 44, 124, 67, 47, 89, 44, 124, 67, 47, 89, 44, 50, 44, 54, 51, 44, 51, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 119, 40, 92, 117, 102, 48, 48, 101, 77, 105, 110, 41, 44, 119, 40, 110, 77, 105, 110, 41, 44, 119, 40, 110, 77, 105, 110, 41, 44, 50, 44, 54, 51, 44, 51, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 119, 40, 92, 117, 102, 48, 48, 101, 77, 105, 110, 41, 44, 90, 119, 40, 110, 77, 105, 110, 41, 44, 90, 119, 40, 110, 77, 105, 110, 41, 44, 50, 44, 54, 51, 44, 51, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 108, 111, 116, 83, 116, 101, 112, 44, 80, 108, 111, 116, 83, 116, 101, 112, 44, 71, 114, 97, 112, 104, 80, 97, 115, 44, 50, 44, 54, 51, 44, 51, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 80, 108, 111, 116, 83, 116, 101, 112, 44, 90, 80, 108, 111, 116, 83, 116, 101, 112, 44, 90, 103, 114, 97, 112, 104, 80, 97, 115, 44, 50, 44, 54, 51, 44, 51, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 88, 114, 101, 115, 44, 88, 114, 101, 115, 44, 88, 114, 101, 115, 44, 50, 44, 54, 51, 44, 51, 54, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 88, 114, 101, 115, 44, 90, 88, 114, 101, 115, 44, 90, 88, 114, 101, 115, 44, 50, 44, 54, 51, 44, 51, 55, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 114, 97, 99, 101, 83, 116, 101, 112, 44, 84, 114, 97, 99, 101, 83, 116, 101, 112, 44, 84, 114, 97, 99, 101, 80, 97, 115, 44, 50, 44, 54, 51, 44, 51, 56, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 97, 100, 105, 97, 110, 44, 82, 97, 100, 105, 97, 110, 44, 82, 97, 100, 105, 97, 110, 44, 49, 44, 54, 52, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 101, 103, 114, 101, 101, 44, 68, 101, 103, 114, 101, 101, 44, 68, 101, 103, 114, 195, 169, 44, 49, 44, 54, 53, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 78, 111, 114, 109, 97, 108, 44, 78, 111, 114, 109, 97, 108, 44, 78, 111, 114, 109, 97, 108, 44, 49, 44, 54, 54, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 99, 105, 44, 83, 99, 105, 44, 83, 99, 105, 44, 49, 44, 54, 55, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 69, 110, 103, 44, 69, 110, 103, 44, 73, 110, 103, 44, 49, 44, 54, 56, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 70, 108, 111, 97, 116, 44, 70, 108, 111, 97, 116, 44, 70, 108, 111, 116, 116, 97, 110, 116, 44, 49, 44, 54, 57, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 61, 44, 61, 44, 61, 44, 49, 44, 54, 65, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 60, 44, 60, 44, 60, 44, 49, 44, 54, 66, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 62, 44, 62, 44, 62, 44, 49, 44, 54, 67, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 50, 54, 52, 44, 226, 137, 164, 44, 226, 137, 164, 44, 49, 44, 54, 68, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 50, 54, 53, 44, 226, 137, 165, 44, 226, 137, 165, 44, 49, 44, 54, 69, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 50, 54, 48, 44, 226, 137, 160, 44, 226, 137, 160, 44, 49, 44, 54, 70, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 43, 44, 43, 44, 43, 44, 49, 44, 55, 48, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 45, 44, 45, 44, 45, 44, 49, 44, 55, 49, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 65, 110, 115, 44, 65, 110, 115, 44, 82, 101, 112, 44, 49, 44, 55, 50, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 70, 105, 120, 32, 44, 70, 105, 120, 32, 44, 70, 105, 120, 101, 32, 44, 49, 44, 55, 51, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 72, 111, 114, 105, 122, 44, 72, 111, 114, 105, 122, 44, 72, 111, 114, 105, 122, 44, 49, 44, 55, 52, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 70, 117, 108, 108, 44, 70, 117, 108, 108, 44, 80, 108, 101, 105, 110, 69, 99, 114, 44, 49, 44, 55, 53, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 70, 117, 110, 99, 44, 70, 117, 110, 99, 44, 70, 111, 110, 99, 116, 44, 49, 44, 55, 54, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 97, 114, 97, 109, 44, 80, 97, 114, 97, 109, 44, 80, 97, 114, 97, 109, 44, 49, 44, 55, 55, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 111, 108, 97, 114, 44, 80, 111, 108, 97, 114, 44, 80, 111, 108, 97, 105, 114, 101, 44, 49, 44, 55, 56, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 101, 113, 44, 83, 101, 113, 44, 83, 117, 105, 116, 101, 44, 49, 44, 55, 57, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 110, 100, 112, 110, 116, 65, 117, 116, 111, 44, 73, 110, 100, 112, 110, 116, 65, 117, 116, 111, 44, 86, 97, 108, 101, 117, 114, 115, 65, 117, 116, 111, 44, 49, 44, 55, 65, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 110, 100, 112, 110, 116, 65, 115, 107, 44, 73, 110, 100, 112, 110, 116, 65, 115, 107, 44, 86, 97, 108, 101, 117, 114, 115, 68, 101, 109, 44, 49, 44, 55, 66, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 101, 112, 101, 110, 100, 65, 117, 116, 111, 44, 68, 101, 112, 101, 110, 100, 65, 117, 116, 111, 44, 67, 97, 108, 99, 117, 108, 115, 65, 117, 116, 111, 44, 49, 44, 55, 67, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 101, 112, 101, 110, 100, 65, 115, 107, 44, 68, 101, 112, 101, 110, 100, 65, 115, 107, 44, 67, 97, 108, 99, 117, 108, 115, 68, 101, 109, 44, 49, 44, 55, 68, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 101, 113, 117, 101, 110, 116, 105, 97, 108, 44, 83, 101, 113, 117, 101, 110, 116, 105, 97, 108, 44, 83, 195, 169, 113, 117, 101, 110, 116, 105, 101, 108, 44, 50, 44, 55, 69, 44, 48, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 105, 109, 117, 108, 44, 83, 105, 109, 117, 108, 44, 83, 105, 109, 117, 108, 44, 50, 44, 55, 69, 44, 49, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 111, 108, 97, 114, 71, 67, 44, 80, 111, 108, 97, 114, 71, 67, 44, 67, 111, 111, 114, 100, 80, 111, 108, 44, 50, 44, 55, 69, 44, 50, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 101, 99, 116, 71, 67, 44, 82, 101, 99, 116, 71, 67, 44, 67, 111, 111, 114, 100, 82, 101, 99, 116, 44, 50, 44, 55, 69, 44, 51, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 111, 111, 114, 100, 79, 110, 44, 67, 111, 111, 114, 100, 79, 110, 44, 67, 111, 111, 114, 100, 65, 102, 102, 44, 50, 44, 55, 69, 44, 52, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 111, 111, 114, 100, 79, 102, 102, 44, 67, 111, 111, 114, 100, 79, 102, 102, 44, 67, 111, 111, 114, 100, 78, 65, 102, 102, 44, 50, 44, 55, 69, 44, 53, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 111, 110, 110, 101, 99, 116, 101, 100, 44, 67, 111, 110, 110, 101, 99, 116, 101, 100, 44, 82, 101, 108, 105, 195, 169, 44, 50, 44, 55, 69, 44, 54, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 104, 105, 99, 107, 44, 84, 104, 105, 99, 107, 44, 84, 104, 105, 99, 107, 44, 50, 44, 55, 69, 44, 54, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 65, 108, 105, 97, 115, 32, 63, 44, 13, 10, 44, 44, 44, 68, 111, 116, 44, 68, 111, 116, 44, 78, 111, 110, 82, 101, 108, 105, 195, 169, 44, 50, 44, 55, 69, 44, 55, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 111, 116, 45, 84, 104, 105, 99, 107, 44, 68, 111, 116, 45, 84, 104, 105, 99, 107, 44, 68, 111, 116, 45, 84, 104, 105, 99, 107, 44, 50, 44, 55, 69, 44, 55, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 65, 108, 105, 97, 115, 32, 63, 44, 13, 10, 44, 44, 44, 65, 120, 101, 115, 79, 110, 32, 44, 65, 120, 101, 115, 79, 110, 32, 44, 65, 120, 101, 115, 65, 102, 102, 32, 44, 50, 44, 55, 69, 44, 56, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 65, 120, 101, 115, 79, 102, 102, 44, 65, 120, 101, 115, 79, 102, 102, 44, 65, 120, 101, 115, 78, 65, 102, 102, 44, 50, 44, 55, 69, 44, 57, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 114, 105, 100, 68, 111, 116, 32, 44, 71, 114, 105, 100, 68, 111, 116, 32, 44, 71, 114, 105, 100, 68, 111, 116, 32, 44, 50, 44, 55, 69, 44, 48, 65, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 114, 105, 100, 79, 110, 44, 71, 114, 105, 100, 79, 110, 44, 81, 117, 97, 100, 65, 102, 102, 44, 50, 44, 55, 69, 44, 48, 65, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 114, 105, 100, 79, 102, 102, 44, 71, 114, 105, 100, 79, 102, 102, 44, 81, 117, 97, 100, 78, 65, 102, 102, 44, 50, 44, 55, 69, 44, 48, 66, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 97, 98, 101, 108, 79, 110, 44, 76, 97, 98, 101, 108, 79, 110, 44, 69, 116, 105, 113, 65, 102, 102, 44, 50, 44, 55, 69, 44, 48, 67, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 97, 98, 101, 108, 79, 102, 102, 44, 76, 97, 98, 101, 108, 79, 102, 102, 44, 69, 116, 105, 113, 78, 65, 102, 102, 44, 50, 44, 55, 69, 44, 48, 68, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 87, 101, 98, 44, 87, 101, 98, 44, 84, 111, 105, 108, 101, 44, 50, 44, 55, 69, 44, 48, 69, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 105, 109, 101, 44, 84, 105, 109, 101, 44, 102, 40, 110, 41, 44, 50, 44, 55, 69, 44, 48, 70, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 117, 118, 65, 120, 101, 115, 44, 117, 118, 65, 120, 101, 115, 44, 117, 118, 65, 120, 101, 115, 44, 50, 44, 55, 69, 44, 49, 48, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 118, 119, 65, 120, 101, 115, 44, 118, 119, 65, 120, 101, 115, 44, 118, 119, 65, 120, 101, 115, 44, 50, 44, 55, 69, 44, 49, 49, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 117, 119, 65, 120, 101, 115, 44, 117, 119, 65, 120, 101, 115, 44, 117, 119, 65, 120, 101, 115, 44, 50, 44, 55, 69, 44, 49, 50, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 114, 97, 112, 104, 32, 70, 111, 114, 109, 97, 116, 44, 71, 114, 97, 112, 104, 32, 70, 111, 114, 109, 97, 116, 44, 71, 114, 97, 112, 104, 32, 70, 111, 114, 109, 97, 116, 44, 49, 44, 55, 69, 44, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 53, 97, 98, 44, 226, 150, 161, 44, 226, 150, 161, 44, 49, 44, 55, 70, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 55, 97, 44, 239, 185, 162, 44, 239, 185, 162, 44, 49, 44, 56, 48, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 50, 50, 44, 194, 183, 44, 194, 183, 44, 49, 44, 56, 49, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 42, 44, 42, 44, 42, 44, 49, 44, 56, 50, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 47, 44, 47, 44, 47, 44, 49, 44, 56, 51, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 114, 97, 99, 101, 44, 84, 114, 97, 99, 101, 44, 84, 114, 97, 99, 101, 44, 49, 44, 56, 52, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 108, 114, 68, 114, 97, 119, 44, 67, 108, 114, 68, 114, 97, 119, 44, 69, 102, 102, 68, 101, 115, 115, 105, 110, 44, 49, 44, 56, 53, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 83, 116, 97, 110, 100, 97, 114, 100, 44, 90, 83, 116, 97, 110, 100, 97, 114, 100, 44, 90, 83, 116, 97, 110, 100, 97, 114, 100, 44, 49, 44, 56, 54, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 84, 114, 105, 103, 44, 90, 84, 114, 105, 103, 44, 90, 84, 114, 105, 103, 44, 49, 44, 56, 55, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 66, 111, 120, 44, 90, 66, 111, 120, 44, 90, 98, 111, 195, 174, 116, 101, 44, 49, 44, 56, 56, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 111, 111, 109, 32, 73, 110, 44, 90, 111, 111, 109, 32, 73, 110, 44, 90, 111, 111, 109, 32, 43, 44, 49, 44, 56, 57, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 111, 111, 109, 32, 79, 117, 116, 44, 90, 111, 111, 109, 32, 79, 117, 116, 44, 90, 111, 111, 109, 32, 45, 44, 49, 44, 56, 65, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 83, 113, 117, 97, 114, 101, 44, 90, 83, 113, 117, 97, 114, 101, 44, 90, 111, 114, 116, 104, 111, 110, 111, 114, 109, 97, 108, 44, 49, 44, 56, 66, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 73, 110, 116, 101, 103, 101, 114, 44, 90, 73, 110, 116, 101, 103, 101, 114, 44, 90, 105, 110, 116, 67, 111, 110, 102, 44, 49, 44, 56, 67, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 80, 114, 101, 118, 105, 111, 117, 115, 44, 90, 80, 114, 101, 118, 105, 111, 117, 115, 44, 90, 112, 114, 195, 169, 99, 195, 169, 100, 101, 110, 116, 44, 49, 44, 56, 68, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 68, 101, 99, 105, 109, 97, 108, 44, 90, 68, 101, 99, 105, 109, 97, 108, 44, 90, 100, 195, 169, 99, 105, 109, 97, 108, 44, 49, 44, 56, 69, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 111, 111, 109, 83, 116, 97, 116, 44, 90, 111, 111, 109, 83, 116, 97, 116, 44, 90, 111, 111, 109, 83, 116, 97, 116, 44, 49, 44, 56, 70, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 111, 111, 109, 82, 99, 108, 44, 90, 111, 111, 109, 82, 99, 108, 44, 90, 111, 111, 109, 82, 112, 108, 44, 49, 44, 57, 48, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 114, 105, 110, 116, 83, 99, 114, 101, 101, 110, 44, 80, 114, 105, 110, 116, 83, 99, 114, 101, 101, 110, 44, 80, 114, 105, 110, 116, 83, 99, 114, 101, 101, 110, 44, 49, 44, 57, 49, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 78, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 40, 111, 110, 108, 121, 32, 116, 111, 107, 101, 110, 41, 44, 13, 10, 44, 44, 44, 90, 111, 111, 109, 83, 116, 111, 44, 90, 111, 111, 109, 83, 116, 111, 44, 83, 97, 117, 118, 101, 70, 101, 110, 44, 49, 44, 57, 50, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 101, 120, 116, 40, 44, 84, 101, 120, 116, 40, 44, 84, 101, 120, 116, 101, 40, 44, 49, 44, 57, 51, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 32, 110, 80, 114, 32, 44, 32, 110, 80, 114, 32, 44, 32, 65, 114, 114, 97, 110, 103, 101, 109, 101, 110, 116, 44, 49, 44, 57, 52, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 32, 110, 67, 114, 32, 44, 32, 110, 67, 114, 32, 44, 67, 111, 109, 98, 105, 110, 97, 105, 115, 111, 110, 32, 44, 49, 44, 57, 53, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 70, 110, 79, 110, 32, 44, 70, 110, 79, 110, 32, 44, 70, 111, 110, 99, 116, 65, 102, 102, 32, 44, 49, 44, 57, 54, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 70, 110, 79, 102, 102, 32, 44, 70, 110, 79, 102, 102, 32, 44, 70, 111, 110, 99, 116, 78, 65, 102, 102, 32, 44, 49, 44, 57, 55, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 111, 114, 101, 80, 105, 99, 32, 44, 83, 116, 111, 114, 101, 80, 105, 99, 32, 44, 83, 97, 117, 118, 101, 73, 109, 97, 103, 101, 32, 44, 49, 44, 57, 56, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 101, 99, 97, 108, 108, 80, 105, 99, 32, 44, 82, 101, 99, 97, 108, 108, 80, 105, 99, 32, 44, 82, 97, 112, 112, 101, 108, 73, 109, 97, 103, 101, 32, 44, 49, 44, 57, 57, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 111, 114, 101, 71, 68, 66, 32, 44, 83, 116, 111, 114, 101, 71, 68, 66, 32, 44, 83, 97, 117, 118, 101, 66, 68, 71, 32, 44, 49, 44, 57, 65, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 101, 99, 97, 108, 108, 71, 68, 66, 32, 44, 82, 101, 99, 97, 108, 108, 71, 68, 66, 32, 44, 82, 97, 112, 112, 101, 108, 66, 68, 71, 32, 44, 49, 44, 57, 66, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 105, 110, 101, 40, 44, 76, 105, 110, 101, 40, 44, 76, 105, 103, 110, 101, 40, 44, 49, 44, 57, 67, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 86, 101, 114, 116, 105, 99, 97, 108, 32, 44, 86, 101, 114, 116, 105, 99, 97, 108, 32, 44, 86, 101, 114, 116, 105, 99, 97, 108, 101, 32, 44, 49, 44, 57, 68, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 116, 45, 79, 110, 40, 44, 80, 116, 45, 79, 110, 40, 44, 80, 116, 45, 65, 102, 102, 40, 44, 49, 44, 57, 69, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 116, 45, 79, 102, 102, 40, 44, 80, 116, 45, 79, 102, 102, 40, 44, 80, 116, 45, 78, 97, 102, 102, 40, 44, 49, 44, 57, 70, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 116, 45, 67, 104, 97, 110, 103, 101, 40, 44, 80, 116, 45, 67, 104, 97, 110, 103, 101, 40, 44, 80, 116, 45, 67, 104, 97, 110, 103, 101, 40, 44, 49, 44, 65, 48, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 120, 108, 45, 79, 110, 40, 44, 80, 120, 108, 45, 79, 110, 40, 44, 80, 120, 108, 45, 65, 102, 102, 40, 44, 49, 44, 65, 49, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 120, 108, 45, 79, 102, 102, 40, 44, 80, 120, 108, 45, 79, 102, 102, 40, 44, 80, 120, 108, 45, 78, 97, 102, 102, 40, 44, 49, 44, 65, 50, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 120, 108, 45, 67, 104, 97, 110, 103, 101, 40, 44, 80, 120, 108, 45, 67, 104, 97, 110, 103, 101, 40, 44, 80, 120, 108, 45, 67, 104, 97, 110, 103, 101, 40, 44, 49, 44, 65, 51, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 104, 97, 100, 101, 40, 44, 83, 104, 97, 100, 101, 40, 44, 79, 109, 98, 114, 101, 40, 44, 49, 44, 65, 52, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 105, 114, 99, 108, 101, 40, 44, 67, 105, 114, 99, 108, 101, 40, 44, 67, 101, 114, 99, 108, 101, 40, 44, 49, 44, 65, 53, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 72, 111, 114, 105, 122, 111, 110, 116, 97, 108, 32, 44, 72, 111, 114, 105, 122, 111, 110, 116, 97, 108, 32, 44, 72, 111, 114, 105, 122, 111, 110, 116, 97, 108, 101, 32, 44, 49, 44, 65, 54, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 97, 110, 103, 101, 110, 116, 40, 44, 84, 97, 110, 103, 101, 110, 116, 40, 44, 84, 97, 110, 103, 101, 110, 116, 101, 40, 44, 49, 44, 65, 55, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 114, 97, 119, 73, 110, 118, 32, 44, 68, 114, 97, 119, 73, 110, 118, 32, 44, 68, 101, 115, 115, 82, 101, 99, 105, 112, 32, 44, 49, 44, 65, 56, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 114, 97, 119, 70, 32, 44, 68, 114, 97, 119, 70, 32, 44, 68, 101, 115, 115, 70, 111, 110, 99, 116, 32, 44, 49, 44, 65, 57, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 114, 49, 44, 83, 116, 114, 49, 44, 67, 104, 97, 105, 110, 101, 49, 44, 50, 44, 65, 65, 44, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 114, 50, 44, 83, 116, 114, 50, 44, 67, 104, 97, 105, 110, 101, 50, 44, 50, 44, 65, 65, 44, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 114, 51, 44, 83, 116, 114, 51, 44, 67, 104, 97, 105, 110, 101, 51, 44, 50, 44, 65, 65, 44, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 114, 52, 44, 83, 116, 114, 52, 44, 67, 104, 97, 105, 110, 101, 52, 44, 50, 44, 65, 65, 44, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 114, 53, 44, 83, 116, 114, 53, 44, 67, 104, 97, 105, 110, 101, 53, 44, 50, 44, 65, 65, 44, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 114, 54, 44, 83, 116, 114, 54, 44, 67, 104, 97, 105, 110, 101, 54, 44, 50, 44, 65, 65, 44, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 114, 55, 44, 83, 116, 114, 55, 44, 67, 104, 97, 105, 110, 101, 55, 44, 50, 44, 65, 65, 44, 54, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 114, 56, 44, 83, 116, 114, 56, 44, 67, 104, 97, 105, 110, 101, 56, 44, 50, 44, 65, 65, 44, 55, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 114, 57, 44, 83, 116, 114, 57, 44, 67, 104, 97, 105, 110, 101, 57, 44, 50, 44, 65, 65, 44, 56, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 114, 48, 44, 83, 116, 114, 48, 44, 67, 104, 97, 105, 110, 101, 48, 44, 50, 44, 65, 65, 44, 57, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 86, 65, 82, 83, 84, 82, 73, 78, 71, 44, 86, 65, 82, 83, 84, 82, 73, 78, 71, 44, 86, 65, 82, 83, 84, 82, 73, 78, 71, 44, 49, 44, 65, 65, 44, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 97, 110, 100, 44, 114, 97, 110, 100, 44, 78, 98, 114, 65, 108, 195, 169, 97, 116, 44, 49, 44, 65, 66, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 78, 111, 110, 101, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 48, 44, 207, 128, 44, 207, 128, 44, 49, 44, 65, 67, 44, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 44, 13, 10, 44, 44, 44, 103, 101, 116, 75, 101, 121, 44, 103, 101, 116, 75, 101, 121, 44, 99, 111, 100, 101, 116, 111, 117, 99, 104, 40, 44, 49, 44, 65, 68, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 78, 111, 110, 101, 44, 44, 44, 13, 10, 44, 44, 44, 39, 44, 39, 44, 39, 44, 49, 44, 65, 69, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 63, 44, 63, 44, 63, 44, 49, 44, 65, 70, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 97, 100, 44, 226, 129, 187, 44, 226, 129, 187, 44, 49, 44, 66, 48, 44, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 105, 110, 116, 40, 44, 105, 110, 116, 40, 44, 112, 97, 114, 116, 69, 110, 116, 40, 44, 49, 44, 66, 49, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 97, 98, 115, 40, 44, 97, 98, 115, 40, 44, 97, 98, 115, 40, 44, 49, 44, 66, 50, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 100, 101, 116, 40, 44, 100, 101, 116, 40, 44, 100, 195, 169, 116, 40, 44, 49, 44, 66, 51, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 105, 100, 101, 110, 116, 105, 116, 121, 40, 44, 105, 100, 101, 110, 116, 105, 116, 121, 40, 44, 105, 100, 101, 110, 116, 105, 116, 195, 169, 40, 44, 49, 44, 66, 52, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 100, 105, 109, 40, 44, 100, 105, 109, 40, 44, 100, 105, 109, 40, 44, 49, 44, 66, 53, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 117, 109, 40, 44, 115, 117, 109, 40, 44, 115, 111, 109, 109, 101, 40, 44, 49, 44, 66, 54, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 112, 114, 111, 100, 40, 44, 112, 114, 111, 100, 40, 44, 112, 114, 111, 100, 40, 44, 49, 44, 66, 55, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 110, 111, 116, 40, 44, 110, 111, 116, 40, 44, 110, 111, 110, 40, 44, 49, 44, 66, 56, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 105, 80, 97, 114, 116, 40, 44, 105, 80, 97, 114, 116, 40, 44, 101, 110, 116, 40, 44, 49, 44, 66, 57, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 102, 80, 97, 114, 116, 40, 44, 102, 80, 97, 114, 116, 40, 44, 112, 97, 114, 116, 68, 195, 169, 99, 40, 44, 49, 44, 66, 65, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 110, 112, 118, 40, 44, 110, 112, 118, 40, 44, 118, 97, 99, 116, 78, 101, 116, 40, 44, 50, 44, 66, 66, 44, 48, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 105, 114, 114, 40, 44, 105, 114, 114, 40, 44, 116, 97, 117, 120, 82, 105, 40, 44, 50, 44, 66, 66, 44, 49, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 98, 97, 108, 40, 44, 98, 97, 108, 40, 44, 112, 97, 83, 111, 108, 100, 101, 40, 44, 50, 44, 66, 66, 44, 50, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 97, 51, 80, 114, 110, 40, 44, 206, 163, 80, 114, 110, 40, 44, 112, 97, 83, 111, 109, 80, 114, 105, 110, 99, 40, 44, 50, 44, 66, 66, 44, 51, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 97, 51, 73, 110, 116, 40, 44, 206, 163, 73, 110, 116, 40, 44, 206, 163, 73, 110, 116, 40, 44, 50, 44, 66, 66, 44, 52, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 52, 78, 111, 109, 40, 44, 226, 150, 186, 78, 111, 109, 40, 44, 226, 150, 186, 78, 111, 109, 40, 44, 50, 44, 66, 66, 44, 53, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 52, 69, 102, 102, 40, 44, 226, 150, 186, 69, 102, 102, 40, 44, 226, 150, 186, 69, 102, 102, 40, 44, 50, 44, 66, 66, 44, 54, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 100, 98, 100, 40, 44, 100, 98, 100, 40, 44, 106, 101, 100, 40, 44, 50, 44, 66, 66, 44, 55, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 108, 99, 109, 40, 44, 108, 99, 109, 40, 44, 112, 112, 99, 109, 40, 44, 50, 44, 66, 66, 44, 56, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 103, 99, 100, 40, 44, 103, 99, 100, 40, 44, 112, 103, 99, 100, 40, 44, 50, 44, 66, 66, 44, 57, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 97, 110, 100, 73, 110, 116, 40, 44, 114, 97, 110, 100, 73, 110, 116, 40, 44, 101, 110, 116, 65, 108, 195, 169, 97, 116, 40, 44, 50, 44, 66, 66, 44, 48, 65, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 97, 110, 100, 66, 105, 110, 40, 44, 114, 97, 110, 100, 66, 105, 110, 40, 44, 66, 105, 110, 65, 108, 195, 169, 97, 116, 40, 44, 50, 44, 66, 66, 44, 48, 66, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 117, 98, 40, 44, 115, 117, 98, 40, 44, 83, 111, 117, 115, 45, 99, 104, 97, 105, 110, 101, 40, 44, 50, 44, 66, 66, 44, 48, 67, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 116, 100, 68, 101, 118, 40, 44, 115, 116, 100, 68, 101, 118, 40, 44, 69, 99, 97, 114, 116, 45, 116, 121, 112, 101, 40, 44, 50]);
            fileData0.push.apply(fileData0, [44, 66, 66, 44, 48, 68, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 118, 97, 114, 105, 97, 110, 99, 101, 40, 44, 118, 97, 114, 105, 97, 110, 99, 101, 40, 44, 118, 97, 114, 105, 97, 110, 99, 101, 40, 44, 50, 44, 66, 66, 44, 48, 69, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 105, 110, 83, 116, 114, 105, 110, 103, 40, 44, 105, 110, 83, 116, 114, 105, 110, 103, 40, 44, 99, 97, 114, 67, 104, 97, 105, 110, 101, 40, 44, 50, 44, 66, 66, 44, 48, 70, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 110, 111, 114, 109, 97, 108, 99, 100, 102, 40, 44, 110, 111, 114, 109, 97, 108, 99, 100, 102, 40, 44, 110, 111, 114, 109, 97, 108, 70, 82, 195, 169, 112, 40, 44, 50, 44, 66, 66, 44, 49, 48, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 105, 110, 118, 78, 111, 114, 109, 40, 44, 105, 110, 118, 78, 111, 114, 109, 40, 44, 70, 114, 97, 99, 78, 111, 114, 109, 97, 108, 101, 40, 44, 50, 44, 66, 66, 44, 49, 49, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 99, 100, 102, 40, 44, 116, 99, 100, 102, 40, 44, 115, 116, 117, 100, 101, 110, 116, 70, 82, 195, 169, 112, 40, 44, 50, 44, 66, 66, 44, 49, 50, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 55, 92, 117, 48, 48, 98, 50, 99, 100, 102, 40, 44, 207, 135, 194, 178, 99, 100, 102, 40, 44, 88, 194, 178, 70, 82, 195, 169, 112, 40, 9, 44, 50, 44, 66, 66, 44, 49, 51, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 50, 49, 99, 100, 102, 40, 44, 70, 99, 100, 102, 40, 44, 70, 70, 82, 195, 169, 112, 40, 44, 50, 44, 66, 66, 44, 49, 52, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 98, 105, 110, 111, 109, 112, 100, 102, 40, 44, 98, 105, 110, 111, 109, 112, 100, 102, 40, 44, 98, 105, 110, 111, 109, 102, 100, 112, 40, 44, 50, 44, 66, 66, 44, 49, 53, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 98, 105, 110, 111, 109, 99, 100, 102, 40, 44, 98, 105, 110, 111, 109, 99, 100, 102, 40, 44, 98, 105, 110, 111, 109, 70, 82, 195, 169, 112, 40, 44, 50, 44, 66, 66, 44, 49, 54, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 112, 111, 105, 115, 115, 111, 110, 112, 100, 102, 40, 44, 112, 111, 105, 115, 115, 111, 110, 112, 100, 102, 40, 44, 112, 111, 105, 115, 115, 111, 110, 70, 100, 112, 40, 44, 50, 44, 66, 66, 44, 49, 55, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 112, 111, 105, 115, 115, 111, 110, 99, 100, 102, 40, 44, 112, 111, 105, 115, 115, 111, 110, 99, 100, 102, 40, 44, 112, 111, 105, 115, 115, 111, 110, 70, 82, 195, 169, 112, 40, 44, 50, 44, 66, 66, 44, 49, 56, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 103, 101, 111, 109, 101, 116, 112, 100, 102, 40, 44, 103, 101, 111, 109, 101, 116, 112, 100, 102, 40, 44, 103, 195, 169, 111, 109, 116, 70, 100, 112, 40, 44, 50, 44, 66, 66, 44, 49, 57, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 103, 101, 111, 109, 101, 116, 99, 100, 102, 40, 44, 103, 101, 111, 109, 101, 116, 99, 100, 102, 40, 44, 103, 195, 169, 111, 109, 116, 70, 82, 195, 169, 112, 40, 44, 50, 44, 66, 66, 44, 49, 65, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 110, 111, 114, 109, 97, 108, 112, 100, 102, 40, 44, 110, 111, 114, 109, 97, 108, 112, 100, 102, 40, 44, 110, 111, 114, 109, 97, 108, 70, 100, 112, 40, 44, 50, 44, 66, 66, 44, 49, 66, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 112, 100, 102, 40, 44, 116, 112, 100, 102, 40, 44, 83, 116, 117, 100, 101, 110, 116, 70, 100, 112, 40, 44, 50, 44, 66, 66, 44, 49, 67, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 55, 92, 117, 48, 48, 98, 50, 112, 100, 102, 40, 44, 207, 135, 194, 178, 112, 100, 102, 40, 44, 206, 167, 194, 178, 70, 100, 112, 40, 44, 50, 44, 66, 66, 44, 49, 68, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 50, 49, 112, 100, 102, 40, 44, 70, 112, 100, 102, 40, 44, 70, 102, 100, 112, 40, 44, 50, 44, 66, 66, 44, 49, 69, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 97, 110, 100, 78, 111, 114, 109, 40, 44, 114, 97, 110, 100, 78, 111, 114, 109, 40, 44, 110, 111, 114, 109, 65, 108, 195, 169, 97, 116, 40, 44, 50, 44, 66, 66, 44, 49, 70, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 118, 109, 95, 80, 109, 116, 44, 116, 118, 109, 95, 80, 109, 116, 44, 118, 97, 116, 80, 109, 116, 44, 50, 44, 66, 66, 44, 50, 48, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 118, 109, 95, 73, 37, 44, 116, 118, 109, 95, 73, 37, 44, 118, 97, 116, 95, 73, 37, 44, 50, 44, 66, 66, 44, 50, 49, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 118, 109, 95, 80, 86, 44, 116, 118, 109, 95, 80, 86, 44, 118, 97, 116, 95, 86, 97, 99, 116, 44, 50, 44, 66, 66, 44, 50, 50, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 118, 109, 95, 92, 117, 48, 49, 53, 97, 44, 116, 118, 109, 95, 78, 44, 118, 97, 116, 95, 78, 44, 50, 44, 66, 66, 44, 50, 51, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 118, 109, 95, 70, 86, 44, 116, 118, 109, 95, 70, 86, 44, 118, 97, 116, 95, 118, 97, 99, 113, 44, 50, 44, 66, 66, 44, 50, 52, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 99, 111, 110, 106, 40, 44, 99, 111, 110, 106, 40, 44, 99, 111, 110, 106, 40, 44, 50, 44, 66, 66, 44, 50, 53, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 101, 97, 108, 40, 44, 114, 101, 97, 108, 40, 44, 114, 101, 101, 108, 40, 44, 50, 44, 66, 66, 44, 50, 54, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 105, 109, 97, 103, 40, 44, 105, 109, 97, 103, 40, 44, 105, 109, 97, 103, 40, 44, 50, 44, 66, 66, 44, 50, 55, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 97, 110, 103, 108, 101, 40, 44, 97, 110, 103, 108, 101, 40, 44, 97, 114, 103, 117, 109, 101, 110, 116, 40, 44, 50, 44, 66, 66, 44, 50, 56, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 99, 117, 109, 83, 117, 109, 40, 44, 99, 117, 109, 83, 117, 109, 40, 44, 115, 111, 109, 67, 117, 109, 40, 44, 50, 44, 66, 66, 44, 50, 57, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 101, 120, 112, 114, 40, 44, 101, 120, 112, 114, 40, 44, 101, 120, 112, 114, 40, 44, 50, 44, 66, 66, 44, 50, 65, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 108, 101, 110, 103, 116, 104, 40, 44, 108, 101, 110, 103, 116, 104, 40, 44, 108, 111, 110, 103, 117, 101, 117, 114, 40, 44, 50, 44, 66, 66, 44, 50, 66, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 50, 52, 76, 105, 115, 116, 40, 44, 206, 148, 76, 105, 115, 116, 40, 44, 206, 148, 108, 105, 115, 116, 101, 40, 44, 50, 44, 66, 66, 44, 50, 67, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 101, 102, 40, 44, 114, 101, 102, 40, 44, 71, 97, 117, 115, 115, 40, 44, 50, 44, 66, 66, 44, 50, 68, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 114, 101, 102, 40, 44, 114, 114, 101, 102, 40, 44, 71, 97, 117, 115, 115, 45, 74, 111, 114, 100, 97, 110, 40, 44, 50, 44, 66, 66, 44, 50, 69, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 52, 82, 101, 99, 116, 44, 226, 150, 186, 82, 101, 99, 116, 44, 226, 150, 186, 82, 101, 99, 116, 44, 50, 44, 66, 66, 44, 50, 70, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 52, 80, 111, 108, 97, 114, 44, 226, 150, 186, 80, 111, 108, 97, 114, 44, 226, 150, 186, 80, 111, 108, 97, 105, 114, 101, 44, 50, 44, 66, 66, 44, 51, 48, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 51, 102, 44, 101, 44, 101, 44, 50, 44, 66, 66, 44, 51, 49, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 67, 111, 110, 115, 116, 97, 110, 116, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 105, 110, 82, 101, 103, 32, 44, 83, 105, 110, 82, 101, 103, 32, 44, 82, 101, 103, 83, 105, 110, 32, 44, 50, 44, 66, 66, 44, 51, 50, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 111, 103, 105, 115, 116, 105, 99, 32, 44, 76, 111, 103, 105, 115, 116, 105, 99, 32, 44, 76, 111, 103, 105, 115, 116, 105, 113, 117, 101, 32, 44, 50, 44, 66, 66, 44, 51, 51, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 105, 110, 82, 101, 103, 84, 84, 101, 115, 116, 32, 44, 76, 105, 110, 82, 101, 103, 84, 84, 101, 115, 116, 32, 44, 82, 101, 103, 76, 105, 110, 84, 84, 101, 115, 116, 32, 44, 50, 44, 66, 66, 44, 51, 52, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 104, 97, 100, 101, 78, 111, 114, 109, 40, 44, 83, 104, 97, 100, 101, 78, 111, 114, 109, 40, 44, 79, 109, 98, 114, 101, 78, 111, 114, 109, 40, 44, 50, 44, 66, 66, 44, 51, 53, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 104, 97, 100, 101, 95, 116, 40, 44, 83, 104, 97, 100, 101, 95, 116, 40, 44, 79, 109, 98, 114, 101, 95, 116, 40, 44, 50, 44, 66, 66, 44, 51, 54, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 104, 97, 100, 101, 92, 117, 48, 51, 99, 55, 92, 117, 48, 48, 98, 50, 40, 44, 83, 104, 97, 100, 101, 207, 135, 194, 178, 40, 44, 79, 109, 98, 114, 101, 207, 135, 194, 178, 40, 44, 50, 44, 66, 66, 44, 51, 55, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 104, 97, 100, 101, 92, 117, 102, 48, 50, 49, 40, 44, 83, 104, 97, 100, 101, 70, 40, 44, 79, 109, 98, 114, 101, 70, 40, 44, 50, 44, 66, 66, 44, 51, 56, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 77, 97, 116, 114, 92, 117, 102, 48, 49, 52, 108, 105, 115, 116, 40, 44, 77, 97, 116, 114, 226, 150, 186, 108, 105, 115, 116, 40, 44, 77, 97, 116, 114, 226, 150, 186, 108, 105, 115, 116, 40, 44, 50, 44, 66, 66, 44, 51, 57, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 105, 115, 116, 92, 117, 102, 48, 49, 52, 109, 97, 116, 114, 40, 44, 76, 105, 115, 116, 226, 150, 186, 109, 97, 116, 114, 40, 44, 76, 105, 115, 116, 226, 150, 186, 109, 97, 116, 114, 40, 44, 50, 44, 66, 66, 44, 51, 65, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 45, 84, 101, 115, 116, 40, 44, 90, 45, 84, 101, 115, 116, 40, 44, 90, 45, 84, 101, 115, 116, 40, 44, 50, 44, 66, 66, 44, 51, 66, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 45, 84, 101, 115, 116, 32, 44, 84, 45, 84, 101, 115, 116, 32, 44, 84, 45, 84, 101, 115, 116, 32, 44, 50, 44, 66, 66, 44, 51, 67, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 50, 45, 83, 97, 109, 112, 90, 84, 101, 115, 116, 40, 44, 50, 45, 83, 97, 109, 112, 90, 84, 101, 115, 116, 40, 44, 50, 45, 67, 111, 109, 112, 90, 84, 101, 115, 116, 40, 44, 50, 44, 66, 66, 44, 51, 68, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 49, 45, 80, 114, 111, 112, 90, 84, 101, 115, 116, 40, 44, 49, 45, 80, 114, 111, 112, 90, 84, 101, 115, 116, 40, 44, 49, 45, 80, 114, 111, 112, 90, 84, 101, 115, 116, 40, 44, 50, 44, 66, 66, 44, 51, 69, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 50, 45, 80, 114, 111, 112, 90, 84, 101, 115, 116, 40, 44, 50, 45, 80, 114, 111, 112, 90, 84, 101, 115, 116, 40, 44, 50, 45, 80, 114, 111, 112, 90, 84, 101, 115, 116, 40, 44, 50, 44, 66, 66, 44, 51, 70, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 55, 92, 117, 48, 48, 98, 50, 45, 84, 101, 115, 116, 40, 44, 207, 135, 194, 178, 45, 84, 101, 115, 116, 40, 44, 207, 135, 194, 178, 45, 84, 101, 115, 116, 40, 44, 50, 44, 66, 66, 44, 52, 48, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 73, 110, 116, 101, 114, 118, 97, 108, 32, 44, 90, 73, 110, 116, 101, 114, 118, 97, 108, 32, 44, 90, 105, 110, 116, 67, 111, 110, 102, 32, 44, 50, 44, 66, 66, 44, 52, 49, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 50, 45, 83, 97, 109, 112, 90, 73, 110, 116, 40, 44, 50, 45, 83, 97, 109, 112, 90, 73, 110, 116, 40, 44, 50, 45, 67, 111, 109, 112, 90, 73, 110, 116, 67, 40, 44, 50, 44, 66, 66, 44, 52, 50, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 49, 45, 80, 114, 111, 112, 90, 73, 110, 116, 40, 44, 49, 45, 80, 114, 111, 112, 90, 73, 110, 116, 40, 44, 49, 45, 80, 114, 111, 112, 90, 73, 110, 116, 40, 44, 50, 44, 66, 66, 44, 52, 51, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 50, 45, 80, 114, 111, 112, 90, 73, 110, 116, 40, 44, 50, 45, 80, 114, 111, 112, 90, 73, 110, 116, 40, 44, 50, 45, 80, 114, 111, 112, 90, 73, 110, 116, 40, 44, 50, 44, 66, 66, 44, 52, 52, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 114, 97, 112, 104, 83, 116, 121, 108, 101, 40, 44, 71, 114, 97, 112, 104, 83, 116, 121, 108, 101, 40, 44, 71, 114, 97, 112, 104, 83, 116, 121, 108, 101, 40, 44, 50, 44, 66, 66, 44, 52, 53, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 50, 45, 83, 97, 109, 112, 84, 84, 101, 115, 116, 32, 44, 50, 45, 83, 97, 109, 112, 84, 84, 101, 115, 116, 32, 44, 50, 45, 67, 111, 109, 112, 84, 84, 101, 115, 116, 40, 32, 44, 50, 44, 66, 66, 44, 52, 54, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 50, 45, 83, 97, 109, 112, 92, 117, 102, 48, 50, 49, 84, 101, 115, 116, 32, 44, 50, 45, 83, 97, 109, 112, 70, 84, 101, 115, 116, 32, 44, 50, 45, 67, 111, 109, 112, 70, 84, 101, 115, 116, 40, 32, 44, 50, 44, 66, 66, 44, 52, 55, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 73, 110, 116, 101, 114, 118, 97, 108, 32, 44, 84, 73, 110, 116, 101, 114, 118, 97, 108, 32, 44, 84, 105, 110, 116, 67, 111, 110, 102, 32, 44, 50, 44, 66, 66, 44, 52, 56, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 50, 45, 83, 97, 109, 112, 84, 73, 110, 116, 32, 44, 50, 45, 83, 97, 109, 112, 84, 73, 110, 116, 32, 44, 50, 45, 67, 111, 109, 112, 84, 73, 110, 116, 67, 40, 32, 44, 50, 44, 66, 66, 44, 52, 57, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 101, 116, 85, 112, 69, 100, 105, 116, 111, 114, 32, 44, 83, 101, 116, 85, 112, 69, 100, 105, 116, 111, 114, 32, 44, 76, 105, 115, 116, 101, 115, 68, 195, 169, 102, 97, 117, 116, 32, 44, 50, 44, 66, 66, 44, 52, 65, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 109, 116, 95, 69, 110, 100, 44, 80, 109, 116, 95, 69, 110, 100, 44, 80, 109, 116, 95, 70, 105, 110, 44, 50, 44, 66, 66, 44, 52, 66, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 109, 116, 95, 66, 103, 110, 44, 80, 109, 116, 95, 66, 103, 110, 44, 80, 109, 116, 95, 68, 195, 169, 98, 44, 50, 44, 66, 66, 44, 52, 67, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 101, 97, 108, 44, 82, 101, 97, 108, 44, 82, 195, 169, 101, 108, 44, 50, 44, 66, 66, 44, 52, 68, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 92, 117, 102, 48, 51, 102, 94, 92, 117, 48, 51, 98, 56, 92, 117, 102, 48, 50, 102, 44, 114, 101, 94, 206, 184, 105, 44, 114, 101, 94, 206, 184, 105, 44, 50, 44, 66, 66, 44, 52, 69, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 97, 43, 98, 92, 117, 102, 48, 50, 102, 44, 97, 43, 98, 105, 44, 97, 43, 98, 105, 44, 50, 44, 66, 66, 44, 52, 70, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 69, 120, 112, 114, 79, 110, 44, 69, 120, 112, 114, 79, 110, 44, 69, 120, 112, 65, 102, 102, 44, 50, 44, 66, 66, 44, 53, 48, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 69, 120, 112, 114, 79, 102, 102, 44, 69, 120, 112, 114, 79, 102, 102, 44, 69, 120, 112, 78, 65, 102, 102, 44, 50, 44, 66, 66, 44, 53, 49, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 108, 114, 65, 108, 108, 76, 105, 115, 116, 115, 44, 67, 108, 114, 65, 108, 108, 76, 105, 115, 116, 115, 44, 69, 102, 102, 84, 111, 117, 116, 76, 105, 115, 116, 101, 115, 44, 50, 44, 66, 66, 44, 53, 50, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 101, 116, 67, 97, 108, 99, 40, 44, 71, 101, 116, 67, 97, 108, 99, 40, 44, 71, 101, 116, 67, 97, 108, 99, 40, 44, 50, 44, 66, 66, 44, 53, 51, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 101, 108, 86, 97, 114, 32, 44, 68, 101, 108, 86, 97, 114, 32, 44, 69, 102, 102, 86, 97, 114, 32, 44, 50, 44, 66, 66, 44, 53, 52, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 69, 113, 117, 92, 117, 102, 48, 49, 52, 83, 116, 114, 105, 110, 103, 40, 44, 69, 113, 117, 226, 150, 186, 83, 116, 114, 105, 110, 103, 40, 44, 69, 113, 117, 226, 150, 186, 67, 104, 97, 105, 110, 101, 40, 44, 50, 44, 66, 66, 44, 53, 53, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 114, 105, 110, 103, 92, 117, 102, 48, 49, 52, 69, 113, 117, 40, 44, 83, 116, 114, 105, 110, 103, 226, 150, 186, 69, 113, 117, 40, 44, 67, 104, 97, 105, 110, 101, 226, 150, 186, 69, 113, 117, 40, 44, 50, 44, 66, 66, 44, 53, 54, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 108, 101, 97, 114, 32, 69, 110, 116, 114, 105, 101, 115, 44, 67, 108, 101, 97, 114, 32, 69, 110, 116, 114, 105, 101, 115, 44, 69, 102, 102, 97, 99, 101, 32, 101, 110, 116, 114, 195, 169, 101, 115, 44, 50, 44, 66, 66, 44, 53, 55, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 101, 108, 101, 99, 116, 40, 44, 83, 101, 108, 101, 99, 116, 40, 44, 83, 195, 169, 108, 101, 99, 116, 40, 44, 50, 44, 66, 66, 44, 53, 56, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 65, 78, 79, 86, 65, 40, 44, 65, 78, 79, 86, 65, 40, 44, 65, 78, 85, 86, 65, 40, 44, 50, 44, 66, 66, 44, 53, 57, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 77, 111, 100, 66, 111, 120, 112, 108, 111, 116, 44, 77, 111, 100, 66, 111, 120, 112, 108, 111, 116, 44, 71, 114, 97, 112, 104, 66, 111, 105, 116, 77, 111, 117, 115, 116, 44, 50, 44, 66, 66, 44, 53, 65, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 78, 111, 114, 109, 80, 114, 111, 98, 80, 108, 111, 116, 44, 78, 111, 114, 109, 80, 114, 111, 98, 80, 108, 111, 116, 44, 71, 114, 97, 112, 104, 80, 114, 111, 98, 78, 111, 114, 109, 44, 50, 44, 66, 66, 44, 53, 66, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 92, 117, 50, 48, 49, 52, 84, 44, 71, 45, 84, 44, 71, 45, 84, 44, 50, 44, 66, 66, 44, 54, 52, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 111, 111, 109, 70, 105, 116, 44, 90, 111, 111, 109, 70, 105, 116, 44, 90, 109, 105, 110, 77, 97, 120, 44, 50, 44, 66, 66, 44, 54, 53, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 105, 97, 103, 110, 111, 115, 116, 105, 99, 79, 110, 44, 68, 105, 97, 103, 110, 111, 115, 116, 105, 99, 79, 110, 44, 67, 111, 114, 114, 101, 108, 65, 102, 102, 44, 50, 44, 66, 66, 44, 54, 54, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 105, 97, 103, 110, 111, 115, 116, 105, 99, 79, 102, 102, 44, 68, 105, 97, 103, 110, 111, 115, 116, 105, 99, 79, 102, 102, 44, 67, 111, 114, 114, 101, 108, 78, 65, 102, 102, 44, 50, 44, 66, 66, 44, 54, 55, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 65, 114, 99, 104, 105, 118, 101, 32, 44, 65, 114, 99, 104, 105, 118, 101, 32, 44, 65, 114, 99, 104, 105, 118, 101, 32, 44, 50, 44, 66, 66, 44, 54, 56, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 85, 110, 65, 114, 99, 104, 105, 118, 101, 32, 44, 85, 110, 65, 114, 99, 104, 105, 118, 101, 32, 44, 68, 195, 169, 115, 65, 114, 99, 104, 105, 118, 101, 32, 44, 50, 44, 66, 66, 44, 54, 57, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 65, 115, 109, 40, 44, 65, 115, 109, 40, 44, 65, 115, 109, 40, 44, 50, 44, 66, 66, 44, 54, 65, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 65, 115, 109, 67, 111, 109, 112, 40, 44, 65, 115, 109, 67, 111, 109, 112, 40, 44, 65, 115, 109, 67, 111, 109, 112, 40, 44, 50, 44, 66, 66, 44, 54, 66, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 65, 115, 109, 80, 114, 103, 109, 44, 65, 115, 109, 80, 114, 103, 109, 44, 65, 115, 109, 80, 114, 103, 109, 44, 50, 44, 66, 66, 44, 54, 67, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 99, 111, 109, 112, 105, 108, 101, 100, 32, 97, 115, 109, 44, 99, 111, 109, 112, 105, 108, 101, 100, 32, 97, 115, 109, 44, 99, 111, 109, 112, 105, 108, 101, 100, 32, 97, 115, 109, 44, 50, 44, 66, 66, 44, 54, 68, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 49, 44, 195, 129, 44, 195, 129, 44, 50, 44, 66, 66, 44, 54, 69, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 48, 44, 195, 128, 44, 195, 128, 44, 50, 44, 66, 66, 44, 54, 70, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 50, 44, 195, 130, 44, 195, 130, 44, 50, 44, 66, 66, 44, 55, 48, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 52, 44, 195, 132, 44, 195, 132, 44, 50, 44, 66, 66, 44, 55, 49, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 49, 44, 195, 161, 44, 195, 161, 44, 50, 44, 66, 66, 44, 55, 50, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 48, 44, 195, 160, 44, 195, 160, 44, 50, 44, 66, 66, 44, 55, 51, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 50, 44, 195, 162, 44, 195, 162, 44, 50, 44, 66, 66, 44, 55, 52, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 52, 44, 195, 164, 44, 195, 164, 44, 50, 44, 66, 66, 44, 55, 53, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 57, 44, 195, 137, 44, 195, 137, 44, 50, 44, 66, 66, 44, 55, 54, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 56, 44, 195, 136, 44, 195, 136, 44, 50, 44, 66, 66, 44, 55, 55, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 97, 44, 195, 138, 44, 195, 138, 44, 50, 44, 66, 66, 44, 55, 56, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 98, 44, 195, 139, 44, 195, 139, 44, 50, 44, 66, 66, 44, 55, 57, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 57, 44, 195, 169, 44, 195, 169, 44, 50, 44, 66, 66, 44, 55, 65, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 56, 44, 195, 168, 44, 195, 168, 44, 50, 44, 66, 66, 44, 55, 66, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 97, 44, 195, 170, 44, 195, 170, 44, 50, 44, 66, 66, 44, 55, 67, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 98, 44, 195, 171, 44, 195, 171, 44, 50, 44, 66, 66, 44, 55, 68, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 99, 44, 195, 140, 44, 195, 140, 44, 50, 44, 66, 66, 44, 55, 70, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 101, 44, 195, 142, 44, 195, 142, 44, 50, 44, 66, 66, 44, 56, 48, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 102, 44, 195, 143, 44, 195, 143, 44, 50, 44, 66, 66, 44, 56, 49, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 100, 44, 195, 173, 44, 195, 173, 44, 50, 44, 66, 66, 44, 56, 50, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 99, 44, 195, 172, 44, 195, 172, 44, 50, 44, 66, 66, 44, 56, 51, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 101, 44, 195, 174, 44, 195, 174, 44, 50, 44, 66, 66, 44, 56, 52, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 102, 44, 195, 175, 44, 195, 175, 44, 50, 44, 66, 66, 44, 56, 53, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 100, 51, 44, 195, 147, 44, 195, 147, 44, 50, 44, 66, 66, 44, 56, 54, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 100, 50, 44, 195, 146, 44, 195, 146, 44, 50, 44, 66, 66, 44, 56, 55, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 100, 52, 44, 195, 148, 44, 195, 148, 44, 50, 44, 66, 66, 44, 56, 56, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 100, 54, 44, 195, 150, 44, 195, 150, 44, 50, 44, 66, 66, 44, 56, 57, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 102, 51, 44, 195, 179, 44, 195, 179, 44, 50, 44, 66, 66, 44, 56, 65, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 102, 50, 44, 195, 178, 44, 195, 178, 44, 50, 44, 66, 66, 44, 56, 66, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 102, 52, 44, 195, 180, 44, 195, 180, 44, 50, 44, 66, 66, 44, 56, 67, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 102, 54, 44, 195, 182, 44, 195, 182, 44, 50, 44, 66, 66, 44, 56, 68, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 100, 97, 44, 195, 154, 44, 195, 154, 44, 50, 44, 66, 66, 44, 56, 69, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 100, 57, 44, 195, 153, 44, 195, 153, 44, 50, 44, 66, 66, 44, 56, 70, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 100, 98, 44, 195, 155, 44, 195, 155, 44, 50, 44, 66, 66, 44, 57, 48, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 100, 99, 44, 195, 156, 44, 195, 156, 44, 50, 44, 66, 66, 44, 57, 49, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 102, 97, 44, 195, 186, 44, 195, 186, 44, 50, 44, 66, 66, 44, 57, 50, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 102, 57, 44, 195, 185, 44, 195, 185, 44, 50, 44, 66, 66, 44, 57, 51, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 102, 98, 44, 195, 187, 44, 195, 187, 44, 50, 44, 66, 66, 44, 57, 52, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 102, 99, 44, 195, 188, 44, 195, 188, 44, 50, 44, 66, 66, 44, 57, 53, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 55, 44, 195, 135, 44, 195, 135, 44, 50, 44, 66, 66, 44, 57, 54, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 101, 55, 44, 195, 167, 44, 195, 167, 44, 50, 44, 66, 66, 44, 57, 55, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 100, 49, 44, 195, 145, 44, 195, 145, 44, 50, 44, 66, 66, 44, 57, 56, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 102, 49, 44, 195, 177, 44, 195, 177, 44, 50, 44, 66, 66, 44, 57, 57, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 98, 52, 44, 194, 180, 44, 194, 180, 44, 50, 44, 66, 66, 44, 57, 65, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 54, 48, 44, 96, 44, 96, 44, 50, 44, 66, 66, 44, 57, 66, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 97, 56, 44, 194, 168, 44, 194, 168, 44, 50, 44, 66, 66, 44, 57, 67, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 98, 102, 44, 194, 191, 44, 194, 191, 44, 50, 44, 66, 66, 44, 57, 68, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 97, 49, 44, 194, 161, 44, 194, 161, 44, 50, 44, 66, 66, 44, 57, 69, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 98, 49, 44, 206, 177, 44, 206, 177, 44, 50, 44, 66, 66, 44, 57, 70, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 98, 50, 44, 206, 178, 44, 206, 178, 44, 50, 44, 66, 66, 44, 65, 48, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 98, 51, 44, 206, 179, 44, 206, 179, 44, 50, 44, 66, 66, 44, 65, 49, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 50, 52, 44, 206, 148, 44, 206, 148, 44, 50, 44, 66, 66, 44, 65, 50, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 98, 52, 44, 206, 180, 44, 206, 180, 44, 50, 44, 66, 66, 44, 65, 51, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 98, 53, 44, 206, 181, 44, 206, 181, 44, 50, 44, 66, 66, 44, 65, 52, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 98, 98, 44, 206, 187, 44, 206, 187, 44, 50, 44, 66, 66, 44, 65, 53, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 98, 53, 44, 206, 188, 44, 206, 188, 44, 50, 44, 66, 66, 44, 65, 54, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 49, 44, 124, 207, 128, 44, 124, 207, 128, 44, 50, 44, 66, 66, 44, 65, 55, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 49, 44, 207, 129, 44, 207, 129, 44, 50, 44, 66, 66, 44, 65, 56, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 97, 51, 44, 206, 163, 44, 206, 163, 44, 50, 44, 66, 66, 44, 65, 57, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 54, 44, 206, 166, 44, 206, 166, 44, 50, 44, 66, 66, 44, 65, 66, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 97, 57, 44, 206, 169, 44, 206, 169, 44, 50, 44, 66, 66, 44, 65, 67, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 225, 185, 151, 44, 225, 185, 151, 44, 225, 185, 151, 44, 50, 44, 66, 66, 44, 65, 68, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 55, 44, 207, 135, 44, 207, 135, 44, 50, 44, 66, 66, 44, 65, 69, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 124, 70, 44, 240, 157, 144, 133, 44, 240, 157, 144, 133, 44, 50, 44, 66, 66, 44, 65, 70, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 97, 44, 97, 44, 97, 44, 50, 44, 66, 66, 44, 66, 48, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 98, 44, 98, 44, 98, 44, 50, 44, 66, 66, 44, 66, 49, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 99, 44, 99, 44, 99, 44, 50, 44, 66, 66, 44, 66, 50, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 100, 44, 100, 44, 100, 44, 50, 44, 66, 66, 44, 66, 51, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 101, 44, 101, 44, 101, 44, 50, 44, 66, 66, 44, 66, 52, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 102, 44, 102, 44, 102, 44, 50, 44, 66, 66, 44, 66, 53, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 103, 44, 103, 44, 103, 44, 50, 44, 66, 66, 44, 66, 54, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 104, 44, 104, 44, 104, 44, 50, 44, 66, 66, 44, 66, 55, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 105, 44, 105, 44, 105, 44, 50, 44, 66, 66, 44, 66, 56, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 106, 44, 106, 44, 106, 44, 50, 44, 66, 66, 44, 66, 57, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 107, 44, 107, 44, 107, 44, 50, 44, 66, 66, 44, 66, 65, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 108, 44, 108, 44, 108, 44, 50, 44, 66, 66, 44, 66, 67, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 109, 44, 109, 44, 109, 44, 50, 44, 66, 66, 44, 66, 68, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 110, 44, 110, 44, 110, 44, 50, 44, 66, 66, 44, 66, 69, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 111, 44, 111, 44, 111, 44, 50, 44, 66, 66, 44, 66, 70, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 112, 44, 112, 44, 112, 44, 50, 44, 66, 66, 44, 67, 48, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 113, 44, 113, 44, 113, 44, 50, 44, 66, 66, 44, 67, 49, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 44, 114, 44, 114, 44, 50, 44, 66, 66, 44, 67, 50, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 44, 115, 44, 115, 44, 50, 44, 66, 66, 44, 67, 51, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 44, 116, 44, 116, 44, 50, 44, 66, 66, 44, 67, 52, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 117, 44, 117, 44, 117, 44, 50, 44, 66, 66, 44, 67, 53, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 118, 44, 118, 44, 118, 44, 50, 44, 66, 66, 44, 67, 54, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 119, 44, 119, 44, 119, 44, 50, 44, 66, 66, 44, 67, 55, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 120, 44, 120, 44, 120, 44, 50, 44, 66, 66, 44, 67, 56, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 121, 44, 121, 44, 121, 44, 50, 44, 66, 66, 44, 67, 57, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 122, 44, 122, 44, 122, 44, 50, 44, 66, 66, 44, 67, 65, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 51, 44, 207, 131, 44, 207, 131, 44, 50, 44, 66, 66, 44, 67, 66, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 52, 44, 207, 132, 44, 207, 132, 44, 50, 44, 66, 66, 44, 67, 67, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 99, 100, 44, 195, 141, 44, 195, 141, 44, 50, 44, 66, 66, 44, 67, 68, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 97, 114, 98, 97, 103, 101, 67, 111, 108, 108, 101, 99, 116, 44, 71, 97, 114, 98, 97, 103, 101, 67, 111, 108, 108, 101, 99, 116, 44, 82, 195, 169, 111, 114, 103, 97, 110, 105, 115, 101, 114, 77, 195, 169, 109, 44, 50, 44, 66, 66, 44, 67, 69, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 126, 44, 126, 44, 126, 44, 50, 44, 66, 66, 44, 67, 70, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 67, 70, 45, 68, 65, 58, 32, 56, 51, 43, 32, 49, 46, 49, 53, 32, 111, 114, 32, 108, 97, 116, 101, 114, 44, 13, 10, 44, 44, 44, 64, 44, 64, 44, 64, 44, 50, 44, 66, 66, 44, 68, 49, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 35, 44, 35, 44, 35, 44, 50, 44, 66, 66, 44, 68, 50, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 36, 44, 36, 44, 36, 44, 50, 44, 66, 66, 44, 68, 51, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 38, 44, 38, 44, 38, 44, 50, 44, 66, 66, 44, 68, 52, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 49, 66, 44, 226, 128, 155, 44, 226, 128, 155, 44, 50, 44, 66, 66, 44, 68, 53, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 59, 44, 59, 44, 59, 44, 50, 44, 66, 66, 44, 68, 54, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 44, 92, 44, 92, 44, 50, 44, 66, 66, 44, 68, 55, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 124, 44, 124, 44, 124, 44, 50, 44, 66, 66, 44, 68, 56, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 95, 44, 95, 44, 95, 44, 50, 44, 66, 66, 44, 68, 57, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 39, 44, 39, 44, 39, 44, 50, 44, 66, 66, 44, 68, 48, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 37, 44, 37, 44, 37, 44, 50, 44, 66, 66, 44, 68, 65, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 50, 54, 44, 226, 128, 166, 44, 226, 128, 166, 44, 50, 44, 66, 66, 44, 68, 66, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 68, 66, 45, 70, 53, 58, 32, 56, 51, 43, 32, 49, 46, 49, 54, 32, 111, 114, 32, 108, 97, 116, 101, 114, 44, 13, 10, 44, 44, 44, 92, 117, 50, 50, 50, 48, 44, 226, 136, 160, 44, 226, 136, 160, 44, 50, 44, 66, 66, 44, 68, 67, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 100, 102, 44, 195, 159, 44, 195, 159, 44, 50, 44, 66, 66, 44, 68, 68, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 54, 44, 203, 163, 44, 203, 163, 44, 50, 44, 66, 66, 44, 68, 69, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 51, 56, 44, 225, 180, 155, 44, 225, 180, 155, 44, 50, 44, 66, 66, 44, 68, 70, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 56, 48, 44, 226, 130, 128, 44, 226, 130, 128, 44, 50, 44, 66, 66, 44, 69, 48, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 56, 49, 44, 226, 130, 129, 44, 226, 130, 129, 44, 50, 44, 66, 66, 44, 69, 49, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 56, 50, 44, 226, 130, 130, 44, 226, 130, 130, 44, 50, 44, 66, 66, 44, 69, 50, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 56, 51, 44, 226, 130, 131, 44, 226, 130, 131, 44, 50, 44, 66, 66, 44, 69, 51, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13]);
            fileData0.push.apply(fileData0, [10, 44, 44, 44, 92, 117, 50, 48, 56, 52, 44, 226, 130, 132, 44, 226, 130, 132, 44, 50, 44, 66, 66, 44, 69, 52, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 56, 53, 44, 226, 130, 133, 44, 226, 130, 133, 44, 50, 44, 66, 66, 44, 69, 53, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 56, 54, 44, 226, 130, 134, 44, 226, 130, 134, 44, 50, 44, 66, 66, 44, 69, 54, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 56, 55, 44, 226, 130, 135, 44, 226, 130, 135, 44, 50, 44, 66, 66, 44, 69, 55, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 56, 56, 44, 226, 130, 136, 44, 226, 130, 136, 44, 50, 44, 66, 66, 44, 69, 56, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 48, 56, 57, 44, 226, 130, 137, 44, 226, 130, 137, 44, 50, 44, 66, 66, 44, 69, 57, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 100, 44, 226, 130, 129, 226, 130, 128, 44, 226, 130, 129, 226, 130, 128, 44, 50, 44, 66, 66, 44, 69, 65, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 98, 44, 226, 151, 132, 44, 226, 151, 132, 44, 50, 44, 66, 66, 44, 69, 66, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 52, 44, 226, 150, 186, 44, 226, 150, 186, 44, 50, 44, 66, 66, 44, 69, 67, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 49, 57, 49, 44, 226, 134, 145, 44, 226, 134, 145, 44, 50, 44, 66, 66, 44, 69, 68, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 49, 57, 51, 44, 226, 134, 147, 44, 226, 134, 147, 44, 50, 44, 66, 66, 44, 69, 69, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 100, 55, 44, 195, 151, 44, 195, 151, 44, 50, 44, 66, 66, 44, 70, 48, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 50, 50, 98, 44, 226, 136, 171, 44, 226, 136, 171, 44, 50, 44, 66, 66, 44, 70, 49, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 53, 44, 240, 159, 161, 133, 44, 240, 159, 161, 133, 44, 50, 44, 66, 66, 44, 70, 50, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 54, 44, 240, 159, 161, 135, 44, 240, 159, 161, 135, 44, 50, 44, 66, 66, 44, 70, 51, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 50, 49, 97, 44, 226, 136, 154, 44, 226, 136, 154, 44, 50, 44, 66, 66, 44, 70, 52, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 49, 53, 99, 44, 105, 110, 118, 101, 114, 116, 101, 100, 32, 61, 44, 105, 110, 118, 101, 114, 116, 101, 100, 32, 61, 44, 50, 44, 66, 66, 44, 70, 53, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 50, 49, 97, 40, 44, 226, 136, 154, 40, 44, 226, 136, 154, 40, 44, 49, 44, 66, 67, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 100, 92, 117, 50, 50, 49, 97, 40, 44, 194, 179, 226, 136, 154, 40, 44, 194, 179, 226, 136, 154, 40, 44, 49, 44, 66, 68, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 108, 110, 40, 44, 108, 110, 40, 44, 108, 110, 40, 44, 49, 44, 66, 69, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 51, 102, 94, 40, 44, 101, 94, 40, 44, 101, 94, 40, 44, 49, 44, 66, 70, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 108, 111, 103, 40, 44, 108, 111, 103, 40, 44, 108, 111, 103, 40, 44, 49, 44, 67, 48, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 100, 94, 40, 44, 226, 130, 129, 226, 130, 128, 94, 40, 44, 226, 130, 129, 226, 130, 128, 94, 40, 44, 49, 44, 67, 49, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 105, 110, 40, 44, 115, 105, 110, 40, 44, 115, 105, 110, 40, 44, 49, 44, 67, 50, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 105, 110, 92, 117, 102, 48, 48, 53, 40, 44, 115, 105, 110, 226, 129, 187, 194, 185, 40, 44, 65, 114, 99, 115, 105, 110, 40, 44, 49, 44, 67, 51, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 99, 111, 115, 40, 44, 99, 111, 115, 40, 44, 99, 111, 115, 40, 44, 49, 44, 67, 52, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 99, 111, 115, 92, 117, 102, 48, 48, 53, 40, 44, 99, 111, 115, 226, 129, 187, 194, 185, 40, 44, 65, 114, 99, 99, 111, 115, 40, 44, 49, 44, 67, 53, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 97, 110, 40, 44, 116, 97, 110, 40, 44, 116, 97, 110, 40, 44, 49, 44, 67, 54, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 97, 110, 92, 117, 102, 48, 48, 53, 40, 44, 116, 97, 110, 226, 129, 187, 194, 185, 40, 44, 65, 114, 99, 116, 97, 110, 40, 44, 49, 44, 67, 55, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 105, 110, 104, 40, 44, 115, 105, 110, 104, 40, 44, 115, 104, 40, 44, 49, 44, 67, 56, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 105, 110, 104, 92, 117, 102, 48, 48, 53, 40, 44, 115, 105, 110, 104, 226, 129, 187, 194, 185, 40, 44, 65, 114, 103, 115, 104, 40, 44, 49, 44, 67, 57, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 99, 111, 115, 104, 40, 44, 99, 111, 115, 104, 40, 44, 99, 104, 40, 44, 49, 44, 67, 65, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 99, 111, 115, 104, 92, 117, 102, 48, 48, 53, 40, 44, 115, 111, 99, 104, 226, 129, 187, 194, 185, 40, 44, 65, 114, 103, 99, 104, 40, 44, 49, 44, 67, 66, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 97, 110, 104, 40, 44, 116, 97, 110, 104, 40, 44, 116, 104, 40, 44, 49, 44, 67, 67, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 97, 110, 104, 92, 117, 102, 48, 48, 53, 40, 44, 116, 97, 110, 104, 226, 129, 187, 194, 185, 40, 44, 65, 114, 103, 116, 104, 40, 44, 49, 44, 67, 68, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 102, 32, 44, 73, 102, 32, 44, 73, 102, 32, 44, 49, 44, 67, 69, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 104, 101, 110, 44, 84, 104, 101, 110, 44, 84, 104, 101, 110, 44, 49, 44, 67, 70, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 69, 108, 115, 101, 44, 69, 108, 115, 101, 44, 69, 108, 115, 101, 44, 49, 44, 68, 48, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 87, 104, 105, 108, 101, 32, 44, 87, 104, 105, 108, 101, 32, 44, 87, 104, 105, 108, 101, 32, 44, 49, 44, 68, 49, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 101, 112, 101, 97, 116, 32, 44, 82, 101, 112, 101, 97, 116, 32, 44, 82, 101, 112, 101, 97, 116, 32, 44, 49, 44, 68, 50, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 70, 111, 114, 40, 44, 70, 111, 114, 40, 44, 70, 111, 114, 40, 44, 49, 44, 68, 51, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 69, 110, 100, 44, 69, 110, 100, 44, 69, 110, 100, 44, 49, 44, 68, 52, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 101, 116, 117, 114, 110, 44, 82, 101, 116, 117, 114, 110, 44, 82, 101, 116, 117, 114, 110, 44, 49, 44, 68, 53, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 98, 108, 32, 44, 76, 98, 108, 32, 44, 76, 98, 108, 32, 44, 49, 44, 68, 54, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 111, 116, 111, 32, 44, 71, 111, 116, 111, 32, 44, 71, 111, 116, 111, 32, 44, 49, 44, 68, 55, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 97, 117, 115, 101, 32, 44, 80, 97, 117, 115, 101, 32, 44, 80, 97, 117, 115, 101, 32, 44, 49, 44, 68, 56, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 116, 111, 112, 44, 83, 116, 111, 112, 44, 83, 116, 111, 112, 44, 49, 44, 68, 57, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 83, 62, 40, 44, 73, 83, 62, 40, 44, 73, 83, 62, 40, 44, 49, 44, 68, 65, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 83, 60, 40, 44, 68, 83, 60, 40, 44, 68, 83, 60, 40, 44, 49, 44, 68, 66, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 110, 112, 117, 116, 32, 44, 73, 110, 112, 117, 116, 32, 44, 73, 110, 112, 117, 116, 32, 44, 49, 44, 68, 67, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 114, 111, 109, 112, 116, 32, 44, 80, 114, 111, 109, 112, 116, 32, 44, 80, 114, 111, 109, 112, 116, 32, 44, 49, 44, 68, 68, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 105, 115, 112, 32, 44, 68, 105, 115, 112, 32, 44, 68, 105, 115, 112, 32, 44, 49, 44, 68, 69, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 105, 115, 112, 71, 114, 97, 112, 104, 44, 68, 105, 115, 112, 71, 114, 97, 112, 104, 44, 65, 102, 102, 71, 114, 97, 112, 104, 44, 49, 44, 68, 70, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 79, 117, 116, 112, 117, 116, 40, 44, 79, 117, 116, 112, 117, 116, 40, 44, 79, 117, 116, 112, 117, 116, 40, 44, 49, 44, 69, 48, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 108, 114, 72, 111, 109, 101, 44, 67, 108, 114, 72, 111, 109, 101, 44, 69, 102, 102, 69, 99, 114, 97, 110, 44, 49, 44, 69, 49, 44, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 70, 105, 108, 108, 40, 44, 70, 105, 108, 108, 40, 44, 82, 101, 109, 112, 108, 105, 114, 40, 44, 49, 44, 69, 50, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 111, 114, 116, 65, 40, 44, 83, 111, 114, 116, 65, 40, 44, 84, 114, 105, 99, 114, 111, 105, 40, 44, 49, 44, 69, 51, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 111, 114, 116, 68, 40, 44, 83, 111, 114, 116, 68, 40, 44, 84, 114, 105, 100, 195, 169, 99, 114, 111, 105, 40, 44, 49, 44, 69, 52, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 105, 115, 112, 84, 97, 98, 108, 101, 44, 68, 105, 115, 112, 84, 97, 98, 108, 101, 44, 65, 102, 102, 84, 97, 98, 108, 101, 44, 49, 44, 69, 53, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 77, 101, 110, 117, 40, 44, 77, 101, 110, 117, 40, 44, 77, 101, 110, 117, 40, 44, 49, 44, 69, 54, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 101, 110, 100, 40, 44, 83, 101, 110, 100, 40, 44, 69, 110, 118, 111, 105, 40, 44, 49, 44, 69, 55, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 101, 116, 40, 44, 71, 101, 116, 40, 44, 67, 97, 112, 116, 40, 44, 49, 44, 69, 56, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 108, 111, 116, 115, 79, 110, 32, 44, 80, 108, 111, 116, 115, 79, 110, 32, 44, 71, 114, 97, 112, 104, 65, 102, 102, 32, 44, 49, 44, 69, 57, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 108, 111, 116, 115, 79, 102, 102, 32, 44, 80, 108, 111, 116, 115, 79, 102, 102, 32, 44, 71, 114, 97, 112, 104, 78, 65, 102, 102, 32, 44, 49, 44, 69, 65, 44, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 51, 48, 97, 44, 226, 140, 138, 44, 226, 140, 138, 44, 49, 44, 69, 66, 44, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 108, 111, 116, 49, 40, 44, 80, 108, 111, 116, 49, 40, 44, 71, 114, 97, 112, 104, 49, 40, 44, 49, 44, 69, 67, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 108, 111, 116, 50, 40, 44, 80, 108, 111, 116, 50, 40, 44, 71, 114, 97, 112, 104, 50, 40, 44, 49, 44, 69, 68, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 108, 111, 116, 51, 40, 44, 80, 108, 111, 116, 51, 40, 44, 71, 114, 97, 112, 104, 51, 40, 44, 49, 44, 69, 69, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 101, 116, 68, 97, 116, 101, 40, 44, 115, 101, 116, 68, 97, 116, 101, 40, 44, 100, 195, 169, 102, 68, 97, 116, 101, 40, 44, 50, 44, 69, 70, 44, 48, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 69, 70, 88, 88, 32, 116, 111, 107, 101, 110, 115, 32, 97, 114, 101, 32, 84, 73, 45, 56, 52, 43, 32, 97, 110, 100, 32, 108, 97, 116, 101, 114, 32, 111, 110, 108, 121, 44, 13, 10, 44, 44, 44, 115, 101, 116, 84, 105, 109, 101, 40, 44, 115, 101, 116, 84, 105, 109, 101, 40, 44, 100, 195, 169, 102, 72, 101, 117, 114, 101, 40, 44, 50, 44, 69, 70, 44, 49, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 99, 104, 101, 99, 107, 84, 109, 114, 40, 44, 99, 104, 101, 99, 107, 84, 109, 114, 40, 44, 65, 102, 102, 77, 105, 110, 116, 114, 40, 44, 50, 44, 69, 70, 44, 50, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 101, 116, 68, 116, 70, 109, 116, 40, 44, 115, 101, 116, 68, 116, 70, 109, 116, 40, 44, 100, 195, 169, 102, 70, 109, 116, 68, 116, 40, 44, 50, 44, 69, 70, 44, 51, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 101, 116, 84, 109, 70, 109, 116, 40, 44, 115, 101, 116, 84, 109, 70, 109, 116, 40, 44, 100, 195, 169, 102, 70, 109, 116, 72, 114, 40, 44, 50, 44, 69, 70, 44, 52, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 116, 105, 109, 101, 67, 110, 118, 40, 44, 116, 105, 109, 101, 67, 110, 118, 40, 44, 99, 111, 110, 118, 72, 101, 117, 114, 40, 44, 50, 44, 69, 70, 44, 53, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 100, 97, 121, 79, 102, 87, 107, 40, 44, 100, 97, 121, 79, 102, 87, 107, 40, 44, 106, 111, 117, 114, 115, 101, 109, 40, 44, 50, 44, 69, 70, 44, 54, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 103, 101, 116, 68, 116, 83, 116, 114, 40, 44, 103, 101, 116, 68, 116, 83, 116, 114, 40, 44, 65, 102, 102, 67, 104, 68, 116, 40, 44, 50, 44, 69, 70, 44, 55, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 103, 101, 116, 84, 109, 83, 116, 114, 40, 44, 103, 101, 116, 84, 109, 83, 116, 114, 40, 44, 97, 102, 102, 67, 104, 72, 114, 40, 44, 50, 44, 69, 70, 44, 56, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 103, 101, 116, 68, 97, 116, 101, 44, 103, 101, 116, 68, 97, 116, 101, 44, 97, 102, 102, 68, 97, 116, 101, 44, 50, 44, 69, 70, 44, 57, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 103, 101, 116, 84, 105, 109, 101, 44, 103, 101, 116, 84, 105, 109, 101, 44, 97, 102, 102, 72, 101, 117, 114, 101, 44, 50, 44, 69, 70, 44, 48, 65, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 115, 116, 97, 114, 116, 84, 109, 114, 44, 115, 116, 97, 114, 116, 84, 109, 114, 44, 97, 99, 116, 77, 105, 110, 116, 114, 32, 44, 50, 44, 69, 70, 44, 48, 66, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 103, 101, 116, 68, 116, 70, 109, 116, 44, 103, 101, 116, 68, 116, 70, 109, 116, 44, 97, 102, 102, 70, 109, 116, 68, 116, 44, 50, 44, 69, 70, 44, 48, 67, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 103, 101, 116, 84, 109, 70, 109, 116, 44, 103, 101, 116, 84, 109, 70, 109, 116, 44, 97, 102, 102, 70, 109, 116, 72, 114, 44, 50, 44, 69, 70, 44, 48, 68, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 105, 115, 67, 108, 111, 99, 107, 79, 110, 44, 105, 115, 67, 108, 111, 99, 107, 79, 110, 44, 97, 99, 116, 72, 111, 114, 108, 44, 50, 44, 69, 70, 44, 48, 69, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 108, 111, 99, 107, 79, 102, 102, 44, 67, 108, 111, 99, 107, 79, 102, 102, 44, 72, 111, 114, 108, 78, 65, 102, 102, 44, 50, 44, 69, 70, 44, 48, 70, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 108, 111, 99, 107, 79, 110, 44, 67, 108, 111, 99, 107, 79, 110, 44, 72, 111, 114, 108, 65, 102, 102, 44, 50, 44, 69, 70, 44, 49, 48, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 79, 112, 101, 110, 76, 105, 98, 40, 44, 79, 112, 101, 110, 76, 105, 98, 40, 44, 79, 117, 118, 114, 105, 114, 66, 105, 98, 108, 105, 111, 40, 44, 50, 44, 69, 70, 44, 49, 49, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 69, 120, 101, 99, 76, 105, 98, 44, 69, 120, 101, 99, 76, 105, 98, 44, 69, 120, 195, 169, 99, 66, 105, 98, 108, 105, 111, 44, 50, 44, 69, 70, 44, 49, 50, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 105, 110, 118, 84, 40, 44, 105, 110, 118, 84, 40, 44, 105, 110, 118, 84, 40, 44, 50, 44, 69, 70, 44, 49, 51, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 99, 55, 92, 117, 48, 48, 98, 50, 71, 79, 70, 45, 84, 101, 115, 116, 40, 44, 207, 135, 194, 178, 71, 79, 70, 45, 84, 101, 115, 116, 40, 44, 207, 135, 194, 178, 71, 79, 70, 45, 84, 101, 115, 116, 40, 44, 50, 44, 69, 70, 44, 49, 52, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 105, 110, 82, 101, 103, 84, 73, 110, 116, 32, 44, 76, 105, 110, 82, 101, 103, 84, 73, 110, 116, 32, 44, 76, 105, 110, 82, 101, 103, 84, 73, 110, 116, 32, 44, 50, 44, 69, 70, 44, 49, 53, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 77, 97, 110, 117, 97, 108, 45, 70, 105, 116, 32, 44, 77, 97, 110, 117, 97, 108, 45, 70, 105, 116, 32, 44, 77, 97, 110, 117, 97, 108, 45, 70, 105, 116, 32, 44, 50, 44, 69, 70, 44, 49, 54, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 81, 117, 97, 100, 114, 97, 110, 116, 49, 44, 90, 81, 117, 97, 100, 114, 97, 110, 116, 49, 44, 90, 81, 117, 97, 100, 114, 97, 110, 116, 49, 44, 50, 44, 69, 70, 44, 49, 55, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 70, 114, 97, 99, 49, 92, 117, 102, 48, 49, 101, 50, 44, 90, 70, 114, 97, 99, 49, 226, 129, 132, 50, 44, 90, 70, 114, 97, 99, 49, 226, 129, 132, 50, 44, 50, 44, 69, 70, 44, 49, 56, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 70, 114, 97, 99, 49, 92, 117, 102, 48, 49, 101, 51, 44, 90, 70, 114, 97, 99, 49, 226, 129, 132, 51, 44, 90, 70, 114, 97, 99, 49, 226, 129, 132, 51, 44, 50, 44, 69, 70, 44, 49, 57, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 70, 114, 97, 99, 49, 92, 117, 102, 48, 49, 101, 52, 44, 90, 70, 114, 97, 99, 49, 226, 129, 132, 52, 44, 90, 70, 114, 97, 99, 49, 226, 129, 132, 52, 44, 50, 44, 69, 70, 44, 49, 65, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 70, 114, 97, 99, 49, 92, 117, 102, 48, 49, 101, 53, 44, 90, 70, 114, 97, 99, 49, 226, 129, 132, 53, 44, 90, 70, 114, 97, 99, 49, 226, 129, 132, 53, 44, 50, 44, 69, 70, 44, 49, 66, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 70, 114, 97, 99, 49, 92, 117, 102, 48, 49, 101, 56, 44, 90, 70, 114, 97, 99, 49, 226, 129, 132, 56, 44, 90, 70, 114, 97, 99, 49, 226, 129, 132, 56, 44, 50, 44, 69, 70, 44, 49, 67, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 90, 70, 114, 97, 99, 49, 92, 117, 102, 48, 49, 101, 49, 48, 44, 90, 70, 114, 97, 99, 49, 226, 129, 132, 49, 48, 44, 90, 70, 114, 97, 99, 49, 226, 129, 132, 49, 48, 44, 50, 44, 69, 70, 44, 49, 68, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 109, 97, 116, 112, 114, 105, 110, 116, 98, 111, 120, 44, 226, 172, 154, 44, 226, 172, 154, 44, 50, 44, 69, 70, 44, 49, 69, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 101, 44, 226, 129, 132, 44, 226, 129, 132, 44, 50, 44, 69, 70, 44, 50, 69, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 50, 52, 50, 51, 44, 225, 181, 164, 44, 225, 181, 164, 44, 50, 44, 69, 70, 44, 50, 70, 44, 44, 84, 101, 120, 116, 47, 83, 121, 109, 98, 111, 108, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 52, 110, 92, 117, 102, 48, 49, 101, 100, 92, 117, 102, 48, 48, 98, 92, 117, 102, 48, 49, 52, 85, 110, 92, 117, 102, 48, 49, 101, 100, 44, 226, 150, 186, 110, 226, 129, 132, 100, 226, 151, 132, 226, 150, 186, 85, 110, 226, 129, 132, 100, 44, 226, 150, 186, 110, 226, 129, 132, 100, 226, 151, 132, 226, 150, 186, 85, 110, 226, 129, 132, 100, 44, 50, 44, 69, 70, 44, 51, 48, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 49, 52, 70, 92, 117, 102, 48, 48, 98, 92, 117, 102, 48, 49, 52, 68, 44, 226, 150, 186, 70, 226, 151, 132, 226, 150, 186, 68, 44, 226, 150, 186, 70, 226, 151, 132, 226, 150, 186, 68, 44, 50, 44, 69, 70, 44, 51, 49, 44, 44, 80, 111, 115, 116, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 101, 109, 97, 105, 110, 100, 101, 114, 40, 44, 114, 101, 109, 97, 105, 110, 100, 101, 114, 40, 44, 114, 101, 109, 97, 105, 110, 100, 101, 114, 40, 44, 50, 44, 69, 70, 44, 51, 50, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 51, 97, 51, 40, 44, 206, 163, 40, 44, 206, 163, 40, 44, 50, 44, 69, 70, 44, 51, 51, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 108, 111, 103, 66, 65, 83, 69, 40, 44, 108, 111, 103, 66, 65, 83, 69, 40, 44, 108, 111, 103, 66, 65, 83, 69, 40, 44, 50, 44, 69, 70, 44, 51, 52, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 114, 97, 110, 100, 73, 110, 116, 78, 111, 82, 101, 112, 40, 44, 114, 97, 110, 100, 73, 110, 116, 78, 111, 82, 101, 112, 40, 44, 114, 97, 110, 100, 73, 110, 116, 78, 111, 82, 101, 112, 40, 44, 50, 44, 69, 70, 44, 51, 53, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 76, 65, 83, 83, 73, 67, 44, 67, 76, 65, 83, 83, 73, 67, 44, 67, 76, 65, 83, 83, 73, 67, 44, 50, 44, 69, 70, 44, 51, 54, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 65, 108, 105, 97, 115, 32, 63, 44, 13, 10, 44, 44, 44, 77, 65, 84, 72, 80, 82, 73, 78, 84, 44, 77, 65, 84, 72, 80, 82, 73, 78, 84, 44, 77, 65, 84, 72, 80, 82, 73, 78, 84, 44, 50, 44, 69, 70, 44, 51, 55, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 76, 65, 83, 83, 73, 67, 44, 67, 76, 65, 83, 83, 73, 67, 44, 67, 76, 65, 83, 83, 73, 67, 44, 50, 44, 69, 70, 44, 51, 56, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 110, 92, 117, 102, 48, 49, 101, 100, 44, 110, 226, 129, 132, 100, 44, 110, 226, 129, 132, 100, 44, 50, 44, 69, 70, 44, 51, 57, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 85, 110, 92, 117, 102, 48, 49, 101, 100, 44, 85, 110, 226, 129, 132, 100, 44, 85, 110, 226, 129, 132, 100, 44, 50, 44, 69, 70, 44, 51, 65, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 65, 85, 84, 79, 44, 65, 85, 84, 79, 44, 65, 85, 84, 79, 44, 50, 44, 69, 70, 44, 51, 66, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 69, 67, 44, 68, 69, 67, 44, 68, 69, 67, 44, 50, 44, 69, 70, 44, 51, 67, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 70, 82, 65, 67, 44, 70, 82, 65, 67, 44, 70, 82, 65, 67, 44, 50, 44, 69, 70, 44, 51, 68, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 70, 82, 65, 67, 45, 65, 80, 80, 82, 79, 88, 44, 70, 82, 65, 67, 45, 65, 80, 80, 82, 79, 88, 44, 70, 82, 65, 67, 45, 65, 80, 80, 82, 79, 88, 44, 50, 44, 69, 70, 44, 51, 68, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 65, 108, 105, 97, 115, 32, 47, 32, 79, 108, 100, 44, 13, 10, 44, 44, 44, 83, 84, 65, 84, 87, 73, 90, 65, 82, 68, 32, 79, 78, 44, 83, 84, 65, 84, 87, 73, 90, 65, 82, 68, 32, 79, 78, 44, 83, 84, 65, 84, 87, 73, 90, 65, 82, 68, 32, 79, 78, 44, 50, 44, 69, 70, 44, 51, 70, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 84, 65, 84, 87, 73, 90, 65, 82, 68, 32, 79, 70, 70, 44, 83, 84, 65, 84, 87, 73, 90, 65, 82, 68, 32, 79, 70, 70, 44, 83, 84, 65, 84, 87, 73, 90, 65, 82, 68, 32, 79, 70, 70, 44, 50, 44, 69, 70, 44, 52, 48, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 66, 76, 85, 69, 44, 66, 76, 85, 69, 44, 66, 76, 69, 85, 44, 50, 44, 69, 70, 44, 52, 49, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 82, 69, 68, 44, 82, 69, 68, 44, 82, 79, 85, 71, 69, 44, 50, 44, 69, 70, 44, 52, 50, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 66, 76, 65, 67, 75, 44, 66, 76, 65, 67, 75, 44, 78, 79, 73, 82, 44, 50, 44, 69, 70, 44, 52, 51, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 77, 65, 71, 69, 78, 84, 65, 44, 77, 65, 71, 69, 78, 84, 65, 44, 77, 65, 71, 69, 78, 84, 65, 44, 50, 44, 69, 70, 44, 52, 52, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 82, 69, 69, 78, 44, 71, 82, 69, 69, 78, 44, 86, 69, 82, 84, 44, 50, 44, 69, 70, 44, 52, 53, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 79, 82, 65, 78, 71, 69, 44, 79, 82, 65, 78, 71, 69, 44, 79, 82, 65, 78, 71, 69, 44, 50, 44, 69, 70, 44, 52, 54, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 66, 82, 79, 87, 78, 44, 66, 82, 79, 87, 78, 44, 77, 65, 82, 82, 79, 78, 44, 50, 44, 69, 70, 44, 52, 55, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 78, 65, 86, 89, 44, 78, 65, 86, 89, 44, 66, 76, 69, 85, 32, 77, 82, 78, 44, 50, 44, 69, 70, 44, 52, 56, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 84, 66, 76, 85, 69, 44, 76, 84, 66, 76, 85, 69, 44, 66, 76, 69, 85, 32, 67, 76, 82, 44, 50, 44, 69, 70, 44, 52, 57, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 89, 69, 76, 76, 79, 87, 44, 89, 69, 76, 76, 79, 87, 44, 74, 65, 85, 78, 69, 44, 50, 44, 69, 70, 44, 52, 65, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 87, 72, 73, 84, 69, 44, 87, 72, 73, 84, 69, 44, 66, 76, 65, 78, 67, 44, 50, 44, 69, 70, 44, 52, 66, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 84, 71, 82, 65, 89, 44, 76, 84, 71, 82, 65, 89, 44, 71, 82, 73, 83, 32, 67, 76, 82, 44, 50, 44, 69, 70, 44, 52, 67, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 77, 69, 68, 71, 82, 65, 89, 44, 77, 69, 68, 71, 82, 65, 89, 44, 71, 82, 73, 83, 32, 77, 79, 89, 44, 50, 44, 69, 70, 44, 52, 68, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 82, 65, 89, 44, 71, 82, 65, 89, 44, 71, 82, 73, 83, 44, 50, 44, 69, 70, 44, 52, 69, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 65, 82, 75, 71, 82, 65, 89, 44, 68, 65, 82, 75, 71, 82, 65, 89, 44, 71, 82, 73, 83, 32, 70, 79, 78, 44, 50, 44, 69, 70, 44, 52, 70, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 109, 97, 103, 101, 49, 44, 73, 109, 97, 103, 101, 49, 44, 73, 109, 97, 103, 101, 49, 44, 50, 44, 69, 70, 44, 53, 48, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 109, 97, 103, 101, 50, 44, 73, 109, 97, 103, 101, 50, 44, 73, 109, 97, 103, 101, 50, 44, 50, 44, 69, 70, 44, 53, 49, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 109, 97, 103, 101, 51, 44, 73, 109, 97, 103, 101, 51, 44, 73, 109, 97, 103, 101, 51, 44, 50, 44, 69, 70, 44, 53, 50, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 109, 97, 103, 101, 52, 44, 73, 109, 97, 103, 101, 52, 44, 73, 109, 97, 103, 101, 52, 44, 50, 44, 69, 70, 44, 53, 51, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 109, 97, 103, 101, 53, 44, 73, 109, 97, 103, 101, 53, 44, 73, 109, 97, 103, 101, 53, 44, 50, 44, 69, 70, 44, 53, 52, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 109, 97, 103, 101, 54, 44, 73, 109, 97, 103, 101, 54, 44, 73, 109, 97, 103, 101, 54, 44, 50, 44, 69, 70, 44, 53, 53, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 109, 97, 103, 101, 55, 44, 73, 109, 97, 103, 101, 55, 44, 73, 109, 97, 103, 101, 55, 44, 50, 44, 69, 70, 44, 53, 54, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 109, 97, 103, 101, 56, 44, 73, 109, 97, 103, 101, 56, 44, 73, 109, 97, 103, 101, 56, 44, 50, 44, 69, 70, 44, 53, 55, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 109, 97, 103, 101, 57, 44, 73, 109, 97, 103, 101, 57, 44, 73, 109, 97, 103, 101, 57, 44, 50, 44, 69, 70, 44, 53, 56, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 73, 109, 97, 103, 101, 48, 44, 73, 109, 97, 103, 101, 48, 44, 73, 109, 97, 103, 101, 48, 44, 50, 44, 69, 70, 44, 53, 57, 44, 82, 101, 97, 100, 47, 87, 114, 105, 116, 101, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 114, 105, 100, 76, 105, 110, 101, 32, 44, 71, 114, 105, 100, 76, 105, 110, 101, 32, 44, 76, 105, 103, 110, 101, 65, 102, 102, 32, 44, 50, 44, 69, 70, 44, 53, 65, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100, 79, 110, 32, 44, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100, 79, 110, 32, 44, 65, 114, 114, 80, 108, 97, 110, 65, 102, 102, 32, 44, 50, 44, 69, 70, 44, 53, 66, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100, 79, 102, 102, 44, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100, 79, 102, 102, 44, 65, 114, 114, 80, 108, 97, 110, 78, 65, 102, 102, 44, 50, 44, 69, 70, 44, 54, 52, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 71, 114, 97, 112, 104, 67, 111, 108, 111, 114, 40, 44, 71, 114, 97, 112, 104, 67, 111, 108, 111, 114, 40, 44, 67, 111, 117, 108, 101, 117, 114, 71, 114, 97, 112, 104, 40, 44, 50, 44, 69, 70, 44, 54, 53, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 81, 117, 105, 99, 107, 80, 108, 111, 116, 38, 70, 105, 116, 45, 69, 81, 44, 81, 117, 105, 99, 107, 80, 108, 111, 116, 38, 70, 105, 116, 45, 69, 81, 44, 84, 114, 97, 99, 195, 169, 65, 106, 117, 115, 116, 45, 195, 137, 113, 44, 50, 44, 69, 70, 44, 54, 54, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 56, 52, 43, 67, 83, 69, 32, 97, 110, 100, 32, 108, 97, 116, 101, 114, 44, 13, 10, 44, 44, 44, 84, 101, 120, 116, 67, 111, 108, 111, 114, 40, 44, 84, 101, 120, 116, 67, 111, 108, 111, 114, 40, 44, 67, 111, 117, 108, 101, 117, 114, 84, 101, 120, 116, 101, 40, 44, 50, 44, 69, 70, 44, 54, 55, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 65, 115, 109, 56, 52, 67, 80, 114, 103, 109, 44, 65, 115, 109, 56, 52, 67, 80, 114, 103, 109, 44, 65, 115, 109, 56, 52, 67, 80, 114, 103, 109, 44, 50, 44, 69, 70, 44, 54, 56, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 101, 116, 101, 99, 116, 65, 115, 121, 109, 79, 110, 44, 68, 101, 116, 101, 99, 116, 65, 115, 121, 109, 79, 110, 44, 68, 195, 169, 116, 101, 99, 116, 65, 115, 121, 109, 65, 99, 116, 44, 50, 44, 69, 70, 44, 54, 65, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 101, 116, 101, 99, 116, 65, 115, 121, 109, 79, 102, 102, 44, 68, 101, 116, 101, 99, 116, 65, 115, 121, 109, 79, 102, 102, 44, 68, 195, 169, 116, 101, 99, 116, 65, 115, 121, 109, 68, 195, 169, 115, 44, 50, 44, 69, 70, 44, 54, 66, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 66, 111, 114, 100, 101, 114, 67, 111, 108, 111, 114, 32, 44, 66, 111, 114, 100, 101, 114, 67, 111, 108, 111, 114, 32, 44, 67, 111, 117, 108, 101, 117, 114, 66, 111, 114, 100, 32, 44, 50, 44, 69, 70, 44, 54, 67, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 48, 48, 98, 55, 44, 194, 183, 44, 194, 183, 44, 50, 44, 69, 70, 44, 55, 51, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 84, 104, 105, 110, 44, 84, 104, 105, 110, 44, 70, 105, 110, 44, 50, 44, 69, 70, 44, 55, 52, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 68, 111, 116, 45, 84, 104, 105, 110, 44, 68, 111, 116, 45, 84, 104, 105, 110, 44, 80, 111, 105, 110, 116, 32, 102, 105, 110, 44, 50, 44, 69, 70, 44, 55, 53, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 65, 115, 109, 56, 51, 67, 69, 80, 114, 103, 109, 44, 65, 115, 109, 56, 51, 67, 69, 80, 114, 103, 109, 44, 65, 115, 109, 56, 51, 67, 69, 80, 114, 103, 109, 44, 50, 44, 69, 70, 44, 55, 65, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 65, 115, 109, 56, 52, 67, 69, 80, 114, 103, 109, 44, 65, 115, 109, 56, 52, 67, 69, 80, 114, 103, 109, 44, 65, 115, 109, 56, 52, 67, 69, 80, 114, 103, 109, 44, 50, 44, 69, 70, 44, 55, 65, 44, 44, 66, 65, 83, 73, 67, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 111, 110, 108, 121, 44, 44, 44, 44, 13, 10, 44, 44, 44, 81, 117, 97, 114, 116, 105, 108, 101, 115, 32, 83, 101, 116, 116, 105, 110, 103, 92, 117, 50, 48, 50, 54, 44, 81, 117, 97, 114, 116, 105, 108, 101, 115, 32, 83, 101, 116, 116, 105, 110, 103, 226, 128, 166, 44, 81, 117, 97, 114, 116, 105, 108, 101, 115, 32, 114, 195, 169, 103, 108, 97, 103, 101, 226, 128, 166, 44, 50, 44, 69, 70, 44, 56, 49, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 117, 40, 92, 117, 70, 48, 48, 69, 45, 50, 41, 44, 117, 40, 240, 157, 146, 143, 45, 50, 41, 44, 117, 40, 240, 157, 146, 143, 45, 50, 41, 44, 50, 44, 69, 70, 44, 56, 50, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 118, 40, 92, 117, 70, 48, 48, 69, 45, 50, 41, 44, 118, 40, 240, 157, 146, 143, 45, 50, 41, 44, 118, 40, 240, 157, 146, 143, 45, 50, 41, 44, 50, 44, 69, 70, 44, 56, 51, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 119, 40, 92, 117, 70, 48, 48, 69, 45, 50, 41, 44, 119, 40, 240, 157, 146, 143, 45, 50, 41, 44, 119, 40, 240, 157, 146, 143, 45, 50, 41, 44, 50, 44, 69, 70, 44, 56, 52, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 117, 40, 92, 117, 70, 48, 48, 69, 45, 49, 41, 44, 117, 40, 240, 157, 146, 143, 45, 49, 41, 44, 117, 40, 240, 157, 146, 143, 45, 49, 41, 44, 50, 44, 69, 70, 44, 56, 53, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 118, 40, 92, 117, 70, 48, 48, 69, 45, 49, 41, 44, 118, 40, 240, 157, 146, 143, 45, 49, 41, 44, 118, 40, 240, 157, 146, 143, 45, 49, 41, 44, 50, 44, 69, 70, 44, 56, 54, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 119, 40, 92, 117, 70, 48, 48, 69, 45, 49, 41, 44, 119, 40, 240, 157, 146, 143, 45, 49, 41, 44, 119, 40, 240, 157, 146, 143, 45, 49, 41, 44, 50, 44, 69, 70, 44, 56, 55, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 117, 40, 92, 117, 70, 48, 48, 69, 41, 44, 117, 40, 240, 157, 146, 143, 41, 44, 117, 40, 240, 157, 146, 143, 41, 44, 50, 44, 69, 70, 44, 56, 56, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 118, 40, 92, 117, 70, 48, 48, 69, 41, 44, 118, 40, 240, 157, 146, 143, 41, 44, 118, 40, 240, 157, 146, 143, 41, 44, 50, 44, 69, 70, 44, 56, 57, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 119, 40, 92, 117, 70, 48, 48, 69, 41, 44, 119, 40, 240, 157, 146, 143, 41, 44, 119, 40, 240, 157, 146, 143, 41, 44, 50, 44, 69, 70, 44, 56, 65, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 117, 40, 92, 117, 70, 48, 48, 69, 43, 49, 41, 44, 117, 40, 240, 157, 146, 143, 43, 49, 41, 44, 117, 40, 240, 157, 146, 143, 43, 49, 41, 44, 50, 44, 69, 70, 44, 56, 66, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 118, 40, 92, 117, 70, 48, 48, 69, 43, 49, 41, 44, 118, 40, 240, 157, 146, 143, 43, 49, 41, 44, 118, 40, 240, 157, 146, 143, 43, 49, 41, 44, 50, 44, 69, 70, 44, 56, 67, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 119, 40, 92, 117, 70, 48, 48, 69, 43, 49, 41, 44, 119, 40, 240, 157, 146, 143, 43, 49, 41, 44, 119, 40, 240, 157, 146, 143, 43, 49, 41, 44, 50, 44, 69, 70, 44, 56, 68, 44, 82, 101, 97, 100, 45, 111, 110, 108, 121, 44, 86, 97, 114, 105, 97, 98, 108, 101, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 83, 69, 81, 40, 92, 117, 70, 48, 48, 69, 41, 44, 83, 69, 81, 40, 240, 157, 146, 143, 41, 44, 83, 85, 73, 84, 69, 40, 240, 157, 146, 143, 41, 44, 50, 44, 69, 70, 44, 56, 70, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 83, 69, 81, 40, 92, 117, 70, 48, 48, 69, 43, 50, 41, 44, 83, 69, 81, 40, 240, 157, 146, 143, 43, 49, 41, 44, 83, 85, 73, 84, 69, 40, 240, 157, 146, 143, 43, 49, 41, 44, 50, 44, 69, 70, 44, 57, 48, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 83, 69, 81, 40, 92, 117, 70, 48, 48, 69, 43, 49, 41, 44, 83, 69, 81, 40, 240, 157, 146, 143, 43, 50, 41, 44, 83, 85, 73, 84, 69, 40, 240, 157, 146, 143, 43, 50, 41, 44, 50, 44, 69, 70, 44, 57, 49, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 76, 69, 70, 84, 44, 76, 69, 70, 84, 44, 71, 65, 85, 67, 72, 69, 44, 50, 44, 69, 70, 44, 57, 50, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 67, 69, 78, 84, 69, 82, 44, 67, 69, 78, 84, 69, 82, 44, 67, 69, 78, 84, 82, 69, 44, 50, 44, 69, 70, 44, 57, 51, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 82, 73, 71, 72, 84, 44, 82, 73, 71, 72, 84, 44, 68, 82, 79, 73, 84, 69, 44, 50, 44, 69, 70, 44, 57, 52, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 105, 110, 118, 66, 105, 110, 111, 109, 40, 44, 105, 110, 118, 66, 105, 110, 111, 109, 40, 44, 105, 110, 118, 66, 105, 110, 111, 109, 40, 44, 50, 44, 69, 70, 44, 57, 53, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 87, 97, 105, 116, 32, 44, 87, 97, 105, 116, 32, 44, 87, 97, 105, 116, 32, 44, 50, 44, 69, 70, 44, 57, 54, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 116, 111, 83, 116, 114, 105, 110, 103, 40, 44, 116, 111, 83, 116, 114, 105, 110, 103, 40, 44, 118, 101, 114, 115, 67, 104, 97, 195, 174, 110, 101, 40, 44, 50, 44, 69, 70, 44, 57, 55, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 101, 118, 97, 108, 40, 44, 101, 118, 97, 108, 40, 44, 101, 118, 97, 108, 40, 44, 50, 44, 69, 70, 44, 57, 56, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 50, 43, 44, 13, 10, 44, 44, 44, 69, 120, 101, 99, 117, 116, 101, 32, 80, 114, 111, 103, 114, 97, 109, 44, 69, 120, 101, 99, 117, 116, 101, 32, 80, 114, 111, 103, 114, 97, 109, 44, 69, 120, 195, 169, 99, 117, 116, 101, 114, 32, 112, 114, 111, 103, 114, 97, 109, 109, 101, 44, 50, 44, 69, 70, 44, 57, 69, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 51, 43, 44, 13, 10, 44, 44, 44, 85, 110, 100, 111, 32, 67, 108, 101, 97, 114, 44, 85, 110, 100, 111, 32, 67, 108, 101, 97, 114, 44, 65, 110, 110, 117, 108, 101, 114, 32, 101, 102, 102, 97, 99, 101, 114, 44, 50, 44, 69, 70, 44, 57, 70, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 51, 43, 44, 13, 10, 44, 44, 44, 73, 110, 115, 101, 114, 116, 32, 76, 105, 110, 101, 32, 65, 98, 111, 118, 101, 44, 73, 110, 115, 101, 114, 116, 32, 76, 105, 110, 101]);
            fileData0.push.apply(fileData0, [32, 65, 98, 111, 118, 101, 44, 73, 110, 115, 195, 169, 114, 101, 114, 32, 108, 105, 103, 110, 101, 32, 226, 134, 145, 44, 50, 44, 69, 70, 44, 65, 48, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 51, 43, 44, 13, 10, 44, 44, 44, 67, 117, 116, 32, 76, 105, 110, 101, 44, 67, 117, 116, 32, 76, 105, 110, 101, 44, 67, 111, 117, 112, 101, 114, 32, 108, 105, 103, 110, 101, 44, 50, 44, 69, 70, 44, 65, 49, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 51, 43, 44, 13, 10, 44, 44, 44, 67, 111, 112, 121, 32, 76, 105, 110, 101, 44, 67, 111, 112, 121, 32, 76, 105, 110, 101, 44, 67, 111, 112, 105, 101, 114, 32, 108, 105, 103, 110, 101, 44, 50, 44, 69, 70, 44, 65, 50, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 51, 43, 44, 13, 10, 44, 44, 44, 80, 97, 115, 116, 101, 32, 76, 105, 110, 101, 32, 66, 101, 108, 111, 119, 44, 80, 97, 115, 116, 101, 32, 76, 105, 110, 101, 32, 66, 101, 108, 111, 119, 44, 67, 111, 108, 108, 101, 114, 32, 108, 105, 103, 110, 101, 32, 226, 134, 147, 44, 50, 44, 69, 70, 44, 65, 51, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 51, 43, 44, 13, 10, 44, 44, 44, 73, 110, 115, 101, 114, 116, 32, 67, 111, 109, 109, 101, 110, 116, 32, 65, 98, 111, 118, 101, 44, 73, 110, 115, 101, 114, 116, 32, 67, 111, 109, 109, 101, 110, 116, 32, 65, 98, 111, 118, 101, 44, 73, 110, 115, 195, 169, 114, 101, 114, 32, 99, 111, 109, 109, 101, 110, 116, 97, 105, 114, 101, 32, 226, 134, 145, 44, 50, 44, 69, 70, 44, 65, 52, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 51, 43, 44, 13, 10, 44, 44, 44, 81, 117, 105, 116, 32, 69, 100, 105, 116, 111, 114, 44, 81, 117, 105, 116, 32, 69, 100, 105, 116, 111, 114, 44, 81, 117, 105, 116, 116, 101, 114, 44, 50, 44, 69, 70, 44, 65, 53, 44, 44, 65, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 51, 43, 44, 13, 10, 44, 44, 44, 112, 105, 101, 99, 101, 119, 105, 115, 101, 40, 44, 112, 105, 101, 99, 101, 119, 105, 115, 101, 40, 44, 112, 97, 114, 109, 111, 114, 99, 101, 97, 117, 120, 40, 44, 50, 44, 69, 70, 44, 65, 54, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 67, 69, 32, 79, 83, 32, 53, 46, 51, 43, 44, 13, 10, 44, 44, 44, 94, 44, 94, 44, 94, 44, 49, 44, 70, 48, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 92, 117, 102, 48, 48, 54, 92, 117, 50, 50, 49, 97, 44, 203, 163, 226, 136, 154, 44, 203, 163, 226, 136, 154, 44, 49, 44, 70, 49, 44, 44, 44, 73, 110, 102, 105, 120, 32, 111, 112, 101, 114, 97, 116, 111, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 49, 45, 86, 97, 114, 32, 83, 116, 97, 116, 115, 32, 44, 49, 45, 86, 97, 114, 32, 83, 116, 97, 116, 115, 32, 44, 83, 116, 97, 116, 115, 32, 49, 45, 86, 97, 114, 32, 44, 49, 44, 70, 50, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 50, 45, 86, 97, 114, 32, 83, 116, 97, 116, 115, 32, 44, 50, 45, 86, 97, 114, 32, 83, 116, 97, 116, 115, 32, 44, 83, 116, 97, 116, 115, 32, 50, 45, 86, 97, 114, 32, 44, 49, 44, 70, 51, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 105, 110, 82, 101, 103, 40, 97, 43, 98, 120, 41, 32, 44, 76, 105, 110, 82, 101, 103, 40, 97, 43, 98, 120, 41, 32, 44, 82, 101, 103, 76, 105, 110, 40, 97, 43, 98, 120, 41, 32, 44, 49, 44, 70, 52, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 69, 120, 112, 82, 101, 103, 32, 44, 69, 120, 112, 82, 101, 103, 32, 44, 82, 101, 103, 69, 120, 112, 32, 44, 49, 44, 70, 53, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 110, 82, 101, 103, 32, 44, 76, 110, 82, 101, 103, 32, 44, 82, 101, 103, 76, 110, 32, 44, 49, 44, 70, 54, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 80, 119, 114, 82, 101, 103, 32, 44, 80, 119, 114, 82, 101, 103, 32, 44, 82, 101, 103, 80, 117, 105, 115, 115, 32, 44, 49, 44, 70, 55, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 77, 101, 100, 45, 77, 101, 100, 32, 44, 77, 101, 100, 45, 77, 101, 100, 32, 44, 77, 101, 100, 45, 77, 101, 100, 32, 44, 49, 44, 70, 56, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 81, 117, 97, 100, 82, 101, 103, 32, 44, 81, 117, 97, 100, 82, 101, 103, 32, 44, 82, 101, 103, 81, 117, 97, 100, 32, 44, 49, 44, 70, 57, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 108, 114, 76, 105, 115, 116, 32, 44, 67, 108, 114, 76, 105, 115, 116, 32, 44, 69, 102, 102, 76, 105, 115, 116, 101, 32, 44, 49, 44, 70, 65, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 67, 108, 114, 84, 97, 98, 108, 101, 44, 67, 108, 114, 84, 97, 98, 108, 101, 44, 69, 102, 102, 84, 97, 98, 108, 101, 44, 49, 44, 70, 66, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10, 44, 44, 44, 72, 105, 115, 116, 111, 103, 114, 97, 109, 44, 72, 105, 115, 116, 111, 103, 114, 97, 109, 44, 72, 105, 115, 116, 111, 103, 114, 97, 109, 109, 101, 44, 49, 44, 70, 67, 44, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 120, 121, 76, 105, 110, 101, 44, 120, 121, 76, 105, 110, 101, 44, 80, 111, 108, 121, 103, 111, 110, 101, 44, 49, 44, 70, 68, 44, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 83, 99, 97, 116, 116, 101, 114, 44, 83, 99, 97, 116, 116, 101, 114, 44, 78, 117, 97, 103, 101, 44, 49, 44, 70, 69, 44, 44, 44, 79, 116, 104, 101, 114, 44, 44, 44, 44, 13, 10, 44, 44, 44, 76, 105, 110, 82, 101, 103, 40, 97, 120, 43, 98, 41, 32, 44, 76, 105, 110, 82, 101, 103, 40, 97, 120, 43, 98, 41, 32, 44, 82, 101, 103, 76, 105, 110, 40, 97, 120, 43, 98, 41, 32, 44, 49, 44, 70, 70, 44, 44, 44, 70, 117, 110, 99, 116, 105, 111, 110, 44, 44, 44, 44, 13, 10]);
            Module['FS_createDataFile']('/', 'programs_tokens.csv', fileData0, true, true, false);

        }
        if (Module['calledRun']) {
            runWithFS();
        } else {
            if (!Module['preRun']) Module['preRun'] = [];
            Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
        }

    }
    loadPackage({ "files": [] });

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
    if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
    }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function (status, toThrow) {
    throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;



// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
    if (Module['locateFile']) {
        return Module['locateFile'](path, scriptDirectory);
    }
    return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

if (ENVIRONMENT_IS_NODE) {
    scriptDirectory = __dirname + '/';

    // Expose functionality in the same simple way that the shells work
    // Note that we pollute the global namespace here, otherwise we break in node
    var nodeFS;
    var nodePath;

    read_ = function shell_read(filename, binary) {
        var ret;
        if (!nodeFS) nodeFS = require('fs');
        if (!nodePath) nodePath = require('path');
        filename = nodePath['normalize'](filename);
        ret = nodeFS['readFileSync'](filename);
        return binary ? ret : ret.toString();
    };

    readBinary = function readBinary(filename) {
        var ret = read_(filename, true);
        if (!ret.buffer) {
            ret = new Uint8Array(ret);
        }
        assert(ret.buffer);
        return ret;
    };

    if (process['argv'].length > 1) {
        thisProgram = process['argv'][1].replace(/\\/g, '/');
    }

    arguments_ = process['argv'].slice(2);

    if (typeof module !== 'undefined') {
        module['exports'] = Module;
    }

    process['on']('uncaughtException', function (ex) {
        // suppress ExitStatus exceptions from showing an error
        if (!(ex instanceof ExitStatus)) {
            throw ex;
        }
    });

    process['on']('unhandledRejection', abort);

    quit_ = function (status) {
        process['exit'](status);
    };

    Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
    if (ENVIRONMENT_IS_SHELL) {


        if (typeof read != 'undefined') {
            read_ = function shell_read(f) {
                return read(f);
            };
        }

        readBinary = function readBinary(f) {
            var data;
            if (typeof readbuffer === 'function') {
                return new Uint8Array(readbuffer(f));
            }
            data = read(f, 'binary');
            assert(typeof data === 'object');
            return data;
        };

        if (typeof scriptArgs != 'undefined') {
            arguments_ = scriptArgs;
        } else if (typeof arguments != 'undefined') {
            arguments_ = arguments;
        }

        if (typeof quit === 'function') {
            quit_ = function (status) {
                quit(status);
            };
        }

        if (typeof print !== 'undefined') {
            // Prefer to use print/printErr where they exist, as they usually work better.
            if (typeof console === 'undefined') console = {};
            console.log = print;
            console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
        }
    } else
        if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
            if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
                scriptDirectory = self.location.href;
            } else if (document.currentScript) { // web
                scriptDirectory = document.currentScript.src;
            }
            // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
            // otherwise, slice off the final part of the url to find the script directory.
            // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
            // and scriptDirectory will correctly be replaced with an empty string.
            if (scriptDirectory.indexOf('blob:') !== 0) {
                scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/') + 1);
            } else {
                scriptDirectory = '';
            }


            read_ = function shell_read(url) {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                xhr.send(null);
                return xhr.responseText;
            };

            if (ENVIRONMENT_IS_WORKER) {
                readBinary = function readBinary(url) {
                    var xhr = new XMLHttpRequest();
                    xhr.open('GET', url, false);
                    xhr.responseType = 'arraybuffer';
                    xhr.send(null);
                    return new Uint8Array(xhr.response);
                };
            }

            readAsync = function readAsync(url, onload, onerror) {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, true);
                xhr.responseType = 'arraybuffer';
                xhr.onload = function xhr_onload() {
                    if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
                        onload(xhr.response);
                        return;
                    }
                    onerror();
                };
                xhr.onerror = onerror;
                xhr.send(null);
            };

            setWindowTitle = function (title) { document.title = title };
        } else {
        }

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
    }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];
if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (Module['quit']) quit_ = Module['quit'];

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message

// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function dynamicAlloc(size) {
    var ret = HEAP32[DYNAMICTOP_PTR >> 2];
    var end = (ret + size + 15) & -16;
    if (end > _emscripten_get_heap_size()) {
        abort();
    }
    HEAP32[DYNAMICTOP_PTR >> 2] = end;
    return ret;
}

function alignMemory(size, factor) {
    if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
    return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
    switch (type) {
        case 'i1': case 'i8': return 1;
        case 'i16': return 2;
        case 'i32': return 4;
        case 'i64': return 8;
        case 'float': return 4;
        case 'double': return 8;
        default: {
            if (type[type.length - 1] === '*') {
                return 4; // A pointer
            } else if (type[0] === 'i') {
                var bits = parseInt(type.substr(1));
                assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
                return bits / 8;
            } else {
                return 0;
            }
        }
    }
}

function warnOnce(text) {
    if (!warnOnce.shown) warnOnce.shown = {};
    if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        err(text);
    }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function (x, y) {
        return x % y;
    },
    "debugger": function () {
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// Wraps a JS function as a wasm function with a given signature.
// In the future, we may get a WebAssembly.Function constructor. Until then,
// we create a wasm module that takes the JS function as an import with a given
// signature, and re-exports that as a wasm function.
function convertJsFunctionToWasm(func, sig) {

    // The module is static, with the exception of the type section, which is
    // generated based on the signature passed in.
    var typeSection = [
        0x01, // id: section,
        0x00, // length: 0 (placeholder)
        0x01, // count: 1
        0x60, // form: func
    ];
    var sigRet = sig.slice(0, 1);
    var sigParam = sig.slice(1);
    var typeCodes = {
        'i': 0x7f, // i32
        'j': 0x7e, // i64
        'f': 0x7d, // f32
        'd': 0x7c, // f64
    };

    // Parameters, length + signatures
    typeSection.push(sigParam.length);
    for (var i = 0; i < sigParam.length; ++i) {
        typeSection.push(typeCodes[sigParam[i]]);
    }

    // Return values, length + signatures
    // With no multi-return in MVP, either 0 (void) or 1 (anything else)
    if (sigRet == 'v') {
        typeSection.push(0x00);
    } else {
        typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
    }

    // Write the overall length of the type section back into the section header
    // (excepting the 2 bytes for the section id and length)
    typeSection[1] = typeSection.length - 2;

    // Rest of the module is static
    var bytes = new Uint8Array([
        0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
        0x01, 0x00, 0x00, 0x00, // version: 1
    ].concat(typeSection, [
        0x02, 0x07, // import section
        // (import "e" "f" (func 0 (type 0)))
        0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
        0x07, 0x05, // export section
        // (export "f" (func 0 (type 0)))
        0x01, 0x01, 0x66, 0x00, 0x00,
    ]));

    // We can compile this wasm module synchronously because it is very small.
    // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
    var module = new WebAssembly.Module(bytes);
    var instance = new WebAssembly.Instance(module, {
        e: {
            f: func
        }
    });
    var wrappedFunc = instance.exports.f;
    return wrappedFunc;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
    var table = wasmTable;
    var ret = table.length;

    // Grow the table
    try {
        table.grow(1);
    } catch (err) {
        if (!err instanceof RangeError) {
            throw err;
        }
        throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';
    }

    // Insert new element
    try {
        // Attempting to call this with JS function will cause of table.set() to fail
        table.set(ret, func);
    } catch (err) {
        if (!err instanceof TypeError) {
            throw err;
        }
        assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
        var wrapped = convertJsFunctionToWasm(func, sig);
        table.set(ret, wrapped);
    }

    return ret;
}

function removeFunctionWasm(index) {
    // TODO(sbc): Look into implementing this to allow re-using of table slots
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


    var base = 0;
    for (var i = base; i < base + 0; i++) {
        if (!functionPointers[i]) {
            functionPointers[i] = func;
            return jsCallStartIndex + i;
        }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

    functionPointers[index - jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
    if (!func) return; // on null pointer, return undefined
    assert(sig);
    if (!funcWrappers[sig]) {
        funcWrappers[sig] = {};
    }
    var sigCache = funcWrappers[sig];
    if (!sigCache[func]) {
        // optimize away arguments usage in common cases
        if (sig.length === 1) {
            sigCache[func] = function dynCall_wrapper() {
                return dynCall(sig, func);
            };
        } else if (sig.length === 2) {
            sigCache[func] = function dynCall_wrapper(arg) {
                return dynCall(sig, func, [arg]);
            };
        } else {
            // general case
            sigCache[func] = function dynCall_wrapper() {
                return dynCall(sig, func, Array.prototype.slice.call(arguments));
            };
        }
    }
    return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
    return unsigned ? ((+((low >>> 0))) + ((+((high >>> 0))) * 4294967296.0)) : ((+((low >>> 0))) + ((+((high | 0))) * 4294967296.0));
}

function dynCall(sig, ptr, args) {
    if (args && args.length) {
        return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
        return Module['dynCall_' + sig].call(null, ptr);
    }
}

var tempRet0 = 0;

var setTempRet0 = function (value) {
    tempRet0 = value;
};

var getTempRet0 = function () {
    return tempRet0;
};


var Runtime = {
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary; if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
var noExitRuntime; if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];


if (typeof WebAssembly !== 'object') {
    err('no native wasm support detected');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
    type = type || 'i8';
    if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
        case 'i1': HEAP8[((ptr) >> 0)] = value; break;
        case 'i8': HEAP8[((ptr) >> 0)] = value; break;
        case 'i16': HEAP16[((ptr) >> 1)] = value; break;
        case 'i32': HEAP32[((ptr) >> 2)] = value; break;
        case 'i64': (tempI64 = [value >>> 0, (tempDouble = value, (+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble) / 4294967296.0))), 4294967295.0)) | 0) >>> 0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296.0))))) >>> 0) : 0)], HEAP32[((ptr) >> 2)] = tempI64[0], HEAP32[(((ptr) + (4)) >> 2)] = tempI64[1]); break;
        case 'float': HEAPF32[((ptr) >> 2)] = value; break;
        case 'double': HEAPF64[((ptr) >> 3)] = value; break;
        default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
    type = type || 'i8';
    if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
        case 'i1': return HEAP8[((ptr) >> 0)];
        case 'i8': return HEAP8[((ptr) >> 0)];
        case 'i16': return HEAP16[((ptr) >> 1)];
        case 'i32': return HEAP32[((ptr) >> 2)];
        case 'i64': return HEAP32[((ptr) >> 2)];
        case 'float': return HEAPF32[((ptr) >> 2)];
        case 'double': return HEAPF64[((ptr) >> 3)];
        default: abort('invalid type for getValue: ' + type);
    }
    return null;
}





// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
    if (!condition) {
        abort('Assertion failed: ' + text);
    }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
    var func = Module['_' + ident]; // closure exported function
    assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
    return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
    // For fast lookup of conversion functions
    var toC = {
        'string': function (str) {
            var ret = 0;
            if (str !== null && str !== undefined && str !== 0) { // null string
                // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
                var len = (str.length << 2) + 1;
                ret = stackAlloc(len);
                stringToUTF8(str, ret, len);
            }
            return ret;
        },
        'array': function (arr) {
            var ret = stackAlloc(arr.length);
            writeArrayToMemory(arr, ret);
            return ret;
        }
    };

    function convertReturnValue(ret) {
        if (returnType === 'string') return UTF8ToString(ret);
        if (returnType === 'boolean') return Boolean(ret);
        return ret;
    }

    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
        for (var i = 0; i < args.length; i++) {
            var converter = toC[argTypes[i]];
            if (converter) {
                if (stack === 0) stack = stackSave();
                cArgs[i] = converter(args[i]);
            } else {
                cArgs[i] = args[i];
            }
        }
    }
    var ret = func.apply(null, cArgs);

    ret = convertReturnValue(ret);
    if (stack !== 0) stackRestore(stack);
    return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
    argTypes = argTypes || [];
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function (type) { return type === 'number' });
    var numericRet = returnType !== 'string';
    if (numericRet && numericArgs && !opts) {
        return getCFunc(ident);
    }
    return function () {
        return ccall(ident, returnType, argTypes, arguments, opts);
    }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
    var zeroinit, size;
    if (typeof slab === 'number') {
        zeroinit = true;
        size = slab;
    } else {
        zeroinit = false;
        size = slab.length;
    }

    var singleType = typeof types === 'string' ? types : null;

    var ret;
    if (allocator == ALLOC_NONE) {
        ret = ptr;
    } else {
        ret = [_malloc,
            stackAlloc,
            dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
    }

    if (zeroinit) {
        var stop;
        ptr = ret;
        assert((ret & 3) == 0);
        stop = ret + (size & ~3);
        for (; ptr < stop; ptr += 4) {
            HEAP32[((ptr) >> 2)] = 0;
        }
        stop = ret + size;
        while (ptr < stop) {
            HEAP8[((ptr++) >> 0)] = 0;
        }
        return ret;
    }

    if (singleType === 'i8') {
        if (slab.subarray || slab.slice) {
            HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
        } else {
            HEAPU8.set(new Uint8Array(slab), ret);
        }
        return ret;
    }

    var i = 0, type, typeSize, previousType;
    while (i < size) {
        var curr = slab[i];

        type = singleType || types[i];
        if (type === 0) {
            i++;
            continue;
        }

        if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

        setValue(ret + i, curr, type);

        // no need to look up size unless type changes, so cache it
        if (previousType !== type) {
            typeSize = getNativeTypeSize(type);
            previousType = type;
        }
        i += typeSize;
    }

    return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
    if (!runtimeInitialized) return dynamicAlloc(size);
    return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
    abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
    var str = '';
    while (1) {
        var ch = HEAPU8[((ptr++) >> 0)];
        if (!ch) return str;
        str += String.fromCharCode(ch);
    }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
    return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
    var endIdx = idx + maxBytesToRead;
    var endPtr = idx;
    // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
    // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
    // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
    while (u8Array[endPtr] && !(endPtr >= endIdx))++endPtr;

    if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
        return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
    } else {
        var str = '';
        // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
        while (idx < endPtr) {
            // For UTF8 byte structure, see:
            // http://en.wikipedia.org/wiki/UTF-8#Description
            // https://www.ietf.org/rfc/rfc2279.txt
            // https://tools.ietf.org/html/rfc3629
            var u0 = u8Array[idx++];
            if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
            var u1 = u8Array[idx++] & 63;
            if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
            var u2 = u8Array[idx++] & 63;
            if ((u0 & 0xF0) == 0xE0) {
                u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
            } else {
                u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
            }

            if (u0 < 0x10000) {
                str += String.fromCharCode(u0);
            } else {
                var ch = u0 - 0x10000;
                str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
            }
        }
    }
    return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
    return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
        return 0;

    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
    for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) {
            var u1 = str.charCodeAt(++i);
            u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
        }
        if (u <= 0x7F) {
            if (outIdx >= endIdx) break;
            outU8Array[outIdx++] = u;
        } else if (u <= 0x7FF) {
            if (outIdx + 1 >= endIdx) break;
            outU8Array[outIdx++] = 0xC0 | (u >> 6);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
            if (outIdx + 2 >= endIdx) break;
            outU8Array[outIdx++] = 0xE0 | (u >> 12);
            outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        } else {
            if (outIdx + 3 >= endIdx) break;
            outU8Array[outIdx++] = 0xF0 | (u >> 18);
            outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        }
    }
    // Null-terminate the pointer to the buffer.
    outU8Array[outIdx] = 0;
    return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
        if (u <= 0x7F)++len;
        else if (u <= 0x7FF) len += 2;
        else if (u <= 0xFFFF) len += 3;
        else len += 4;
    }
    return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
    var endPtr = ptr;
    // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
    // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
    var idx = endPtr >> 1;
    while (HEAP16[idx])++idx;
    endPtr = idx << 1;

    if (endPtr - ptr > 32 && UTF16Decoder) {
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
    } else {
        var i = 0;

        var str = '';
        while (1) {
            var codeUnit = HEAP16[(((ptr) + (i * 2)) >> 1)];
            if (codeUnit == 0) return str;
            ++i;
            // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
            str += String.fromCharCode(codeUnit);
        }
    }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
    // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
    if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
    }
    if (maxBytesToWrite < 2) return 0;
    maxBytesToWrite -= 2; // Null terminator.
    var startPtr = outPtr;
    var numCharsToWrite = (maxBytesToWrite < str.length * 2) ? (maxBytesToWrite / 2) : str.length;
    for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[((outPtr) >> 1)] = codeUnit;
        outPtr += 2;
    }
    // Null-terminate the pointer to the HEAP.
    HEAP16[((outPtr) >> 1)] = 0;
    return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
    return str.length * 2;
}

function UTF32ToString(ptr) {
    var i = 0;

    var str = '';
    while (1) {
        var utf32 = HEAP32[(((ptr) + (i * 4)) >> 2)];
        if (utf32 == 0)
            return str;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
            var ch = utf32 - 0x10000;
            str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        } else {
            str += String.fromCharCode(utf32);
        }
    }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
    // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
    if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
    }
    if (maxBytesToWrite < 4) return 0;
    var startPtr = outPtr;
    var endPtr = startPtr + maxBytesToWrite - 4;
    for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
            var trailSurrogate = str.charCodeAt(++i);
            codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
        }
        HEAP32[((outPtr) >> 2)] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
    }
    // Null-terminate the pointer to the HEAP.
    HEAP32[((outPtr) >> 2)] = 0;
    return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF)++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
    }

    return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
    var size = lengthBytesUTF8(str) + 1;
    var ret = _malloc(size);
    if (ret) stringToUTF8Array(str, HEAP8, ret, size);
    return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
    var size = lengthBytesUTF8(str) + 1;
    var ret = stackAlloc(size);
    stringToUTF8Array(str, HEAP8, ret, size);
    return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
    warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

    var /** @type {number} */ lastChar, /** @type {number} */ end;
    if (dontAddNull) {
        // stringToUTF8Array always appends null. If we don't want to do that, remember the
        // character that existed at the location where the null will be placed, and restore
        // that after the write (below).
        end = buffer + lengthBytesUTF8(string);
        lastChar = HEAP8[end];
    }
    stringToUTF8(string, buffer, Infinity);
    if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
    HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
    for (var i = 0; i < str.length; ++i) {
        HEAP8[((buffer++) >> 0)] = str.charCodeAt(i);
    }
    // Null-terminate the pointer to the HEAP.
    if (!dontAddNull) HEAP8[((buffer) >> 0)] = 0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
    if (x % multiple > 0) {
        x += multiple - (x % multiple);
    }
    return x;
}

var HEAP,
    /** @type {ArrayBuffer} */
    buffer,
    /** @type {Int8Array} */
    HEAP8,
    /** @type {Uint8Array} */
    HEAPU8,
    /** @type {Int16Array} */
    HEAP16,
    /** @type {Uint16Array} */
    HEAPU16,
    /** @type {Int32Array} */
    HEAP32,
    /** @type {Uint32Array} */
    HEAPU32,
    /** @type {Float32Array} */
    HEAPF32,
    /** @type {Float64Array} */
    HEAPF64;

function updateGlobalBufferAndViews(buf) {
    buffer = buf;
    Module['HEAP8'] = HEAP8 = new Int8Array(buf);
    Module['HEAP16'] = HEAP16 = new Int16Array(buf);
    Module['HEAP32'] = HEAP32 = new Int32Array(buf);
    Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
    Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
    Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
    Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
    Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}


var STATIC_BASE = 1024,
    STACK_BASE = 36016,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5278896,
    DYNAMIC_BASE = 5278896,
    DYNAMICTOP_PTR = 35984;




var TOTAL_STACK = 5242880;

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;








if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
} else {
    wasmMemory = new WebAssembly.Memory({
        'initial': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
        ,
        'maximum': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
    });
}


if (wasmMemory) {
    buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;









function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
            callback();
            continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
            if (callback.arg === undefined) {
                Module['dynCall_v'](func);
            } else {
                Module['dynCall_vi'](func, callback.arg);
            }
        } else {
            func(callback.arg === undefined ? null : callback.arg);
        }
    }
}

var __ATPRERUN__ = []; // functions called before the runtime is initialized
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

    if (Module['preRun']) {
        if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
        while (Module['preRun'].length) {
            addOnPreRun(Module['preRun'].shift());
        }
    }

    callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
    runtimeInitialized = true;
    if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
    TTY.init();
    callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
    FS.ignorePermissions = false;
    callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
    runtimeExited = true;
}

function postRun() {

    if (Module['postRun']) {
        if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
        while (Module['postRun'].length) {
            addOnPostRun(Module['postRun'].shift());
        }
    }

    callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
    __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
    __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
    if (value >= 0) {
        return value;
    }
    return bits <= 32 ? 2 * Math.abs(1 << (bits - 1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
        : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore) {
    if (value <= 0) {
        return value;
    }
    var half = bits <= 32 ? Math.abs(1 << (bits - 1)) // abs is needed if bits == 32
        : Math.pow(2, bits - 1);
    if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
        // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
        // TODO: In i64 mode 1, resign the two parts separately and safely
        value = -2 * half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
    }
    return value;
}



var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
    return id;
}

function addRunDependency(id) {
    runDependencies++;

    if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
    }

}

function removeRunDependency(id) {
    runDependencies--;

    if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
    }

    if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null;
        }
        if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback(); // can add another dependenciesFulfilled
        }
    }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;







// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
    return String.prototype.startsWith ?
        filename.startsWith(dataURIPrefix) :
        filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'tivars_test.wasm';
if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
    try {
        if (wasmBinary) {
            return new Uint8Array(wasmBinary);
        }

        if (readBinary) {
            return readBinary(wasmBinaryFile);
        } else {
            throw "both async and sync fetching of the wasm failed";
        }
    }
    catch (err) {
        abort(err);
    }
}

function getBinaryPromise() {
    // if we don't have the binary yet, and have the Fetch api, use that
    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
    if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
        return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
            if (!response['ok']) {
                throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
            }
            return response['arrayBuffer']();
        }).catch(function () {
            return getBinary();
        });
    }
    // Otherwise, getBinary should be able to get it synchronously
    return new Promise(function (resolve, reject) {
        resolve(getBinary());
    });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm(env) {

    // prepare imports
    var info = {
        'env': env
        ,
        'global': {
            'NaN': NaN,
            'Infinity': Infinity
        },
        'global.Math': Math,
        'asm2wasm': asm2wasmImports
    };
    // Load the wasm module and create an instance of using native support in the JS engine.
    // handle a generated wasm instance, receiving its exports and
    // performing other necessary setup
    function receiveInstance(instance, module) {
        var exports = instance.exports;
        Module['asm'] = exports;
        removeRunDependency('wasm-instantiate');
    }
    // we can't run yet (except in a pthread, where we have a custom sync instantiator)
    addRunDependency('wasm-instantiate');


    function receiveInstantiatedSource(output) {
        // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
        // receiveInstance() will swap in the exports (to Module.asm) so they can be called
        // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
        // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
        receiveInstance(output['instance']);
    }


    function instantiateArrayBuffer(receiver) {
        return getBinaryPromise().then(function (binary) {
            return WebAssembly.instantiate(binary, info);
        }).then(receiver, function (reason) {
            err('failed to asynchronously prepare wasm: ' + reason);
            abort(reason);
        });
    }

    // Prefer streaming instantiation if available.
    function instantiateAsync() {
        if (!wasmBinary &&
            typeof WebAssembly.instantiateStreaming === 'function' &&
            !isDataURI(wasmBinaryFile) &&
            typeof fetch === 'function') {
            fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
                var result = WebAssembly.instantiateStreaming(response, info);
                return result.then(receiveInstantiatedSource, function (reason) {
                    // We expect the most common failure cause to be a bad MIME type for the binary,
                    // in which case falling back to ArrayBuffer instantiation should work.
                    err('wasm streaming compile failed: ' + reason);
                    err('falling back to ArrayBuffer instantiation');
                    instantiateArrayBuffer(receiveInstantiatedSource);
                });
            });
        } else {
            return instantiateArrayBuffer(receiveInstantiatedSource);
        }
    }
    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
    // to any other async startup actions they are performing.
    if (Module['instantiateWasm']) {
        try {
            var exports = Module['instantiateWasm'](info, receiveInstance);
            return exports;
        } catch (e) {
            err('Module.instantiateWasm callback failed with error: ' + e);
            return false;
        }
    }

    instantiateAsync();
    return {}; // no exports yet; we'll fill them in later
}

// Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
// the wasm module at that time, and it receives imports and provides exports and so forth, the app
// doesn't need to care that it is wasm or asm.js.

Module['asm'] = function (global, env, providedBuffer) {
    // memory was already allocated (so js could use the buffer)
    env['memory'] = wasmMemory
        ;
    // import table
    env['table'] = wasmTable = new WebAssembly.Table({
        'initial': 900,
        'maximum': 900,
        'element': 'anyfunc'
    });
    // With the wasm backend __memory_base and __table_base and only needed for
    // relocatable output.
    env['__memory_base'] = 1024; // tell the memory segments where to place themselves
    // table starts at 0 by default (even in dynamic linking, for the main module)
    env['__table_base'] = 0;

    var exports = createWasm(env);
    return exports;
};

// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 34992;
/* global initializers */  __ATINIT__.push({ func: function () { globalCtors() } });








/* no memory initializer */
var tempDoublePtr = 36000

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
    HEAP8[tempDoublePtr] = HEAP8[ptr];
    HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
    HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
    HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
}

function copyTempDouble(ptr) {
    HEAP8[tempDoublePtr] = HEAP8[ptr];
    HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
    HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
    HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
    HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];
    HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];
    HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];
    HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];
}

// {{PRE_LIBRARY}}


function demangle(func) {
    return func;
}

function demangleAll(text) {
    var regex =
        /\b__Z[\w\d_]+/g;
    return text.replace(regex,
        function (x) {
            var y = demangle(x);
            return x === y ? x : (y + ' [' + x + ']');
        });
}

function jsStackTrace() {
    var err = new Error();
    if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
            throw new Error(0);
        } catch (e) {
            err = e;
        }
        if (!err.stack) {
            return '(no stack trace available)';
        }
    }
    return err.stack.toString();
}

function stackTrace() {
    var js = jsStackTrace();
    if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
    return demangleAll(js);
}

function ___cxa_allocate_exception(size) {
    return _malloc(size);
}


var ___exception_infos = {};

var ___exception_caught = [];

function ___exception_addRef(ptr) {
    if (!ptr) return;
    var info = ___exception_infos[ptr];
    info.refcount++;
}

function ___exception_deAdjust(adjusted) {
    if (!adjusted || ___exception_infos[adjusted]) return adjusted;
    for (var key in ___exception_infos) {
        var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
        var adj = ___exception_infos[ptr].adjusted;
        var len = adj.length;
        for (var i = 0; i < len; i++) {
            if (adj[i] === adjusted) {
                return ptr;
            }
        }
    }
    return adjusted;
} function ___cxa_begin_catch(ptr) {
    var info = ___exception_infos[ptr];
    if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exceptions--;
    }
    if (info) info.rethrown = false;
    ___exception_caught.push(ptr);
    ___exception_addRef(___exception_deAdjust(ptr));
    return ptr;
}


var ___exception_last = 0; function ___cxa_throw(ptr, type, destructor) {
    ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
    };
    ___exception_last = ptr;
    if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
    } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
    }
    throw ptr;
}

function ___cxa_uncaught_exceptions() {
    return __ZSt18uncaught_exceptionv.uncaught_exceptions;
}

function ___gxx_personality_v0() {
}

function ___lock() { }


function ___setErrNo(value) {
    if (Module['___errno_location']) HEAP32[((Module['___errno_location']()) >> 2)] = value;
    return value;
} function ___map_file(pathname, size) {
    ___setErrNo(1);
    return -1;
}



var PATH = {
    splitPath: function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
    }, normalizeArray: function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === '.') {
                parts.splice(i, 1);
            } else if (last === '..') {
                parts.splice(i, 1);
                up++;
            } else if (up) {
                parts.splice(i, 1);
                up--;
            }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
            for (; up; up--) {
                parts.unshift('..');
            }
        }
        return parts;
    }, normalize: function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function (p) {
            return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
            path = '.';
        }
        if (path && trailingSlash) {
            path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
    }, dirname: function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
            // No dirname whatsoever
            return '.';
        }
        if (dir) {
            // It has a dirname, strip trailing slash
            dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
    }, basename: function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash + 1);
    }, extname: function (path) {
        return PATH.splitPath(path)[3];
    }, join: function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
    }, join2: function (l, r) {
        return PATH.normalize(l + '/' + r);
    }
};


var PATH_FS = {
    resolve: function () {
        var resolvedPath = '',
            resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = (i >= 0) ? arguments[i] : FS.cwd();
            // Skip empty and invalid entries
            if (typeof path !== 'string') {
                throw new TypeError('Arguments to path.resolve must be strings');
            } else if (!path) {
                return ''; // an invalid portion invalidates the whole thing
            }
            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function (p) {
            return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
    }, relative: function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
                if (arr[start] !== '') break;
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
                if (arr[end] !== '') break;
            }
            if (start > end) return [];
            return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
            }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
    }
};

var TTY = {
    ttys: [], init: function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
    }, shutdown: function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
    }, register: function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
    }, stream_ops: {
        open: function (stream) {
            var tty = TTY.ttys[stream.node.rdev];
            if (!tty) {
                throw new FS.ErrnoError(19);
            }
            stream.tty = tty;
            stream.seekable = false;
        }, close: function (stream) {
            // flush any pending line data
            stream.tty.ops.flush(stream.tty);
        }, flush: function (stream) {
            stream.tty.ops.flush(stream.tty);
        }, read: function (stream, buffer, offset, length, pos /* ignored */) {
            if (!stream.tty || !stream.tty.ops.get_char) {
                throw new FS.ErrnoError(6);
            }
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
                var result;
                try {
                    result = stream.tty.ops.get_char(stream.tty);
                } catch (e) {
                    throw new FS.ErrnoError(5);
                }
                if (result === undefined && bytesRead === 0) {
                    throw new FS.ErrnoError(11);
                }
                if (result === null || result === undefined) break;
                bytesRead++;
                buffer[offset + i] = result;
            }
            if (bytesRead) {
                stream.node.timestamp = Date.now();
            }
            return bytesRead;
        }, write: function (stream, buffer, offset, length, pos) {
            if (!stream.tty || !stream.tty.ops.put_char) {
                throw new FS.ErrnoError(6);
            }
            try {
                for (var i = 0; i < length; i++) {
                    stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
                }
            } catch (e) {
                throw new FS.ErrnoError(5);
            }
            if (length) {
                stream.node.timestamp = Date.now();
            }
            return i;
        }
    }, default_tty_ops: {
        get_char: function (tty) {
            if (!tty.input.length) {
                var result = null;
                if (ENVIRONMENT_IS_NODE) {
                    // we will read data by chunks of BUFSIZE
                    var BUFSIZE = 256;
                    var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
                    var bytesRead = 0;

                    var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion

                    var fd = process.stdin.fd;
                    if (isPosixPlatform) {
                        // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                        var usingDevice = false;
                        try {
                            fd = fs.openSync('/dev/stdin', 'r');
                            usingDevice = true;
                        } catch (e) { }
                    }

                    try {
                        bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
                    } catch (e) {
                        // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                        // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                        if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                        else throw e;
                    }

                    if (usingDevice) { fs.closeSync(fd); }
                    if (bytesRead > 0) {
                        result = buf.slice(0, bytesRead).toString('utf-8');
                    } else {
                        result = null;
                    }
                } else
                    if (typeof window != 'undefined' &&
                        typeof window.prompt == 'function') {
                        // Browser.
                        result = window.prompt('Input: ');  // returns null on cancel
                        if (result !== null) {
                            result += '\n';
                        }
                    } else if (typeof readline == 'function') {
                        // Command line.
                        result = readline();
                        if (result !== null) {
                            result += '\n';
                        }
                    }
                if (!result) {
                    return null;
                }
                tty.input = intArrayFromString(result, true);
            }
            return tty.input.shift();
        }, put_char: function (tty, val) {
            if (val === null || val === 10) {
                out(UTF8ArrayToString(tty.output, 0));
                tty.output = [];
            } else {
                if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
            }
        }, flush: function (tty) {
            if (tty.output && tty.output.length > 0) {
                out(UTF8ArrayToString(tty.output, 0));
                tty.output = [];
            }
        }
    }, default_tty1_ops: {
        put_char: function (tty, val) {
            if (val === null || val === 10) {
                err(UTF8ArrayToString(tty.output, 0));
                tty.output = [];
            } else {
                if (val != 0) tty.output.push(val);
            }
        }, flush: function (tty) {
            if (tty.output && tty.output.length > 0) {
                err(UTF8ArrayToString(tty.output, 0));
                tty.output = [];
            }
        }
    }
};

var MEMFS = {
    ops_table: null, mount: function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
    }, createNode: function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
            // no supported
            throw new FS.ErrnoError(1);
        }
        if (!MEMFS.ops_table) {
            MEMFS.ops_table = {
                dir: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek
                    }
                },
                file: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap,
                        msync: MEMFS.stream_ops.msync
                    }
                },
                link: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink
                    },
                    stream: {}
                },
                chrdev: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: FS.chrdev_stream_ops
                }
            };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
            node.node_ops = MEMFS.ops_table.dir.node;
            node.stream_ops = MEMFS.ops_table.dir.stream;
            node.contents = {};
        } else if (FS.isFile(node.mode)) {
            node.node_ops = MEMFS.ops_table.file.node;
            node.stream_ops = MEMFS.ops_table.file.stream;
            node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
            // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
            // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
            // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
            node.contents = null;
        } else if (FS.isLink(node.mode)) {
            node.node_ops = MEMFS.ops_table.link.node;
            node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
            node.node_ops = MEMFS.ops_table.chrdev.node;
            node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
            parent.contents[name] = node;
        }
        return node;
    }, getFileDataAsRegularArray: function (node) {
        if (node.contents && node.contents.subarray) {
            var arr = [];
            for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
            return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
    }, getFileDataAsTypedArray: function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
    }, expandFileStorage: function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
    }, resizeFileStorage: function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
            node.contents = null; // Fully decommit when requesting a resize to zero.
            node.usedBytes = 0;
            return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
            var oldContents = node.contents;
            node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
            if (oldContents) {
                node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
            }
            node.usedBytes = newSize;
            return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
    }, node_ops: {
        getattr: function (node) {
            var attr = {};
            // device numbers reuse inode numbers.
            attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
            attr.ino = node.id;
            attr.mode = node.mode;
            attr.nlink = 1;
            attr.uid = 0;
            attr.gid = 0;
            attr.rdev = node.rdev;
            if (FS.isDir(node.mode)) {
                attr.size = 4096;
            } else if (FS.isFile(node.mode)) {
                attr.size = node.usedBytes;
            } else if (FS.isLink(node.mode)) {
                attr.size = node.link.length;
            } else {
                attr.size = 0;
            }
            attr.atime = new Date(node.timestamp);
            attr.mtime = new Date(node.timestamp);
            attr.ctime = new Date(node.timestamp);
            // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
            //       but this is not required by the standard.
            attr.blksize = 4096;
            attr.blocks = Math.ceil(attr.size / attr.blksize);
            return attr;
        }, setattr: function (node, attr) {
            if (attr.mode !== undefined) {
                node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
                node.timestamp = attr.timestamp;
            }
            if (attr.size !== undefined) {
                MEMFS.resizeFileStorage(node, attr.size);
            }
        }, lookup: function (parent, name) {
            throw FS.genericErrors[2];
        }, mknod: function (parent, name, mode, dev) {
            return MEMFS.createNode(parent, name, mode, dev);
        }, rename: function (old_node, new_dir, new_name) {
            // if we're overwriting a directory at new_name, make sure it's empty.
            if (FS.isDir(old_node.mode)) {
                var new_node;
                try {
                    new_node = FS.lookupNode(new_dir, new_name);
                } catch (e) {
                }
                if (new_node) {
                    for (var i in new_node.contents) {
                        throw new FS.ErrnoError(39);
                    }
                }
            }
            // do the internal rewiring
            delete old_node.parent.contents[old_node.name];
            old_node.name = new_name;
            new_dir.contents[new_name] = old_node;
            old_node.parent = new_dir;
        }, unlink: function (parent, name) {
            delete parent.contents[name];
        }, rmdir: function (parent, name) {
            var node = FS.lookupNode(parent, name);
            for (var i in node.contents) {
                throw new FS.ErrnoError(39);
            }
            delete parent.contents[name];
        }, readdir: function (node) {
            var entries = ['.', '..'];
            for (var key in node.contents) {
                if (!node.contents.hasOwnProperty(key)) {
                    continue;
                }
                entries.push(key);
            }
            return entries;
        }, symlink: function (parent, newname, oldpath) {
            var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
            node.link = oldpath;
            return node;
        }, readlink: function (node) {
            if (!FS.isLink(node.mode)) {
                throw new FS.ErrnoError(22);
            }
            return node.link;
        }
    }, stream_ops: {
        read: function (stream, buffer, offset, length, position) {
            var contents = stream.node.contents;
            if (position >= stream.node.usedBytes) return 0;
            var size = Math.min(stream.node.usedBytes - position, length);
            if (size > 8 && contents.subarray) { // non-trivial, and typed array
                buffer.set(contents.subarray(position, position + size), offset);
            } else {
                for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
            }
            return size;
        }, write: function (stream, buffer, offset, length, position, canOwn) {

            if (!length) return 0;
            var node = stream.node;
            node.timestamp = Date.now();

            if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
                if (canOwn) {
                    node.contents = buffer.subarray(offset, offset + length);
                    node.usedBytes = length;
                    return length;
                } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
                    node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
                    node.usedBytes = length;
                    return length;
                } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
                    node.contents.set(buffer.subarray(offset, offset + length), position);
                    return length;
                }
            }

            // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
            MEMFS.expandFileStorage(node, position + length);
            if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
            else {
                for (var i = 0; i < length; i++) {
                    node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
                }
            }
            node.usedBytes = Math.max(node.usedBytes, position + length);
            return length;
        }, llseek: function (stream, offset, whence) {
            var position = offset;
            if (whence === 1) {  // SEEK_CUR.
                position += stream.position;
            } else if (whence === 2) {  // SEEK_END.
                if (FS.isFile(stream.node.mode)) {
                    position += stream.node.usedBytes;
                }
            }
            if (position < 0) {
                throw new FS.ErrnoError(22);
            }
            return position;
        }, allocate: function (stream, offset, length) {
            MEMFS.expandFileStorage(stream.node, offset + length);
            stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        }, mmap: function (stream, buffer, offset, length, position, prot, flags) {
            if (!FS.isFile(stream.node.mode)) {
                throw new FS.ErrnoError(19);
            }
            var ptr;
            var allocated;
            var contents = stream.node.contents;
            // Only make a new copy when MAP_PRIVATE is specified.
            if (!(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
                // We can't emulate MAP_SHARED when the file is not backed by the buffer
                // we're mapping to (e.g. the HEAP buffer).
                allocated = false;
                ptr = contents.byteOffset;
            } else {
                // Try to avoid unnecessary slices.
                if (position > 0 || position + length < stream.node.usedBytes) {
                    if (contents.subarray) {
                        contents = contents.subarray(position, position + length);
                    } else {
                        contents = Array.prototype.slice.call(contents, position, position + length);
                    }
                }
                allocated = true;
                // malloc() can lead to growing the heap. If targeting the heap, we need to
                // re-acquire the heap buffer object in case growth had occurred.
                var fromHeap = (buffer.buffer == HEAP8.buffer);
                ptr = _malloc(length);
                if (!ptr) {
                    throw new FS.ErrnoError(12);
                }
                (fromHeap ? HEAP8 : buffer).set(contents, ptr);
            }
            return { ptr: ptr, allocated: allocated };
        }, msync: function (stream, buffer, offset, length, mmapFlags) {
            if (!FS.isFile(stream.node.mode)) {
                throw new FS.ErrnoError(19);
            }
            if (mmapFlags & 2) {
                // MAP_PRIVATE calls need not to be synced back to underlying fs
                return 0;
            }

            var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
            // should we check if bytesWritten and length are the same?
            return 0;
        }
    }
};

var IDBFS = {
    dbs: {}, indexedDB: function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
    }, DB_VERSION: 21, DB_STORE_NAME: "FILE_DATA", mount: function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
    }, syncfs: function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function (err, local) {
            if (err) return callback(err);

            IDBFS.getRemoteSet(mount, function (err, remote) {
                if (err) return callback(err);

                var src = populate ? remote : local;
                var dst = populate ? local : remote;

                IDBFS.reconcile(src, dst, callback);
            });
        });
    }, getDB: function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
            return callback(null, db);
        }

        var req;
        try {
            req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
            return callback(e);
        }
        if (!req) {
            return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function (e) {
            var db = e.target.result;
            var transaction = e.target.transaction;

            var fileStore;

            if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
                fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
            } else {
                fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
            }

            if (!fileStore.indexNames.contains('timestamp')) {
                fileStore.createIndex('timestamp', 'timestamp', { unique: false });
            }
        };
        req.onsuccess = function () {
            db = req.result;

            // add to the cache
            IDBFS.dbs[name] = db;
            callback(null, db);
        };
        req.onerror = function (e) {
            callback(this.error);
            e.preventDefault();
        };
    }, getLocalSet: function (mount, callback) {
        var entries = {};

        function isRealDir(p) {
            return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
            return function (p) {
                return PATH.join2(root, p);
            }
        };

        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));

        while (check.length) {
            var path = check.pop();
            var stat;

            try {
                stat = FS.stat(path);
            } catch (e) {
                return callback(e);
            }

            if (FS.isDir(stat.mode)) {
                check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
            }

            entries[path] = { timestamp: stat.mtime };
        }

        return callback(null, { type: 'local', entries: entries });
    }, getRemoteSet: function (mount, callback) {
        var entries = {};

        IDBFS.getDB(mount.mountpoint, function (err, db) {
            if (err) return callback(err);

            try {
                var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
                transaction.onerror = function (e) {
                    callback(this.error);
                    e.preventDefault();
                };

                var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
                var index = store.index('timestamp');

                index.openKeyCursor().onsuccess = function (event) {
                    var cursor = event.target.result;

                    if (!cursor) {
                        return callback(null, { type: 'remote', db: db, entries: entries });
                    }

                    entries[cursor.primaryKey] = { timestamp: cursor.key };

                    cursor.continue();
                };
            } catch (e) {
                return callback(e);
            }
        });
    }, loadLocalEntry: function (path, callback) {
        var stat, node;

        try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
        } catch (e) {
            return callback(e);
        }

        if (FS.isDir(stat.mode)) {
            return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
            // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
            // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
            node.contents = MEMFS.getFileDataAsTypedArray(node);
            return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
            return callback(new Error('node type not supported'));
        }
    }, storeLocalEntry: function (path, entry, callback) {
        try {
            if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
            } else if (FS.isFile(entry.mode)) {
                FS.writeFile(path, entry.contents, { canOwn: true });
            } else {
                return callback(new Error('node type not supported'));
            }

            FS.chmod(path, entry.mode);
            FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
            return callback(e);
        }

        callback(null);
    }, removeLocalEntry: function (path, callback) {
        try {
            var lookup = FS.lookupPath(path);
            var stat = FS.stat(path);

            if (FS.isDir(stat.mode)) {
                FS.rmdir(path);
            } else if (FS.isFile(stat.mode)) {
                FS.unlink(path);
            }
        } catch (e) {
            return callback(e);
        }

        callback(null);
    }, loadRemoteEntry: function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function (event) { callback(null, event.target.result); };
        req.onerror = function (e) {
            callback(this.error);
            e.preventDefault();
        };
    }, storeRemoteEntry: function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function () { callback(null); };
        req.onerror = function (e) {
            callback(this.error);
            e.preventDefault();
        };
    }, removeRemoteEntry: function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function () { callback(null); };
        req.onerror = function (e) {
            callback(this.error);
            e.preventDefault();
        };
    }, reconcile: function (src, dst, callback) {
        var total = 0;

        var create = [];
        Object.keys(src.entries).forEach(function (key) {
            var e = src.entries[key];
            var e2 = dst.entries[key];
            if (!e2 || e.timestamp > e2.timestamp) {
                create.push(key);
                total++;
            }
        });

        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
            var e = dst.entries[key];
            var e2 = src.entries[key];
            if (!e2) {
                remove.push(key);
                total++;
            }
        });

        if (!total) {
            return callback(null);
        }

        var errored = false;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

        function done(err) {
            if (err && !errored) {
                errored = true;
                return callback(err);
            }
        };

        transaction.onerror = function (e) {
            done(this.error);
            e.preventDefault();
        };

        transaction.oncomplete = function (e) {
            if (!errored) {
                callback(null);
            }
        };

        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
            if (dst.type === 'local') {
                IDBFS.loadRemoteEntry(store, path, function (err, entry) {
                    if (err) return done(err);
                    IDBFS.storeLocalEntry(path, entry, done);
                });
            } else {
                IDBFS.loadLocalEntry(path, function (err, entry) {
                    if (err) return done(err);
                    IDBFS.storeRemoteEntry(store, path, entry, done);
                });
            }
        });

        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function (path) {
            if (dst.type === 'local') {
                IDBFS.removeLocalEntry(path, done);
            } else {
                IDBFS.removeRemoteEntry(store, path, done);
            }
        });
    }
};

var NODEFS = {
    isWindows: false, staticInit: function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
            flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
            "1024": flags["O_APPEND"],
            "64": flags["O_CREAT"],
            "128": flags["O_EXCL"],
            "0": flags["O_RDONLY"],
            "2": flags["O_RDWR"],
            "4096": flags["O_SYNC"],
            "512": flags["O_TRUNC"],
            "1": flags["O_WRONLY"]
        };
    }, bufferFrom: function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
    }, mount: function (mount) {
        assert(ENVIRONMENT_HAS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
    }, createNode: function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
            throw new FS.ErrnoError(22);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
    }, getMode: function (path) {
        var stat;
        try {
            stat = fs.lstatSync(path);
            if (NODEFS.isWindows) {
                // Node.js on Windows never represents permission bit 'x', so
                // propagate read bits to execute bits
                stat.mode = stat.mode | ((stat.mode & 292) >> 2);
            }
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno); // syscall errnos are negated, node's are not
        }
        return stat.mode;
    }, realPath: function (node) {
        var parts = [];
        while (node.parent !== node) {
            parts.push(node.name);
            node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
    }, flagsForNode: function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
            if (flags & k) {
                newFlags |= NODEFS.flagsForNodeMap[k];
                flags ^= k;
            }
        }

        if (!flags) {
            return newFlags;
        } else {
            throw new FS.ErrnoError(22);
        }
    }, node_ops: {
        getattr: function (node) {
            var path = NODEFS.realPath(node);
            var stat;
            try {
                stat = fs.lstatSync(path);
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(-e.errno);
            }
            // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
            // See http://support.microsoft.com/kb/140365
            if (NODEFS.isWindows && !stat.blksize) {
                stat.blksize = 4096;
            }
            if (NODEFS.isWindows && !stat.blocks) {
                stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0;
            }
            return {
                dev: stat.dev,
                ino: stat.ino,
                mode: stat.mode,
                nlink: stat.nlink,
                uid: stat.uid,
                gid: stat.gid,
                rdev: stat.rdev,
                size: stat.size,
                atime: stat.atime,
                mtime: stat.mtime,
                ctime: stat.ctime,
                blksize: stat.blksize,
                blocks: stat.blocks
            };
        }, setattr: function (node, attr) {
            var path = NODEFS.realPath(node);
            try {
                if (attr.mode !== undefined) {
                    fs.chmodSync(path, attr.mode);
                    // update the common node structure mode as well
                    node.mode = attr.mode;
                }
                if (attr.timestamp !== undefined) {
                    var date = new Date(attr.timestamp);
                    fs.utimesSync(path, date, date);
                }
                if (attr.size !== undefined) {
                    fs.truncateSync(path, attr.size);
                }
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(-e.errno);
            }
        }, lookup: function (parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            var mode = NODEFS.getMode(path);
            return NODEFS.createNode(parent, name, mode);
        }, mknod: function (parent, name, mode, dev) {
            var node = NODEFS.createNode(parent, name, mode, dev);
            // create the backing node for this in the fs root as well
            var path = NODEFS.realPath(node);
            try {
                if (FS.isDir(node.mode)) {
                    fs.mkdirSync(path, node.mode);
                } else {
                    fs.writeFileSync(path, '', { mode: node.mode });
                }
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(-e.errno);
            }
            return node;
        }, rename: function (oldNode, newDir, newName) {
            var oldPath = NODEFS.realPath(oldNode);
            var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
            try {
                fs.renameSync(oldPath, newPath);
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(-e.errno);
            }
        }, unlink: function (parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            try {
                fs.unlinkSync(path);
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(-e.errno);
            }
        }, rmdir: function (parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            try {
                fs.rmdirSync(path);
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(-e.errno);
            }
        }, readdir: function (node) {
            var path = NODEFS.realPath(node);
            try {
                return fs.readdirSync(path);
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(-e.errno);
            }
        }, symlink: function (parent, newName, oldPath) {
            var newPath = PATH.join2(NODEFS.realPath(parent), newName);
            try {
                fs.symlinkSync(oldPath, newPath);
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(-e.errno);
            }
        }, readlink: function (node) {
            var path = NODEFS.realPath(node);
            try {
                path = fs.readlinkSync(path);
                path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
                return path;
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(-e.errno);
            }
        }
    }, stream_ops: {
        open: function (stream) {
            var path = NODEFS.realPath(stream.node);
            try {
                if (FS.isFile(stream.node.mode)) {
                    stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
                }
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(-e.errno);
            }
        }, close: function (stream) {
            try {
                if (FS.isFile(stream.node.mode) && stream.nfd) {
                    fs.closeSync(stream.nfd);
                }
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(-e.errno);
            }
        }, read: function (stream, buffer, offset, length, position) {
            // Node.js < 6 compatibility: node errors on 0 length reads
            if (length === 0) return 0;
            try {
                return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
            } catch (e) {
                throw new FS.ErrnoError(-e.errno);
            }
        }, write: function (stream, buffer, offset, length, position) {
            try {
                return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
            } catch (e) {
                throw new FS.ErrnoError(-e.errno);
            }
        }, llseek: function (stream, offset, whence) {
            var position = offset;
            if (whence === 1) {  // SEEK_CUR.
                position += stream.position;
            } else if (whence === 2) {  // SEEK_END.
                if (FS.isFile(stream.node.mode)) {
                    try {
                        var stat = fs.fstatSync(stream.nfd);
                        position += stat.size;
                    } catch (e) {
                        throw new FS.ErrnoError(-e.errno);
                    }
                }
            }

            if (position < 0) {
                throw new FS.ErrnoError(22);
            }

            return position;
        }
    }
};

var WORKERFS = {
    DIR_MODE: 16895, FILE_MODE: 33279, reader: null, mount: function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
            // return the parent node, creating subdirs as necessary
            var parts = path.split('/');
            var parent = root;
            for (var i = 0; i < parts.length - 1; i++) {
                var curr = parts.slice(0, i + 1).join('/');
                // Issue 4254: Using curr as a node name will prevent the node
                // from being found in FS.nameTable when FS.open is called on
                // a path which holds a child of this node,
                // given that all FS functions assume node names
                // are just their corresponding parts within their given path,
                // rather than incremental aggregates which include their parent's
                // directories.
                if (!createdParents[curr]) {
                    createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
                }
                parent = createdParents[curr];
            }
            return parent;
        }
        function base(path) {
            var parts = path.split('/');
            return parts[parts.length - 1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function (file) {
            WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function (obj) {
            WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function (pack) {
            pack['metadata'].files.forEach(function (file) {
                var name = file.filename.substr(1); // remove initial slash
                WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
            });
        });
        return root;
    }, createNode: function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
            node.size = contents.size;
            node.contents = contents;
        } else {
            node.size = 4096;
            node.contents = {};
        }
        if (parent) {
            parent.contents[name] = node;
        }
        return node;
    }, node_ops: {
        getattr: function (node) {
            return {
                dev: 1,
                ino: undefined,
                mode: node.mode,
                nlink: 1,
                uid: 0,
                gid: 0,
                rdev: undefined,
                size: node.size,
                atime: new Date(node.timestamp),
                mtime: new Date(node.timestamp),
                ctime: new Date(node.timestamp),
                blksize: 4096,
                blocks: Math.ceil(node.size / 4096),
            };
        }, setattr: function (node, attr) {
            if (attr.mode !== undefined) {
                node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
                node.timestamp = attr.timestamp;
            }
        }, lookup: function (parent, name) {
            throw new FS.ErrnoError(2);
        }, mknod: function (parent, name, mode, dev) {
            throw new FS.ErrnoError(1);
        }, rename: function (oldNode, newDir, newName) {
            throw new FS.ErrnoError(1);
        }, unlink: function (parent, name) {
            throw new FS.ErrnoError(1);
        }, rmdir: function (parent, name) {
            throw new FS.ErrnoError(1);
        }, readdir: function (node) {
            var entries = ['.', '..'];
            for (var key in node.contents) {
                if (!node.contents.hasOwnProperty(key)) {
                    continue;
                }
                entries.push(key);
            }
            return entries;
        }, symlink: function (parent, newName, oldPath) {
            throw new FS.ErrnoError(1);
        }, readlink: function (node) {
            throw new FS.ErrnoError(1);
        }
    }, stream_ops: {
        read: function (stream, buffer, offset, length, position) {
            if (position >= stream.node.size) return 0;
            var chunk = stream.node.contents.slice(position, position + length);
            var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
            buffer.set(new Uint8Array(ab), offset);
            return chunk.size;
        }, write: function (stream, buffer, offset, length, position) {
            throw new FS.ErrnoError(5);
        }, llseek: function (stream, offset, whence) {
            var position = offset;
            if (whence === 1) {  // SEEK_CUR.
                position += stream.position;
            } else if (whence === 2) {  // SEEK_END.
                if (FS.isFile(stream.node.mode)) {
                    position += stream.node.size;
                }
            }
            if (position < 0) {
                throw new FS.ErrnoError(22);
            }
            return position;
        }
    }
}; var FS = {
    root: null, mounts: [], devices: {}, streams: [], nextInode: 1, nameTable: null, currentPath: "/", initialized: false, ignorePermissions: true, trackingDelegate: {}, tracking: { openFlags: { READ: 1, WRITE: 2 } }, ErrnoError: null, genericErrors: {}, filesystems: null, syncFSRequests: 0, handleFSError: function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
    }, lookupPath: function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};

        if (!path) return { path: '', node: null };

        var defaults = {
            follow_mount: true,
            recurse_count: 0
        };
        for (var key in defaults) {
            if (opts[key] === undefined) {
                opts[key] = defaults[key];
            }
        }

        if (opts.recurse_count > 8) {  // max recursive lookup of 8
            throw new FS.ErrnoError(40);
        }

        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function (p) {
            return !!p;
        }), false);

        // start at the root
        var current = FS.root;
        var current_path = '/';

        for (var i = 0; i < parts.length; i++) {
            var islast = (i === parts.length - 1);
            if (islast && opts.parent) {
                // stop resolving
                break;
            }

            current = FS.lookupNode(current, parts[i]);
            current_path = PATH.join2(current_path, parts[i]);

            // jump to the mount's root node if this is a mountpoint
            if (FS.isMountpoint(current)) {
                if (!islast || (islast && opts.follow_mount)) {
                    current = current.mounted.root;
                }
            }

            // by default, lookupPath will not follow a symlink if it is the final path component.
            // setting opts.follow = true will override this behavior.
            if (!islast || opts.follow) {
                var count = 0;
                while (FS.isLink(current.mode)) {
                    var link = FS.readlink(current_path);
                    current_path = PATH_FS.resolve(PATH.dirname(current_path), link);

                    var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
                    current = lookup.node;

                    if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                        throw new FS.ErrnoError(40);
                    }
                }
            }
        }

        return { path: current_path, node: current };
    }, getPath: function (node) {
        var path;
        while (true) {
            if (FS.isRoot(node)) {
                var mount = node.mount.mountpoint;
                if (!path) return mount;
                return mount[mount.length - 1] !== '/' ? mount + '/' + path : mount + path;
            }
            path = path ? node.name + '/' + path : node.name;
            node = node.parent;
        }
    }, hashName: function (parentid, name) {
        var hash = 0;


        for (var i = 0; i < name.length; i++) {
            hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
    }, hashAddNode: function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
    }, hashRemoveNode: function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
            FS.nameTable[hash] = node.name_next;
        } else {
            var current = FS.nameTable[hash];
            while (current) {
                if (current.name_next === node) {
                    current.name_next = node.name_next;
                    break;
                }
                current = current.name_next;
            }
        }
    }, lookupNode: function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
            throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
            var nodeName = node.name;
            if (node.parent.id === parent.id && nodeName === name) {
                return node;
            }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
    }, createNode: function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
            FS.FSNode = function (parent, name, mode, rdev) {
                if (!parent) {
                    parent = this;  // root node sets parent to itself
                }
                this.parent = parent;
                this.mount = parent.mount;
                this.mounted = null;
                this.id = FS.nextInode++;
                this.name = name;
                this.mode = mode;
                this.node_ops = {};
                this.stream_ops = {};
                this.rdev = rdev;
            };

            FS.FSNode.prototype = {};

            // compatibility
            var readMode = 292 | 73;
            var writeMode = 146;

            // NOTE we must use Object.defineProperties instead of individual calls to
            // Object.defineProperty in order to make closure compiler happy
            Object.defineProperties(FS.FSNode.prototype, {
                read: {
                    get: function () { return (this.mode & readMode) === readMode; },
                    set: function (val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
                },
                write: {
                    get: function () { return (this.mode & writeMode) === writeMode; },
                    set: function (val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
                },
                isFolder: {
                    get: function () { return FS.isDir(this.mode); }
                },
                isDevice: {
                    get: function () { return FS.isChrdev(this.mode); }
                }
            });
        }

        var node = new FS.FSNode(parent, name, mode, rdev);

        FS.hashAddNode(node);

        return node;
    }, destroyNode: function (node) {
        FS.hashRemoveNode(node);
    }, isRoot: function (node) {
        return node === node.parent;
    }, isMountpoint: function (node) {
        return !!node.mounted;
    }, isFile: function (mode) {
        return (mode & 61440) === 32768;
    }, isDir: function (mode) {
        return (mode & 61440) === 16384;
    }, isLink: function (mode) {
        return (mode & 61440) === 40960;
    }, isChrdev: function (mode) {
        return (mode & 61440) === 8192;
    }, isBlkdev: function (mode) {
        return (mode & 61440) === 24576;
    }, isFIFO: function (mode) {
        return (mode & 61440) === 4096;
    }, isSocket: function (mode) {
        return (mode & 49152) === 49152;
    }, flagModes: { "r": 0, "rs": 1052672, "r+": 2, "w": 577, "wx": 705, "xw": 705, "w+": 578, "wx+": 706, "xw+": 706, "a": 1089, "ax": 1217, "xa": 1217, "a+": 1090, "ax+": 1218, "xa+": 1218 }, modeStringToFlags: function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
            throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
    }, flagsToPermissionString: function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
            perms += 'w';
        }
        return perms;
    }, nodePermissions: function (node, perms) {
        if (FS.ignorePermissions) {
            return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
            return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
            return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
            return 13;
        }
        return 0;
    }, mayLookup: function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
    }, mayCreate: function (dir, name) {
        try {
            var node = FS.lookupNode(dir, name);
            return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
    }, mayDelete: function (dir, name, isdir) {
        var node;
        try {
            node = FS.lookupNode(dir, name);
        } catch (e) {
            return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
            return err;
        }
        if (isdir) {
            if (!FS.isDir(node.mode)) {
                return 20;
            }
            if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                return 16;
            }
        } else {
            if (FS.isDir(node.mode)) {
                return 21;
            }
        }
        return 0;
    }, mayOpen: function (node, flags) {
        if (!node) {
            return 2;
        }
        if (FS.isLink(node.mode)) {
            return 40;
        } else if (FS.isDir(node.mode)) {
            if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
                (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
                return 21;
            }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
    }, MAX_OPEN_FDS: 4096, nextfd: function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
            if (!FS.streams[fd]) {
                return fd;
            }
        }
        throw new FS.ErrnoError(24);
    }, getStream: function (fd) {
        return FS.streams[fd];
    }, createStream: function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
            FS.FSStream = function () { };
            FS.FSStream.prototype = {};
            // compatibility
            Object.defineProperties(FS.FSStream.prototype, {
                object: {
                    get: function () { return this.node; },
                    set: function (val) { this.node = val; }
                },
                isRead: {
                    get: function () { return (this.flags & 2097155) !== 1; }
                },
                isWrite: {
                    get: function () { return (this.flags & 2097155) !== 0; }
                },
                isAppend: {
                    get: function () { return (this.flags & 1024); }
                }
            });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
            newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
    }, closeStream: function (fd) {
        FS.streams[fd] = null;
    }, chrdev_stream_ops: {
        open: function (stream) {
            var device = FS.getDevice(stream.node.rdev);
            // override node's stream ops with the device's
            stream.stream_ops = device.stream_ops;
            // forward the open call
            if (stream.stream_ops.open) {
                stream.stream_ops.open(stream);
            }
        }, llseek: function () {
            throw new FS.ErrnoError(29);
        }
    }, major: function (dev) {
        return ((dev) >> 8);
    }, minor: function (dev) {
        return ((dev) & 0xff);
    }, makedev: function (ma, mi) {
        return ((ma) << 8 | (mi));
    }, registerDevice: function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
    }, getDevice: function (dev) {
        return FS.devices[dev];
    }, getMounts: function (mount) {
        var mounts = [];
        var check = [mount];

        while (check.length) {
            var m = check.pop();

            mounts.push(m);

            check.push.apply(check, m.mounts);
        }

        return mounts;
    }, syncfs: function (populate, callback) {
        if (typeof (populate) === 'function') {
            callback = populate;
            populate = false;
        }

        FS.syncFSRequests++;

        if (FS.syncFSRequests > 1) {
            console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }

        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;

        function doCallback(err) {
            FS.syncFSRequests--;
            return callback(err);
        }

        function done(err) {
            if (err) {
                if (!done.errored) {
                    done.errored = true;
                    return doCallback(err);
                }
                return;
            }
            if (++completed >= mounts.length) {
                doCallback(null);
            }
        };

        // sync all mounts
        mounts.forEach(function (mount) {
            if (!mount.type.syncfs) {
                return done(null);
            }
            mount.type.syncfs(mount, populate, done);
        });
    }, mount: function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;

        if (root && FS.root) {
            throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
            var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

            mountpoint = lookup.path;  // use the absolute path
            node = lookup.node;

            if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(16);
            }

            if (!FS.isDir(node.mode)) {
                throw new FS.ErrnoError(20);
            }
        }

        var mount = {
            type: type,
            opts: opts,
            mountpoint: mountpoint,
            mounts: []
        };

        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;

        if (root) {
            FS.root = mountRoot;
        } else if (node) {
            // set as a mountpoint
            node.mounted = mount;

            // add the new mount to the current mount's children
            if (node.mount) {
                node.mount.mounts.push(mount);
            }
        }

        return mountRoot;
    }, unmount: function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

        if (!FS.isMountpoint(lookup.node)) {
            throw new FS.ErrnoError(22);
        }

        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);

        Object.keys(FS.nameTable).forEach(function (hash) {
            var current = FS.nameTable[hash];

            while (current) {
                var next = current.name_next;

                if (mounts.indexOf(current.mount) !== -1) {
                    FS.destroyNode(current);
                }

                current = next;
            }
        });

        // no longer a mountpoint
        node.mounted = null;

        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
    }, lookup: function (parent, name) {
        return parent.node_ops.lookup(parent, name);
    }, mknod: function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
            throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
            throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
    }, create: function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
    }, mkdir: function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
    }, mkdirTree: function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
            if (!dirs[i]) continue;
            d += '/' + dirs[i];
            try {
                FS.mkdir(d, mode);
            } catch (e) {
                if (e.errno != 17) throw e;
            }
        }
    }, mkdev: function (path, mode, dev) {
        if (typeof (dev) === 'undefined') {
            dev = mode;
            mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
    }, symlink: function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
            throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
            throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
            throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
    }, rename: function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
            lookup = FS.lookupPath(old_path, { parent: true });
            old_dir = lookup.node;
            lookup = FS.lookupPath(new_path, { parent: true });
            new_dir = lookup.node;
        } catch (e) {
            throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
            throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
            throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
            throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
            new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
            // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
            return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
            FS.mayDelete(new_dir, new_name, isdir) :
            FS.mayCreate(new_dir, new_name);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
            throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
            throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
            err = FS.nodePermissions(old_dir, 'w');
            if (err) {
                throw new FS.ErrnoError(err);
            }
        }
        try {
            if (FS.trackingDelegate['willMovePath']) {
                FS.trackingDelegate['willMovePath'](old_path, new_path);
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
            old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
            throw e;
        } finally {
            // add the node back to the hash (in case node_ops.rename
            // changed its name)
            FS.hashAddNode(old_node);
        }
        try {
            if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch (e) {
            console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
        }
    }, rmdir: function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
            throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
        }
        try {
            if (FS.trackingDelegate['willDeletePath']) {
                FS.trackingDelegate['willDeletePath'](path);
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
            if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch (e) {
            console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
        }
    }, readdir: function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
            throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
    }, unlink: function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
            // According to POSIX, we should map EISDIR to EPERM, but
            // we instead do what Linux does (and we must, as we use
            // the musl linux libc).
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
            throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
        }
        try {
            if (FS.trackingDelegate['willDeletePath']) {
                FS.trackingDelegate['willDeletePath'](path);
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
            if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch (e) {
            console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
        }
    }, readlink: function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
            throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
            throw new FS.ErrnoError(22);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
    }, stat: function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
            throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
            throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
    }, lstat: function (path) {
        return FS.stat(path, true);
    }, chmod: function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            node = lookup.node;
        } else {
            node = path;
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
            mode: (mode & 4095) | (node.mode & ~4095),
            timestamp: Date.now()
        });
    }, lchmod: function (path, mode) {
        FS.chmod(path, mode, true);
    }, fchmod: function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
    }, chown: function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            node = lookup.node;
        } else {
            node = path;
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
            timestamp: Date.now()
            // we ignore the uid / gid for now
        });
    }, lchown: function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
    }, fchown: function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
    }, truncate: function (path, len) {
        if (len < 0) {
            throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
            var lookup = FS.lookupPath(path, { follow: true });
            node = lookup.node;
        } else {
            node = path;
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
            throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
            throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
            throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
            size: len,
            timestamp: Date.now()
        });
    }, ftruncate: function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
    }, utime: function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
            timestamp: Math.max(atime, mtime)
        });
    }, open: function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
            throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
            mode = (mode & 4095) | 32768;
        } else {
            mode = 0;
        }
        var node;
        if (typeof path === 'object') {
            node = path;
        } else {
            path = PATH.normalize(path);
            try {
                var lookup = FS.lookupPath(path, {
                    follow: !(flags & 131072)
                });
                node = lookup.node;
            } catch (e) {
                // ignore
            }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
            if (node) {
                // if O_CREAT and O_EXCL are set, error out if the node already exists
                if ((flags & 128)) {
                    throw new FS.ErrnoError(17);
                }
            } else {
                // node doesn't exist, try to create it
                node = FS.mknod(path, mode, 0);
                created = true;
            }
        }
        if (!node) {
            throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
            flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
            var err = FS.mayOpen(node, flags);
            if (err) {
                throw new FS.ErrnoError(err);
            }
        }
        // do truncation if necessary
        if ((flags & 512)) {
            FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);

        // register the stream with the filesystem
        var stream = FS.createStream({
            node: node,
            path: FS.getPath(node),  // we want the absolute path to the node
            flags: flags,
            seekable: true,
            position: 0,
            stream_ops: node.stream_ops,
            // used by the file family libc calls (fopen, fwrite, ferror, etc.)
            ungotten: [],
            error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
            if (!FS.readFiles) FS.readFiles = {};
            if (!(path in FS.readFiles)) {
                FS.readFiles[path] = 1;
                console.log("FS.trackingDelegate error on read file: " + path);
            }
        }
        try {
            if (FS.trackingDelegate['onOpenFile']) {
                var trackingFlags = 0;
                if ((flags & 2097155) !== 1) {
                    trackingFlags |= FS.tracking.openFlags.READ;
                }
                if ((flags & 2097155) !== 0) {
                    trackingFlags |= FS.tracking.openFlags.WRITE;
                }
                FS.trackingDelegate['onOpenFile'](path, trackingFlags);
            }
        } catch (e) {
            console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
        }
        return stream;
    }, close: function (stream) {
        if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
            if (stream.stream_ops.close) {
                stream.stream_ops.close(stream);
            }
        } catch (e) {
            throw e;
        } finally {
            FS.closeStream(stream.fd);
        }
        stream.fd = null;
    }, isClosed: function (stream) {
        return stream.fd === null;
    }, llseek: function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
            throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
            throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
    }, read: function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
            throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
            throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
            position = stream.position;
        } else if (!stream.seekable) {
            throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
    }, write: function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
            throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
            throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
            // seek to the end before writing in append mode
            FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
            position = stream.position;
        } else if (!stream.seekable) {
            throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
            if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch (e) {
            console.log("FS.trackingDelegate['onWriteToFile']('" + stream.path + "') threw an exception: " + e.message);
        }
        return bytesWritten;
    }, allocate: function (stream, offset, length) {
        if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
            throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
            throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
    }, mmap: function (stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
            throw new FS.ErrnoError(13);
        }
        if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
            throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
    }, msync: function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
            return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
    }, munmap: function (stream) {
        return 0;
    }, ioctl: function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
            throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
    }, readFile: function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
            throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
            ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
            ret = buf;
        }
        FS.close(stream);
        return ret;
    }, writeFile: function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
            var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
            var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
            FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
            FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
            throw new Error('Unsupported data type');
        }
        FS.close(stream);
    }, cwd: function () {
        return FS.currentPath;
    }, chdir: function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
            throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
            throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
            throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
    }, createDefaultDirectories: function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
    }, createDefaultDevices: function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
            read: function () { return 0; },
            write: function (stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
            // for modern web browsers
            var randomBuffer = new Uint8Array(1);
            random_device = function () { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
            if (ENVIRONMENT_IS_NODE) {
                // for nodejs with or without crypto support included
                try {
                    var crypto_module = require('crypto');
                    // nodejs has crypto support
                    random_device = function () { return crypto_module['randomBytes'](1)[0]; };
                } catch (e) {
                    // nodejs doesn't have crypto support
                }
            } else { }
        if (!random_device) {
            // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
            random_device = function () { abort("random_device"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
    }, createSpecialDirectories: function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
            mount: function () {
                var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
                node.node_ops = {
                    lookup: function (parent, name) {
                        var fd = +name;
                        var stream = FS.getStream(fd);
                        if (!stream) throw new FS.ErrnoError(9);
                        var ret = {
                            parent: null,
                            mount: { mountpoint: 'fake' },
                            node_ops: { readlink: function () { return stream.path } }
                        };
                        ret.parent = ret; // make it look like a simple root node
                        return ret;
                    }
                };
                return node;
            }
        }, {}, '/proc/self/fd');
    }, createStandardStreams: function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops

        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
            FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
            FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
            FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
            FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
            FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
            FS.symlink('/dev/tty1', '/dev/stderr');
        }

        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
    }, ensureErrnoError: function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
            this.node = node;
            this.setErrno = function (errno) {
                this.errno = errno;
            };
            this.setErrno(errno);
            this.message = 'FS error';

        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function (code) {
            FS.genericErrors[code] = new FS.ErrnoError(code);
            FS.genericErrors[code].stack = '<generic error, no stack>';
        });
    }, staticInit: function () {
        FS.ensureErrnoError();

        FS.nameTable = new Array(4096);

        FS.mount(MEMFS, {}, '/');

        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();

        FS.filesystems = {
            'MEMFS': MEMFS,
            'IDBFS': IDBFS,
            'NODEFS': NODEFS,
            'WORKERFS': WORKERFS,
        };
    }, init: function (input, output, error) {
        FS.init.initialized = true;

        FS.ensureErrnoError();

        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];

        FS.createStandardStreams();
    }, quit: function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
            var stream = FS.streams[i];
            if (!stream) {
                continue;
            }
            FS.close(stream);
        }
    }, getMode: function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
    }, joinPath: function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
    }, absolutePath: function (relative, base) {
        return PATH_FS.resolve(base, relative);
    }, standardizePath: function (path) {
        return PATH.normalize(path);
    }, findObject: function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
            return ret.object;
        } else {
            ___setErrNo(ret.error);
            return null;
        }
    }, analyzePath: function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
            var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
            path = lookup.path;
        } catch (e) {
        }
        var ret = {
            isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
            parentExists: false, parentPath: null, parentObject: null
        };
        try {
            var lookup = FS.lookupPath(path, { parent: true });
            ret.parentExists = true;
            ret.parentPath = lookup.path;
            ret.parentObject = lookup.node;
            ret.name = PATH.basename(path);
            lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
            ret.exists = true;
            ret.path = lookup.path;
            ret.object = lookup.node;
            ret.name = lookup.node.name;
            ret.isRoot = lookup.path === '/';
        } catch (e) {
            ret.error = e.errno;
        };
        return ret;
    }, createFolder: function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
    }, createPath: function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
            var part = parts.pop();
            if (!part) continue;
            var current = PATH.join2(parent, part);
            try {
                FS.mkdir(current);
            } catch (e) {
                // ignore EEXIST
            }
            parent = current;
        }
        return current;
    }, createFile: function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
    }, createDataFile: function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
            if (typeof data === 'string') {
                var arr = new Array(data.length);
                for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
                data = arr;
            }
            // make sure we can write to the file
            FS.chmod(node, mode | 146);
            var stream = FS.open(node, 'w');
            FS.write(stream, data, 0, data.length, 0, canOwn);
            FS.close(stream);
            FS.chmod(node, mode);
        }
        return node;
    }, createDevice: function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
            open: function (stream) {
                stream.seekable = false;
            },
            close: function (stream) {
                // flush any pending line data
                if (output && output.buffer && output.buffer.length) {
                    output(10);
                }
            },
            read: function (stream, buffer, offset, length, pos /* ignored */) {
                var bytesRead = 0;
                for (var i = 0; i < length; i++) {
                    var result;
                    try {
                        result = input();
                    } catch (e) {
                        throw new FS.ErrnoError(5);
                    }
                    if (result === undefined && bytesRead === 0) {
                        throw new FS.ErrnoError(11);
                    }
                    if (result === null || result === undefined) break;
                    bytesRead++;
                    buffer[offset + i] = result;
                }
                if (bytesRead) {
                    stream.node.timestamp = Date.now();
                }
                return bytesRead;
            },
            write: function (stream, buffer, offset, length, pos) {
                for (var i = 0; i < length; i++) {
                    try {
                        output(buffer[offset + i]);
                    } catch (e) {
                        throw new FS.ErrnoError(5);
                    }
                }
                if (length) {
                    stream.node.timestamp = Date.now();
                }
                return i;
            }
        });
        return FS.mkdev(path, mode, dev);
    }, createLink: function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
    }, forceLoadFile: function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
            throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
            // Command-line.
            try {
                // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
                //          read() will try to parse UTF8.
                obj.contents = intArrayFromString(read_(obj.url), true);
                obj.usedBytes = obj.contents.length;
            } catch (e) {
                success = false;
            }
        } else {
            throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
    }, createLazyFile: function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length - 1 || idx < 0) {
                return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = (idx / this.chunkSize) | 0;
            return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";

            var chunkSize = 1024 * 1024; // Chunk size in bytes

            if (!hasByteServing) chunkSize = datalength;

            // Function to get a range from the remote URL.
            var doXHR = (function (from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");

                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);

                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                    xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }

                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                    return new Uint8Array(xhr.response || []);
                } else {
                    return intArrayFromString(xhr.responseText || '', true);
                }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function (chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum + 1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength - 1); // if datalength-1 is selected, this is the last block
                if (typeof (lazyArray.chunks[chunkNum]) === "undefined") {
                    lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof (lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
            });

            if (usesGzip || !datalength) {
                // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
                chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
                datalength = this.getter(0).length;
                chunkSize = datalength;
                console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
            }

            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
            if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
            var lazyArray = new LazyUint8Array();
            Object.defineProperties(lazyArray, {
                length: {
                    get: function () {
                        if (!this.lengthKnown) {
                            this.cacheLength();
                        }
                        return this._length;
                    }
                },
                chunkSize: {
                    get: function () {
                        if (!this.lengthKnown) {
                            this.cacheLength();
                        }
                        return this._chunkSize;
                    }
                }
            });

            var properties = { isDevice: false, contents: lazyArray };
        } else {
            var properties = { isDevice: false, url: url };
        }

        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
            node.contents = properties.contents;
        } else if (properties.url) {
            node.contents = null;
            node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
            usedBytes: {
                get: function () { return this.contents.length; }
            }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function (key) {
            var fn = node.stream_ops[key];
            stream_ops[key] = function forceLoadLazyFile() {
                if (!FS.forceLoadFile(node)) {
                    throw new FS.ErrnoError(5);
                }
                return fn.apply(null, arguments);
            };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
            if (!FS.forceLoadFile(node)) {
                throw new FS.ErrnoError(5);
            }
            var contents = stream.node.contents;
            if (position >= contents.length)
                return 0;
            var size = Math.min(contents.length - position, length);
            if (contents.slice) { // normal array
                for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents[position + i];
                }
            } else {
                for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
                    buffer[offset + i] = contents.get(position + i);
                }
            }
            return size;
        };
        node.stream_ops = stream_ops;
        return node;
    }, createPreloadedFile: function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
            function finish(byteArray) {
                if (preFinish) preFinish();
                if (!dontCreateFile) {
                    FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
                }
                if (onload) onload();
                removeRunDependency(dep);
            }
            var handled = false;
            Module['preloadPlugins'].forEach(function (plugin) {
                if (handled) return;
                if (plugin['canHandle'](fullname)) {
                    plugin['handle'](byteArray, fullname, finish, function () {
                        if (onerror) onerror();
                        removeRunDependency(dep);
                    });
                    handled = true;
                }
            });
            if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
            Browser.asyncLoad(url, function (byteArray) {
                processData(byteArray);
            }, onerror);
        } else {
            processData(url);
        }
    }, indexedDB: function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
    }, DB_NAME: function () {
        return 'EM_FS_' + window.location.pathname;
    }, DB_VERSION: 20, DB_STORE_NAME: "FILE_DATA", saveFilesToDB: function (paths, onload, onerror) {
        onload = onload || function () { };
        onerror = onerror || function () { };
        var indexedDB = FS.indexedDB();
        try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
            return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
            console.log('creating db');
            var db = openRequest.result;
            db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
                if (fail == 0) onload(); else onerror();
            }
            paths.forEach(function (path) {
                var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
                putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
            });
            transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
    }, loadFilesFromDB: function (paths, onload, onerror) {
        onload = onload || function () { };
        onerror = onerror || function () { };
        var indexedDB = FS.indexedDB();
        try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
            return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            try {
                var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
            } catch (e) {
                onerror(e);
                return;
            }
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
                if (fail == 0) onload(); else onerror();
            }
            paths.forEach(function (path) {
                var getRequest = files.get(path);
                getRequest.onsuccess = function getRequest_onsuccess() {
                    if (FS.analyzePath(path).exists) {
                        FS.unlink(path);
                    }
                    FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                    ok++;
                    if (ok + fail == total) finish();
                };
                getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
            });
            transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
    }
}; var SYSCALLS = {
    DEFAULT_POLLMASK: 5, mappings: {}, umask: 511, calculateAt: function (dirfd, path) {
        if (path[0] !== '/') {
            // relative path
            var dir;
            if (dirfd === -100) {
                dir = FS.cwd();
            } else {
                var dirstream = FS.getStream(dirfd);
                if (!dirstream) throw new FS.ErrnoError(9);
                dir = dirstream.path;
            }
            path = PATH.join2(dir, path);
        }
        return path;
    }, doStat: function (func, path, buf) {
        try {
            var stat = func(path);
        } catch (e) {
            if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
                // an error occurred while trying to look up the path; we should just report ENOTDIR
                return -20;
            }
            throw e;
        }
        HEAP32[((buf) >> 2)] = stat.dev;
        HEAP32[(((buf) + (4)) >> 2)] = 0;
        HEAP32[(((buf) + (8)) >> 2)] = stat.ino;
        HEAP32[(((buf) + (12)) >> 2)] = stat.mode;
        HEAP32[(((buf) + (16)) >> 2)] = stat.nlink;
        HEAP32[(((buf) + (20)) >> 2)] = stat.uid;
        HEAP32[(((buf) + (24)) >> 2)] = stat.gid;
        HEAP32[(((buf) + (28)) >> 2)] = stat.rdev;
        HEAP32[(((buf) + (32)) >> 2)] = 0;
        (tempI64 = [stat.size >>> 0, (tempDouble = stat.size, (+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble) / 4294967296.0))), 4294967295.0)) | 0) >>> 0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296.0))))) >>> 0) : 0)], HEAP32[(((buf) + (40)) >> 2)] = tempI64[0], HEAP32[(((buf) + (44)) >> 2)] = tempI64[1]);
        HEAP32[(((buf) + (48)) >> 2)] = 4096;
        HEAP32[(((buf) + (52)) >> 2)] = stat.blocks;
        HEAP32[(((buf) + (56)) >> 2)] = (stat.atime.getTime() / 1000) | 0;
        HEAP32[(((buf) + (60)) >> 2)] = 0;
        HEAP32[(((buf) + (64)) >> 2)] = (stat.mtime.getTime() / 1000) | 0;
        HEAP32[(((buf) + (68)) >> 2)] = 0;
        HEAP32[(((buf) + (72)) >> 2)] = (stat.ctime.getTime() / 1000) | 0;
        HEAP32[(((buf) + (76)) >> 2)] = 0;
        (tempI64 = [stat.ino >>> 0, (tempDouble = stat.ino, (+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble) / 4294967296.0))), 4294967295.0)) | 0) >>> 0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296.0))))) >>> 0) : 0)], HEAP32[(((buf) + (80)) >> 2)] = tempI64[0], HEAP32[(((buf) + (84)) >> 2)] = tempI64[1]);
        return 0;
    }, doMsync: function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
    }, doMkdir: function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length - 1] === '/') path = path.substr(0, path.length - 1);
        FS.mkdir(path, mode, 0);
        return 0;
    }, doMknod: function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
            case 32768:
            case 8192:
            case 24576:
            case 4096:
            case 49152:
                break;
            default: return -22;
        }
        FS.mknod(path, mode, dev);
        return 0;
    }, doReadlink: function (path, buf, bufsize) {
        if (bufsize <= 0) return -22;
        var ret = FS.readlink(path);

        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf + len];
        stringToUTF8(ret, buf, bufsize + 1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf + len] = endChar;

        return len;
    }, doAccess: function (path, amode) {
        if (amode & ~7) {
            // need a valid mode
            return -22;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
            return -2;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
            return -13;
        }
        return 0;
    }, doDup: function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
    }, doReadv: function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[(((iov) + (i * 8)) >> 2)];
            var len = HEAP32[(((iov) + (i * 8 + 4)) >> 2)];
            var curr = FS.read(stream, HEAP8, ptr, len, offset);
            if (curr < 0) return -1;
            ret += curr;
            if (curr < len) break; // nothing more to read
        }
        return ret;
    }, doWritev: function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[(((iov) + (i * 8)) >> 2)];
            var len = HEAP32[(((iov) + (i * 8 + 4)) >> 2)];
            var curr = FS.write(stream, HEAP8, ptr, len, offset);
            if (curr < 0) return -1;
            ret += curr;
        }
        return ret;
    }, varargs: 0, get: function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs) - (4)) >> 2)];
        return ret;
    }, getStr: function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
    }, getStreamFromFD: function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(9);
        return stream;
    }, get64: function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        return low;
    }, getZero: function () {
        SYSCALLS.get();
    }
}; function ___syscall140(which, varargs) {
SYSCALLS.varargs = varargs;
    try {
        // llseek
        var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
        var HIGH_OFFSET = 0x100000000; // 2^32
        // use an unsigned operator on low and shift high by 32-bits
        var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);

        var DOUBLE_LIMIT = 0x20000000000000; // 2^53
        // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
        if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
            return -75;
        }

        FS.llseek(stream, offset, whence);
        (tempI64 = [stream.position >>> 0, (tempDouble = stream.position, (+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble) / 4294967296.0))), 4294967295.0)) | 0) >>> 0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296.0))))) >>> 0) : 0)], HEAP32[((result) >> 2)] = tempI64[0], HEAP32[(((result) + (4)) >> 2)] = tempI64[1]);
        if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
        return 0;
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
    }
}

function ___syscall145(which, varargs) {
SYSCALLS.varargs = varargs;
    try {
        // readv
        var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
        return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
    }
}

function ___syscall146(which, varargs) {
SYSCALLS.varargs = varargs;
    try {
        // writev
        var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
        return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
    }
}

function ___syscall221(which, varargs) {
SYSCALLS.varargs = varargs;
    try {
        // fcntl64
        var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
        switch (cmd) {
            case 0: {
                var arg = SYSCALLS.get();
                if (arg < 0) {
                    return -22;
                }
                var newStream;
                newStream = FS.open(stream.path, stream.flags, 0, arg);
                return newStream.fd;
            }
            case 1:
            case 2:
                return 0;  // FD_CLOEXEC makes no sense for a single process.
            case 3:
                return stream.flags;
            case 4: {
                var arg = SYSCALLS.get();
                stream.flags |= arg;
                return 0;
            }
            case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {

                    var arg = SYSCALLS.get();
                    var offset = 0;
                    // We're always unlocked.
                    HEAP16[(((arg) + (offset)) >> 1)] = 2;
                    return 0;
                }
            case 13:
            case 14:
                /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
                /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */


                return 0; // Pretend that the locking is successful.
            case 16:
            case 8:
                return -22; // These are for sockets. We don't have them fully implemented yet.
            case 9:
                // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
                ___setErrNo(22);
                return -1;
            default: {
                return -22;
            }
        }
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
    }
}

function ___syscall5(which, varargs) {
SYSCALLS.varargs = varargs;
    try {
        // open
        var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
        var stream = FS.open(pathname, flags, mode);
        return stream.fd;
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
    }
}

function ___syscall54(which, varargs) {
SYSCALLS.varargs = varargs;
    try {
        // ioctl
        var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
        switch (op) {
            case 21509:
            case 21505: {
                if (!stream.tty) return -25;
                return 0;
            }
            case 21510:
            case 21511:
            case 21512:
            case 21506:
            case 21507:
            case 21508: {
                if (!stream.tty) return -25;
                return 0; // no-op, not actually adjusting terminal settings
            }
            case 21519: {
                if (!stream.tty) return -25;
                var argp = SYSCALLS.get();
                HEAP32[((argp) >> 2)] = 0;
                return 0;
            }
            case 21520: {
                if (!stream.tty) return -25;
                return -22; // not supported
            }
            case 21531: {
                var argp = SYSCALLS.get();
                return FS.ioctl(stream, op, argp);
            }
            case 21523: {
                // TODO: in theory we should write to the winsize struct that gets
                // passed in, but for now musl doesn't read anything on it
                if (!stream.tty) return -25;
                return 0;
            }
            case 21524: {
                // TODO: technically, this ioctl call should change the window size.
                // but, since emscripten doesn't have any concept of a terminal window
                // yet, we'll just silently throw it away as we do TIOCGWINSZ
                if (!stream.tty) return -25;
                return 0;
            }
            default: abort('bad ioctl syscall ' + op);
        }
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
    }
}

function ___syscall6(which, varargs) {
SYSCALLS.varargs = varargs;
    try {
        // close
        var stream = SYSCALLS.getStreamFromFD();
        FS.close(stream);
        return 0;
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
    }
}


function __emscripten_syscall_munmap(addr, len) {
    if (addr === -1 || len === 0) {
        return -22;
    }
    // TODO: support unmmap'ing parts of allocations
    var info = SYSCALLS.mappings[addr];
    if (!info) return 0;
    if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags);
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
            _free(info.malloc);
        }
    }
    return 0;
} function ___syscall91(which, varargs) {
SYSCALLS.varargs = varargs;
    try {
        // munmap
        var addr = SYSCALLS.get(), len = SYSCALLS.get();
        return __emscripten_syscall_munmap(addr, len);
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
    }
}

function ___unlock() { }


function getShiftFromSize(size) {
    switch (size) {
        case 1: return 0;
        case 2: return 1;
        case 4: return 2;
        case 8: return 3;
        default:
            throw new TypeError('Unknown type size: ' + size);
    }
}



function embind_init_charCodes() {
    var codes = new Array(256);
    for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
    }
    embind_charCodes = codes;
} var embind_charCodes = undefined; function readLatin1String(ptr) {
    var ret = "";
    var c = ptr;
    while (HEAPU8[c]) {
        ret += embind_charCodes[HEAPU8[c++]];
    }
    return ret;
}


var awaitingDependencies = {};

var registeredTypes = {};

var typeDependencies = {};






var char_0 = 48;

var char_9 = 57; function makeLegalFunctionName(name) {
    if (undefined === name) {
        return '_unknown';
    }
    name = name.replace(/[^a-zA-Z0-9_]/g, '$');
    var f = name.charCodeAt(0);
    if (f >= char_0 && f <= char_9) {
        return '_' + name;
    } else {
        return name;
    }
} function createNamedFunction(name, body) {
    name = makeLegalFunctionName(name);
    /*jshint evil:true*/
    return new Function(
        "body",
        "return function " + name + "() {\n" +
        "    \"use strict\";" +
        "    return body.apply(this, arguments);\n" +
        "};\n"
    )(body);
} function extendError(baseErrorType, errorName) {
    var errorClass = createNamedFunction(errorName, function (message) {
        this.name = errorName;
        this.message = message;

        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
            this.stack = this.toString() + '\n' +
                stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
    });
    errorClass.prototype = Object.create(baseErrorType.prototype);
    errorClass.prototype.constructor = errorClass;
    errorClass.prototype.toString = function () {
        if (this.message === undefined) {
            return this.name;
        } else {
            return this.name + ': ' + this.message;
        }
    };

    return errorClass;
} var BindingError = undefined; function throwBindingError(message) {
    throw new BindingError(message);
}



var InternalError = undefined; function throwInternalError(message) {
    throw new InternalError(message);
} function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
    myTypes.forEach(function (type) {
        typeDependencies[type] = dependentTypes;
    });

    function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
            throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
            registerType(myTypes[i], myTypeConverters[i]);
        }
    }

    var typeConverters = new Array(dependentTypes.length);
    var unregisteredTypes = [];
    var registered = 0;
    dependentTypes.forEach(function (dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
            typeConverters[i] = registeredTypes[dt];
        } else {
            unregisteredTypes.push(dt);
            if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
            }
            awaitingDependencies[dt].push(function () {
                typeConverters[i] = registeredTypes[dt];
                ++registered;
                if (registered === unregisteredTypes.length) {
                    onComplete(typeConverters);
                }
            });
        }
    });
    if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
    }
} function registerType(rawType, registeredInstance, options) {
    options = options || {};

    if (!('argPackAdvance' in registeredInstance)) {
        throw new TypeError('registerType registeredInstance requires argPackAdvance');
    }

    var name = registeredInstance.name;
    if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
    }
    if (registeredTypes.hasOwnProperty(rawType)) {
        if (options.ignoreDuplicateRegistrations) {
            return;
        } else {
            throwBindingError("Cannot register type '" + name + "' twice");
        }
    }

    registeredTypes[rawType] = registeredInstance;
    delete typeDependencies[rawType];

    if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function (cb) {
            cb();
        });
    }
} function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
    var shift = getShiftFromSize(size);

    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function (wt) {
            // ambiguous emscripten ABI: sometimes return values are
            // true or false, and sometimes integers (0 or 1)
            return !!wt;
        },
        'toWireType': function (destructors, o) {
            return o ? trueValue : falseValue;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': function (pointer) {
            // TODO: if heap is fixed (like in asm.js) this could be executed outside
            var heap;
            if (size === 1) {
                heap = HEAP8;
            } else if (size === 2) {
                heap = HEAP16;
            } else if (size === 4) {
                heap = HEAP32;
            } else {
                throw new TypeError("Unknown boolean type size: " + name);
            }
            return this['fromWireType'](heap[pointer >> shift]);
        },
        destructorFunction: null, // This type does not need a destructor
    });
}




function ClassHandle_isAliasOf(other) {
    if (!(this instanceof ClassHandle)) {
        return false;
    }
    if (!(other instanceof ClassHandle)) {
        return false;
    }

    var leftClass = this.$$.ptrType.registeredClass;
    var left = this.$$.ptr;
    var rightClass = other.$$.ptrType.registeredClass;
    var right = other.$$.ptr;

    while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
    }

    while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
    }

    return leftClass === rightClass && left === right;
}


function shallowCopyInternalPointer(o) {
    return {
        count: o.count,
        deleteScheduled: o.deleteScheduled,
        preservePointerOnDelete: o.preservePointerOnDelete,
        ptr: o.ptr,
        ptrType: o.ptrType,
        smartPtr: o.smartPtr,
        smartPtrType: o.smartPtrType,
    };
}

function throwInstanceAlreadyDeleted(obj) {
    function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
    }
    throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
}


var finalizationGroup = false;

function detachFinalizer(handle) { }


function runDestructor($$) {
    if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
    } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
    }
} function releaseClassHandle($$) {
    $$.count.value -= 1;
    var toDelete = 0 === $$.count.value;
    if (toDelete) {
        runDestructor($$);
    }
} function attachFinalizer(handle) {
    if ('undefined' === typeof FinalizationGroup) {
        attachFinalizer = function (handle) { return handle; };
        return handle;
    }
    // If the running environment has a FinalizationGroup (see
    // https://github.com/tc39/proposal-weakrefs), then attach finalizers
    // for class handles.  We check for the presence of FinalizationGroup
    // at run-time, not build-time.
    finalizationGroup = new FinalizationGroup(function (iter) {
        for (var result = iter.next(); !result.done; result = iter.next()) {
            var $$ = result.value;
            if (!$$.ptr) {
                console.warn('object already deleted: ' + $$.ptr);
            } else {
                releaseClassHandle($$);
            }
        }
    });
    attachFinalizer = function (handle) {
        finalizationGroup.register(handle, handle.$$, handle.$$);
        return handle;
    };
    detachFinalizer = function (handle) {
        finalizationGroup.unregister(handle.$$);
    };
    return attachFinalizer(handle);
} function ClassHandle_clone() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }

    if (this.$$.preservePointerOnDelete) {
        this.$$.count.value += 1;
        return this;
    } else {
        var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
            $$: {
                value: shallowCopyInternalPointer(this.$$),
            }
        }));

        clone.$$.count.value += 1;
        clone.$$.deleteScheduled = false;
        return clone;
    }
}

function ClassHandle_delete() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }

    if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
    }

    detachFinalizer(this);
    releaseClassHandle(this.$$);

    if (!this.$$.preservePointerOnDelete) {
        this.$$.smartPtr = undefined;
        this.$$.ptr = undefined;
    }
}

function ClassHandle_isDeleted() {
    return !this.$$.ptr;
}


var delayFunction = undefined;

var deletionQueue = [];

function flushPendingDeletes() {
    while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
    }
} function ClassHandle_deleteLater() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
    }
    deletionQueue.push(this);
    if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
    this.$$.deleteScheduled = true;
    return this;
} function init_ClassHandle() {
    ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
    ClassHandle.prototype['clone'] = ClassHandle_clone;
    ClassHandle.prototype['delete'] = ClassHandle_delete;
    ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
    ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
} function ClassHandle() {
}

var registeredPointers = {};


function ensureOverloadTable(proto, methodName, humanName) {
    if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function () {
            // TODO This check can be removed in -O3 level "unsafe" optimizations.
            if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
            }
            return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
    }
} function exposePublicSymbol(name, value, numArguments) {
    if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
            throwBindingError("Cannot register public name '" + name + "' twice");
        }

        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
            throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
        if (undefined !== numArguments) {
            Module[name].numArguments = numArguments;
        }
    }
}

function RegisteredClass(
    name,
    constructor,
    instancePrototype,
    rawDestructor,
    baseClass,
    getActualType,
    upcast,
    downcast
) {
    this.name = name;
    this.constructor = constructor;
    this.instancePrototype = instancePrototype;
    this.rawDestructor = rawDestructor;
    this.baseClass = baseClass;
    this.getActualType = getActualType;
    this.upcast = upcast;
    this.downcast = downcast;
    this.pureVirtualFunctions = [];
}



function upcastPointer(ptr, ptrClass, desiredClass) {
    while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
            throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
    }
    return ptr;
} function constNoSmartPtrRawPointerToWireType(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
}

function genericPointerToWireType(destructors, handle) {
    var ptr;
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }

        if (this.isSmartPointer) {
            ptr = this.rawConstructor();
            if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
            }
            return ptr;
        } else {
            return 0;
        }
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);

    if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
            throwBindingError('Passing raw pointer to smart pointer is illegal');
        }

        switch (this.sharingPolicy) {
            case 0: // NONE
                // no upcasting
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                }
                break;

            case 1: // INTRUSIVE
                ptr = handle.$$.smartPtr;
                break;

            case 2: // BY_EMVAL
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    var clonedHandle = handle['clone']();
                    ptr = this.rawShare(
                        ptr,
                        __emval_register(function () {
                            clonedHandle['delete']();
                        })
                    );
                    if (destructors !== null) {
                        destructors.push(this.rawDestructor, ptr);
                    }
                }
                break;

            default:
                throwBindingError('Unsupporting sharing policy');
        }
    }
    return ptr;
}

function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
}


function simpleReadValueFromPointer(pointer) {
    return this['fromWireType'](HEAPU32[pointer >> 2]);
}

function RegisteredPointer_getPointee(ptr) {
    if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
    }
    return ptr;
}

function RegisteredPointer_destructor(ptr) {
    if (this.rawDestructor) {
        this.rawDestructor(ptr);
    }
}

function RegisteredPointer_deleteObject(handle) {
    if (handle !== null) {
        handle['delete']();
    }
}


function downcastPointer(ptr, ptrClass, desiredClass) {
    if (ptrClass === desiredClass) {
        return ptr;
    }
    if (undefined === desiredClass.baseClass) {
        return null; // no conversion
    }

    var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
    if (rv === null) {
        return null;
    }
    return desiredClass.downcast(rv);
}




function getInheritedInstanceCount() {
    return Object.keys(registeredInstances).length;
}

function getLiveInheritedInstances() {
    var rv = [];
    for (var k in registeredInstances) {
        if (registeredInstances.hasOwnProperty(k)) {
            rv.push(registeredInstances[k]);
        }
    }
    return rv;
}

function setDelayFunction(fn) {
    delayFunction = fn;
    if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
} function init_embind() {
    Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
    Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
    Module['flushPendingDeletes'] = flushPendingDeletes;
    Module['setDelayFunction'] = setDelayFunction;
} var registeredInstances = {};

function getBasestPointer(class_, ptr) {
    if (ptr === undefined) {
        throwBindingError('ptr should not be undefined');
    }
    while (class_.baseClass) {
        ptr = class_.upcast(ptr);
        class_ = class_.baseClass;
    }
    return ptr;
} function getInheritedInstance(class_, ptr) {
    ptr = getBasestPointer(class_, ptr);
    return registeredInstances[ptr];
}

function makeClassHandle(prototype, record) {
    if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
    }
    var hasSmartPtrType = !!record.smartPtrType;
    var hasSmartPtr = !!record.smartPtr;
    if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
    }
    record.count = { value: 1 };
    return attachFinalizer(Object.create(prototype, {
        $$: {
            value: record,
        },
    }));
} function RegisteredPointer_fromWireType(ptr) {
    // ptr is a raw pointer (or a raw smartpointer)

    // rawPointer is a maybe-null raw pointer
    var rawPointer = this.getPointee(ptr);
    if (!rawPointer) {
        this.destructor(ptr);
        return null;
    }

    var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
    if (undefined !== registeredInstance) {
        // JS object has been neutered, time to repopulate it
        if (0 === registeredInstance.$$.count.value) {
            registeredInstance.$$.ptr = rawPointer;
            registeredInstance.$$.smartPtr = ptr;
            return registeredInstance['clone']();
        } else {
            // else, just increment reference count on existing object
            // it already has a reference to the smart pointer
            var rv = registeredInstance['clone']();
            this.destructor(ptr);
            return rv;
        }
    }

    function makeDefaultHandle() {
        if (this.isSmartPointer) {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this.pointeeType,
                ptr: rawPointer,
                smartPtrType: this,
                smartPtr: ptr,
            });
        } else {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this,
                ptr: ptr,
            });
        }
    }

    var actualType = this.registeredClass.getActualType(rawPointer);
    var registeredPointerRecord = registeredPointers[actualType];
    if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
    }

    var toType;
    if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
    } else {
        toType = registeredPointerRecord.pointerType;
    }
    var dp = downcastPointer(
        rawPointer,
        this.registeredClass,
        toType.registeredClass);
    if (dp === null) {
        return makeDefaultHandle.call(this);
    }
    if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
            smartPtrType: this,
            smartPtr: ptr,
        });
    } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
        });
    }
} function init_RegisteredPointer() {
    RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
    RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
    RegisteredPointer.prototype['argPackAdvance'] = 8;
    RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
    RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
    RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
} function RegisteredPointer(
    name,
    registeredClass,
    isReference,
    isConst,

    // smart pointer properties
    isSmartPointer,
    pointeeType,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    this.name = name;
    this.registeredClass = registeredClass;
    this.isReference = isReference;
    this.isConst = isConst;

    // smart pointer properties
    this.isSmartPointer = isSmartPointer;
    this.pointeeType = pointeeType;
    this.sharingPolicy = sharingPolicy;
    this.rawGetPointee = rawGetPointee;
    this.rawConstructor = rawConstructor;
    this.rawShare = rawShare;
    this.rawDestructor = rawDestructor;

    if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
            this['toWireType'] = constNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        } else {
            this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        }
    } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
        //       craftInvokerFunction altogether.
    }
}

function replacePublicSymbol(name, value, numArguments) {
    if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
    }
    // If there's an overload table for this symbol, replace the symbol in the overload table instead.
    if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
        Module[name].argCount = numArguments;
    }
}

function embind__requireFunction(signature, rawFunction) {
    signature = readLatin1String(signature);

    function makeDynCaller(dynCall) {
        var args = [];
        for (var i = 1; i < signature.length; ++i) {
            args.push('a' + i);
        }

        var name = 'dynCall_' + signature + '_' + rawFunction;
        var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
        body += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
        body += '};\n';

        return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
    }

    var fp;
    if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
        fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
    } else if (typeof FUNCTION_TABLE !== "undefined") {
        fp = FUNCTION_TABLE[rawFunction];
    } else {
        // asm.js does not give direct access to the function tables,
        // and thus we must go through the dynCall interface which allows
        // calling into a signature's function table by pointer value.
        //
        // https://github.com/dherman/asm.js/issues/83
        //
        // This has three main penalties:
        // - dynCall is another function call in the path from JavaScript to C++.
        // - JITs may not predict through the function table indirection at runtime.
        var dc = Module['dynCall_' + signature];
        if (dc === undefined) {
            // We will always enter this branch if the signature
            // contains 'f' and PRECISE_F32 is not enabled.
            //
            // Try again, replacing 'f' with 'd'.
            dc = Module['dynCall_' + signature.replace(/f/g, 'd')];
            if (dc === undefined) {
                throwBindingError("No dynCall invoker for signature: " + signature);
            }
        }
        fp = makeDynCaller(dc);
    }

    if (typeof fp !== "function") {
        throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
    }
    return fp;
}


var UnboundTypeError = undefined;

function getTypeName(type) {
    var ptr = ___getTypeName(type);
    var rv = readLatin1String(ptr);
    _free(ptr);
    return rv;
} function throwUnboundTypeError(message, types) {
    var unboundTypes = [];
    var seen = {};
    function visit(type) {
        if (seen[type]) {
            return;
        }
        if (registeredTypes[type]) {
            return;
        }
        if (typeDependencies[type]) {
            typeDependencies[type].forEach(visit);
            return;
        }
        unboundTypes.push(type);
        seen[type] = true;
    }
    types.forEach(visit);

    throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
} function __embind_register_class(
    rawType,
    rawPointerType,
    rawConstPointerType,
    baseClassRawType,
    getActualTypeSignature,
    getActualType,
    upcastSignature,
    upcast,
    downcastSignature,
    downcast,
    name,
    destructorSignature,
    rawDestructor
) {
    name = readLatin1String(name);
    getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
    if (upcast) {
        upcast = embind__requireFunction(upcastSignature, upcast);
    }
    if (downcast) {
        downcast = embind__requireFunction(downcastSignature, downcast);
    }
    rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
    var legalFunctionName = makeLegalFunctionName(name);

    exposePublicSymbol(legalFunctionName, function () {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
    });

    whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function (base) {
            base = base[0];

            var baseClass;
            var basePrototype;
            if (baseClassRawType) {
                baseClass = base.registeredClass;
                basePrototype = baseClass.instancePrototype;
            } else {
                basePrototype = ClassHandle.prototype;
            }

            var constructor = createNamedFunction(legalFunctionName, function () {
                if (Object.getPrototypeOf(this) !== instancePrototype) {
                    throw new BindingError("Use 'new' to construct " + name);
                }
                if (undefined === registeredClass.constructor_body) {
                    throw new BindingError(name + " has no accessible constructor");
                }
                var body = registeredClass.constructor_body[arguments.length];
                if (undefined === body) {
                    throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                }
                return body.apply(this, arguments);
            });

            var instancePrototype = Object.create(basePrototype, {
                constructor: { value: constructor },
            });

            constructor.prototype = instancePrototype;

            var registeredClass = new RegisteredClass(
                name,
                constructor,
                instancePrototype,
                rawDestructor,
                baseClass,
                getActualType,
                upcast,
                downcast);

            var referenceConverter = new RegisteredPointer(
                name,
                registeredClass,
                true,
                false,
                false);

            var pointerConverter = new RegisteredPointer(
                name + '*',
                registeredClass,
                false,
                false,
                false);

            var constPointerConverter = new RegisteredPointer(
                name + ' const*',
                registeredClass,
                false,
                true,
                false);

            registeredPointers[rawType] = {
                pointerType: pointerConverter,
                constPointerType: constPointerConverter
            };

            replacePublicSymbol(legalFunctionName, constructor);

            return [referenceConverter, pointerConverter, constPointerConverter];
        }
    );
}



function new_(constructor, argumentList) {
    if (!(constructor instanceof Function)) {
        throw new TypeError('new_ called with constructor type ' + typeof (constructor) + " which is not a function");
    }

    /*
     * Previously, the following line was just:
 
     function dummy() {};
 
     * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
     * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
     * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
     * to write a test for this behavior.  -NRD 2013.02.22
     */
    var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function () { });
    dummy.prototype = constructor.prototype;
    var obj = new dummy;

    var r = constructor.apply(obj, argumentList);
    return (r instanceof Object) ? r : obj;
}

function runDestructors(destructors) {
    while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
    }
} function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
    // humanName: a human-readable string name for the function to be generated.
    // argTypes: An array that contains the embind type objects for all types in the function signature.
    //    argTypes[0] is the type object for the function return value.
    //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
    //    argTypes[2...] are the actual function parameters.
    // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
    // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
    // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
    var argCount = argTypes.length;

    if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
    }

    var isClassMethodFunc = (argTypes[1] !== null && classType !== null);

    // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
    // TODO: This omits argument count check - enable only at -O3 or similar.
    //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
    //       return FUNCTION_TABLE[fn];
    //    }


    // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
    // TODO: Remove this completely once all function invokers are being dynamically generated.
    var needsDestructorStack = false;

    for (var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
            needsDestructorStack = true;
            break;
        }
    }

    var returns = (argTypes[0].name !== "void");

    var argsList = "";
    var argsListWired = "";
    for (var i = 0; i < argCount - 2; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
    }

    var invokerFnBody =
        "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\n" +
        "if (arguments.length !== " + (argCount - 2) + ") {\n" +
        "throwBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n" +
        "}\n";


    if (needsDestructorStack) {
        invokerFnBody +=
            "var destructors = [];\n";
    }

    var dtorStack = needsDestructorStack ? "destructors" : "null";
    var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
    var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];


    if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
    }

    for (var i = 0; i < argCount - 2; ++i) {
        invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
        args1.push("argType" + i);
        args2.push(argTypes[i + 2]);
    }

    if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
    }

    invokerFnBody +=
        (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";

    if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
    } else {
        for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
            var paramName = (i === 1 ? "thisWired" : ("arg" + (i - 2) + "Wired"));
            if (argTypes[i].destructorFunction !== null) {
                invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
                args1.push(paramName + "_dtor");
                args2.push(argTypes[i].destructorFunction);
            }
        }
    }

    if (returns) {
        invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
            "return ret;\n";
    } else {
    }
    invokerFnBody += "}\n";

    args1.push(invokerFnBody);

    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}

function heap32VectorToArray(count, firstElement) {
    var array = [];
    for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
    }
    return array;
} function __embind_register_class_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr,
    invokerSignature,
    rawInvoker,
    fn
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
    whenDependentTypesAreResolved([], [rawClassType], function (classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        function unboundTypesHandler() {
            throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        }

        var proto = classType.registeredClass.constructor;
        if (undefined === proto[methodName]) {
            // This is the first function to be registered with this name.
            unboundTypesHandler.argCount = argCount - 1;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount - 1] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
            // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
            // the function handlers go into an overload table.
            var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
            var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
            if (undefined === proto[methodName].overloadTable) {
                func.argCount = argCount - 1;
                proto[methodName] = func;
            } else {
                proto[methodName].overloadTable[argCount - 1] = func;
            }
            return [];
        });
        return [];
    });
}

function __embind_register_class_constructor(
    rawClassType,
    argCount,
    rawArgTypesAddr,
    invokerSignature,
    invoker,
    rawConstructor
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    invoker = embind__requireFunction(invokerSignature, invoker);

    whenDependentTypesAreResolved([], [rawClassType], function (classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;

        if (undefined === classType.registeredClass.constructor_body) {
            classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
            throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
            throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };

        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
            classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                if (arguments.length !== argCount - 1) {
                    throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount - 1));
                }
                var destructors = [];
                var args = new Array(argCount);
                args[0] = rawConstructor;
                for (var i = 1; i < argCount; ++i) {
                    args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                }

                var ptr = invoker.apply(null, args);
                runDestructors(destructors);

                return argTypes[0]['fromWireType'](ptr);
            };
            return [];
        });
        return [];
    });
}

function __embind_register_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr, // [ReturnType, ThisType, Args...]
    invokerSignature,
    rawInvoker,
    context,
    isPureVirtual
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);

    whenDependentTypesAreResolved([], [rawClassType], function (classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        if (isPureVirtual) {
            classType.registeredClass.pureVirtualFunctions.push(methodName);
        }

        function unboundTypesHandler() {
            throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        }

        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
            // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
            unboundTypesHandler.argCount = argCount - 2;
            unboundTypesHandler.className = classType.name;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {

            var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);

            // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
            // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
            if (undefined === proto[methodName].overloadTable) {
                // Set argCount in case an overload is registered later
                memberFunction.argCount = argCount - 2;
                proto[methodName] = memberFunction;
            } else {
                proto[methodName].overloadTable[argCount - 2] = memberFunction;
            }

            return [];
        });
        return [];
    });
}



var emval_free_list = [];

var emval_handle_array = [{}, { value: undefined }, { value: null }, { value: true }, { value: false }]; function __emval_decref(handle) {
    if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
        emval_handle_array[handle] = undefined;
        emval_free_list.push(handle);
    }
}



function count_emval_handles() {
    var count = 0;
    for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== undefined) {
            ++count;
        }
    }
    return count;
}

function get_first_emval() {
    for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== undefined) {
            return emval_handle_array[i];
        }
    }
    return null;
} function init_emval() {
    Module['count_emval_handles'] = count_emval_handles;
    Module['get_first_emval'] = get_first_emval;
} function __emval_register(value) {

    switch (value) {
        case undefined: { return 1; }
        case null: { return 2; }
        case true: { return 3; }
        case false: { return 4; }
        default: {
            var handle = emval_free_list.length ?
                emval_free_list.pop() :
                emval_handle_array.length;

            emval_handle_array[handle] = { refcount: 1, value: value };
            return handle;
        }
    }
} function __embind_register_emval(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function (handle) {
            var rv = emval_handle_array[handle].value;
            __emval_decref(handle);
            return rv;
        },
        'toWireType': function (destructors, value) {
            return __emval_register(value);
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: null, // This type does not need a destructor

        // TODO: do we need a deleteObject here?  write a test where
        // emval is passed into JS via an interface
    });
}


function _embind_repr(v) {
    if (v === null) {
        return 'null';
    }
    var t = typeof v;
    if (t === 'object' || t === 'array' || t === 'function') {
        return v.toString();
    } else {
        return '' + v;
    }
}

function floatReadValueFromPointer(name, shift) {
    switch (shift) {
        case 2: return function (pointer) {
            return this['fromWireType'](HEAPF32[pointer >> 2]);
        };
        case 3: return function (pointer) {
            return this['fromWireType'](HEAPF64[pointer >> 3]);
        };
        default:
            throw new TypeError("Unknown float type: " + name);
    }
} function __embind_register_float(rawType, name, size) {
    var shift = getShiftFromSize(size);
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function (value) {
            return value;
        },
        'toWireType': function (destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following if() and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            return value;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': floatReadValueFromPointer(name, shift),
        destructorFunction: null, // This type does not need a destructor
    });
}


function integerReadValueFromPointer(name, shift, signed) {
    // integers are quite common, so generate very specialized functions
    switch (shift) {
        case 0: return signed ?
            function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
            function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
        case 1: return signed ?
            function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
            function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
        case 2: return signed ?
            function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
            function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
        default:
            throw new TypeError("Unknown integer type: " + name);
    }
} function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
    name = readLatin1String(name);
    if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
        maxRange = 4294967295;
    }

    var shift = getShiftFromSize(size);

    var fromWireType = function (value) {
        return value;
    };

    if (minRange === 0) {
        var bitshift = 32 - 8 * size;
        fromWireType = function (value) {
            return (value << bitshift) >>> bitshift;
        };
    }

    var isUnsignedType = (name.indexOf('unsigned') != -1);

    registerType(primitiveType, {
        name: name,
        'fromWireType': fromWireType,
        'toWireType': function (destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following two if()s and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            if (value < minRange || value > maxRange) {
                throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
            }
            return isUnsignedType ? (value >>> 0) : (value | 0);
        },
        'argPackAdvance': 8,
        'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
        destructorFunction: null, // This type does not need a destructor
    });
}

function __embind_register_memory_view(rawType, dataTypeIndex, name) {
    var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
    ];

    var TA = typeMapping[dataTypeIndex];

    function decodeMemoryView(handle) {
        handle = handle >> 2;
        var heap = HEAPU32;
        var size = heap[handle]; // in elements
        var data = heap[handle + 1]; // byte offset into emscripten heap
        return new TA(heap['buffer'], data, size);
    }

    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': decodeMemoryView,
        'argPackAdvance': 8,
        'readValueFromPointer': decodeMemoryView,
    }, {
        ignoreDuplicateRegistrations: true,
    });
}

function __embind_register_std_string(rawType, name) {
    name = readLatin1String(name);
    var stdStringIsUTF8
        //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
        = (name === "std::string");

    registerType(rawType, {
        name: name,
        'fromWireType': function (value) {
            var length = HEAPU32[value >> 2];

            var str;
            if (stdStringIsUTF8) {
                //ensure null termination at one-past-end byte if not present yet
                var endChar = HEAPU8[value + 4 + length];
                var endCharSwap = 0;
                if (endChar != 0) {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                }

                var decodeStartPtr = value + 4;
                //looping here to support possible embedded '0' bytes
                for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if (HEAPU8[currentBytePtr] == 0) {
                        var stringSegment = UTF8ToString(decodeStartPtr);
                        if (str === undefined)
                            str = stringSegment;
                        else {
                            str += String.fromCharCode(0);
                            str += stringSegment;
                        }
                        decodeStartPtr = currentBytePtr + 1;
                    }
                }

                if (endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
            } else {
                var a = new Array(length);
                for (var i = 0; i < length; ++i) {
                    a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                }
                str = a.join('');
            }

            _free(value);

            return str;
        },
        'toWireType': function (destructors, value) {
            if (value instanceof ArrayBuffer) {
                value = new Uint8Array(value);
            }

            var getLength;
            var valueIsOfTypeString = (typeof value === 'string');

            if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                throwBindingError('Cannot pass non-string to std::string');
            }
            if (stdStringIsUTF8 && valueIsOfTypeString) {
                getLength = function () { return lengthBytesUTF8(value); };
            } else {
                getLength = function () { return value.length; };
            }

            // assumes 4-byte alignment
            var length = getLength();
            var ptr = _malloc(4 + length + 1);
            HEAPU32[ptr >> 2] = length;

            if (stdStringIsUTF8 && valueIsOfTypeString) {
                stringToUTF8(value, ptr + 4, length + 1);
            } else {
                if (valueIsOfTypeString) {
                    for (var i = 0; i < length; ++i) {
                        var charCode = value.charCodeAt(i);
                        if (charCode > 255) {
                            _free(ptr);
                            throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                        }
                        HEAPU8[ptr + 4 + i] = charCode;
                    }
                } else {
                    for (var i = 0; i < length; ++i) {
                        HEAPU8[ptr + 4 + i] = value[i];
                    }
                }
            }

            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function (ptr) { _free(ptr); },
    });
}

function __embind_register_std_wstring(rawType, charSize, name) {
    // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
    name = readLatin1String(name);
    var getHeap, shift;
    if (charSize === 2) {
        getHeap = function () { return HEAPU16; };
        shift = 1;
    } else if (charSize === 4) {
        getHeap = function () { return HEAPU32; };
        shift = 2;
    }
    registerType(rawType, {
        name: name,
        'fromWireType': function (value) {
            var HEAP = getHeap();
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            var start = (value + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAP[start + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function (destructors, value) {
            // assumes 4-byte alignment
            var HEAP = getHeap();
            var length = value.length;
            var ptr = _malloc(4 + length * charSize);
            HEAPU32[ptr >> 2] = length;
            var start = (ptr + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                HEAP[start + i] = value.charCodeAt(i);
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function (ptr) { _free(ptr); },
    });
}

function __embind_register_void(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        isVoid: true, // void return values can be optimized out sometimes
        name: name,
        'argPackAdvance': 0,
        'fromWireType': function () {
            return undefined;
        },
        'toWireType': function (destructors, o) {
            // TODO: assert if anything else is given?
            return undefined;
        },
    });
}


function __emval_incref(handle) {
    if (handle > 4) {
        emval_handle_array[handle].refcount += 1;
    }
}


function requireRegisteredType(rawType, humanName) {
    var impl = registeredTypes[rawType];
    if (undefined === impl) {
        throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
    }
    return impl;
} function __emval_take_value(type, argv) {
    type = requireRegisteredType(type, '_emval_take_value');
    var v = type['readValueFromPointer'](argv);
    return __emval_register(v);
}

function _abort() {
    Module['abort']();
}

function _emscripten_get_heap_size() {
    return HEAP8.length;
}


var ENV = {}; function _getenv(name) {
    // char *getenv(const char *name);
    // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
    if (name === 0) return 0;
    name = UTF8ToString(name);
    if (!ENV.hasOwnProperty(name)) return 0;

    if (_getenv.ret) _free(_getenv.ret);
    _getenv.ret = allocateUTF8(ENV[name]);
    return _getenv.ret;
}

function _llvm_stackrestore(p) {
    var self = _llvm_stacksave;
    var ret = self.LLVM_SAVEDSTACKS[p];
    self.LLVM_SAVEDSTACKS.splice(p, 1);
    stackRestore(ret);
}

function _llvm_stacksave() {
    var self = _llvm_stacksave;
    if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
    }
    self.LLVM_SAVEDSTACKS.push(stackSave());
    return self.LLVM_SAVEDSTACKS.length - 1;
}


function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
}









function _pthread_cond_wait() { return 0; }



function abortOnCannotGrowMemory(requestedSize) {
    abort('OOM');
} function _emscripten_resize_heap(requestedSize) {
    abortOnCannotGrowMemory(requestedSize);
}



function __isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

function __arraySum(array, index) {
    var sum = 0;
    for (var i = 0; i <= index; sum += array[i++]);
    return sum;
}


var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; function __addDays(date, days) {
    var newDate = new Date(date.getTime());
    while (days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];

        if (days > daysInCurrentMonth - newDate.getDate()) {
            // we spill over to next month
            days -= (daysInCurrentMonth - newDate.getDate() + 1);
            newDate.setDate(1);
            if (currentMonth < 11) {
                newDate.setMonth(currentMonth + 1)
            } else {
                newDate.setMonth(0);
                newDate.setFullYear(newDate.getFullYear() + 1);
            }
        } else {
            // we stay in current month
            newDate.setDate(newDate.getDate() + days);
            return newDate;
        }
    }

    return newDate;
} function _strftime(s, maxsize, format, tm) {
    // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
    // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html

    var tm_zone = HEAP32[(((tm) + (40)) >> 2)];

    var date = {
        tm_sec: HEAP32[((tm) >> 2)],
        tm_min: HEAP32[(((tm) + (4)) >> 2)],
        tm_hour: HEAP32[(((tm) + (8)) >> 2)],
        tm_mday: HEAP32[(((tm) + (12)) >> 2)],
        tm_mon: HEAP32[(((tm) + (16)) >> 2)],
        tm_year: HEAP32[(((tm) + (20)) >> 2)],
        tm_wday: HEAP32[(((tm) + (24)) >> 2)],
        tm_yday: HEAP32[(((tm) + (28)) >> 2)],
        tm_isdst: HEAP32[(((tm) + (32)) >> 2)],
        tm_gmtoff: HEAP32[(((tm) + (36)) >> 2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
    };

    var pattern = UTF8ToString(format);

    // expand format
    var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
    };
    for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
    }

    var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
            str = character[0] + str;
        }
        return str;
    }

    function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
    }

    function compareByDay(date1, date2) {
        function sgn(value) {
            return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }

        var compare;
        if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
            if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
                compare = sgn(date1.getDate() - date2.getDate());
            }
        }
        return compare;
    }

    function getFirstWeekStartDate(janFourth) {
        switch (janFourth.getDay()) {
            case 0: // Sunday
                return new Date(janFourth.getFullYear() - 1, 11, 29);
            case 1: // Monday
                return janFourth;
            case 2: // Tuesday
                return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
                return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
                return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
                return new Date(janFourth.getFullYear() - 1, 11, 31);
            case 6: // Saturday
                return new Date(janFourth.getFullYear() - 1, 11, 30);
        }
    }

    function getWeekBasedYear(date) {
        var thisDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);

        var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
        var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);

        var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
        var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);

        if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
                return thisDate.getFullYear() + 1;
            } else {
                return thisDate.getFullYear();
            }
        } else {
            return thisDate.getFullYear() - 1;
        }
    }

    var EXPANSION_RULES_2 = {
        '%a': function (date) {
            return WEEKDAYS[date.tm_wday].substring(0, 3);
        },
        '%A': function (date) {
            return WEEKDAYS[date.tm_wday];
        },
        '%b': function (date) {
            return MONTHS[date.tm_mon].substring(0, 3);
        },
        '%B': function (date) {
            return MONTHS[date.tm_mon];
        },
        '%C': function (date) {
            var year = date.tm_year + 1900;
            return leadingNulls((year / 100) | 0, 2);
        },
        '%d': function (date) {
            return leadingNulls(date.tm_mday, 2);
        },
        '%e': function (date) {
            return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function (date) {
            // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
            // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
            // January 4th, which is also the week that includes the first Thursday of the year, and
            // is also the first week that contains at least four days in the year.
            // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
            // the last week of the preceding year; thus, for Saturday 2nd January 1999,
            // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
            // or 31st is a Monday, it and any following days are part of week 1 of the following year.
            // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.

            return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function (date) {
            return getWeekBasedYear(date);
        },
        '%H': function (date) {
            return leadingNulls(date.tm_hour, 2);
        },
        '%I': function (date) {
            var twelveHour = date.tm_hour;
            if (twelveHour == 0) twelveHour = 12;
            else if (twelveHour > 12) twelveHour -= 12;
            return leadingNulls(twelveHour, 2);
        },
        '%j': function (date) {
            // Day of the year (001-366)
            return leadingNulls(date.tm_mday + __arraySum(__isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon - 1), 3);
        },
        '%m': function (date) {
            return leadingNulls(date.tm_mon + 1, 2);
        },
        '%M': function (date) {
            return leadingNulls(date.tm_min, 2);
        },
        '%n': function () {
            return '\n';
        },
        '%p': function (date) {
            if (date.tm_hour >= 0 && date.tm_hour < 12) {
                return 'AM';
            } else {
                return 'PM';
            }
        },
        '%S': function (date) {
            return leadingNulls(date.tm_sec, 2);
        },
        '%t': function () {
            return '\t';
        },
        '%u': function (date) {
            return date.tm_wday || 7;
        },
        '%U': function (date) {
            // Replaced by the week number of the year as a decimal number [00,53].
            // The first Sunday of January is the first day of week 1;
            // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
            var janFirst = new Date(date.tm_year + 1900, 0, 1);
            var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
            var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);

            // is target date after the first Sunday?
            if (compareByDay(firstSunday, endDate) < 0) {
                // calculate difference in days between first Sunday and endDate
                var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
                var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
                var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
                return leadingNulls(Math.ceil(days / 7), 2);
            }

            return compareByDay(firstSunday, janFirst) === 0 ? '01' : '00';
        },
        '%V': function (date) {
            // Replaced by the week number of the year (Monday as the first day of the week)
            // as a decimal number [01,53]. If the week containing 1 January has four
            // or more days in the new year, then it is considered week 1.
            // Otherwise, it is the last week of the previous year, and the next week is week 1.
            // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
            var janFourthThisYear = new Date(date.tm_year + 1900, 0, 4);
            var janFourthNextYear = new Date(date.tm_year + 1901, 0, 4);

            var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
            var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);

            var endDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);

            if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
                // if given date is before this years first week, then it belongs to the 53rd week of last year
                return '53';
            }

            if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
                // if given date is after next years first week, then it belongs to the 01th week of next year
                return '01';
            }

            // given date is in between CW 01..53 of this calendar year
            var daysDifference;
            if (firstWeekStartThisYear.getFullYear() < date.tm_year + 1900) {
                // first CW of this year starts last year
                daysDifference = date.tm_yday + 32 - firstWeekStartThisYear.getDate()
            } else {
                // first CW of this year starts this year
                daysDifference = date.tm_yday + 1 - firstWeekStartThisYear.getDate();
            }
            return leadingNulls(Math.ceil(daysDifference / 7), 2);
        },
        '%w': function (date) {
            return date.tm_wday;
        },
        '%W': function (date) {
            // Replaced by the week number of the year as a decimal number [00,53].
            // The first Monday of January is the first day of week 1;
            // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
            var janFirst = new Date(date.tm_year, 0, 1);
            var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
            var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);

            // is target date after the first Monday?
            if (compareByDay(firstMonday, endDate) < 0) {
                var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
                var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
                var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
                return leadingNulls(Math.ceil(days / 7), 2);
            }
            return compareByDay(firstMonday, janFirst) === 0 ? '01' : '00';
        },
        '%y': function (date) {
            // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
            return (date.tm_year + 1900).toString().substring(2);
        },
        '%Y': function (date) {
            // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
            return date.tm_year + 1900;
        },
        '%z': function (date) {
            // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
            // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
            var off = date.tm_gmtoff;
            var ahead = off >= 0;
            off = Math.abs(off) / 60;
            // convert from minutes into hhmm format (which means 60 minutes = 100 units)
            off = (off / 60) * 100 + (off % 60);
            return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function (date) {
            return date.tm_zone;
        },
        '%%': function () {
            return '%';
        }
    };
    for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
            pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
    }

    var bytes = intArrayFromString(pattern, false);
    if (bytes.length > maxsize) {
        return 0;
    }

    writeArrayToMemory(bytes, s);
    return bytes.length - 1;
} function _strftime_l(s, maxsize, format, tm) {
    return _strftime(s, maxsize, format, tm); // no locale support yet
}

FS.staticInit(); Module["FS_createFolder"] = FS.createFolder; Module["FS_createPath"] = FS.createPath; Module["FS_createDataFile"] = FS.createDataFile; Module["FS_createPreloadedFile"] = FS.createPreloadedFile; Module["FS_createLazyFile"] = FS.createLazyFile; Module["FS_createLink"] = FS.createLink; Module["FS_createDevice"] = FS.createDevice; Module["FS_unlink"] = FS.unlink;;
if (ENVIRONMENT_HAS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var ASSERTIONS = false;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array;
}

function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
        var chr = array[i];
        if (chr > 0xFF) {
            if (ASSERTIONS) {
                assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
            }
            chr &= 0xFF;
        }
        ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Int8Array,Int32Array


var asmGlobalArg = {};

var asmLibraryArg = {
    "abort": abort,
    "setTempRet0": setTempRet0,
    "getTempRet0": getTempRet0,
    "ClassHandle": ClassHandle,
    "ClassHandle_clone": ClassHandle_clone,
    "ClassHandle_delete": ClassHandle_delete,
    "ClassHandle_deleteLater": ClassHandle_deleteLater,
    "ClassHandle_isAliasOf": ClassHandle_isAliasOf,
    "ClassHandle_isDeleted": ClassHandle_isDeleted,
    "RegisteredClass": RegisteredClass,
    "RegisteredPointer": RegisteredPointer,
    "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject,
    "RegisteredPointer_destructor": RegisteredPointer_destructor,
    "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType,
    "RegisteredPointer_getPointee": RegisteredPointer_getPointee,
    "___cxa_allocate_exception": ___cxa_allocate_exception,
    "___cxa_begin_catch": ___cxa_begin_catch,
    "___cxa_throw": ___cxa_throw,
    "___cxa_uncaught_exceptions": ___cxa_uncaught_exceptions,
    "___exception_addRef": ___exception_addRef,
    "___exception_deAdjust": ___exception_deAdjust,
    "___gxx_personality_v0": ___gxx_personality_v0,
    "___lock": ___lock,
    "___map_file": ___map_file,
    "___setErrNo": ___setErrNo,
    "___syscall140": ___syscall140,
    "___syscall145": ___syscall145,
    "___syscall146": ___syscall146,
    "___syscall221": ___syscall221,
    "___syscall5": ___syscall5,
    "___syscall54": ___syscall54,
    "___syscall6": ___syscall6,
    "___syscall91": ___syscall91,
    "___unlock": ___unlock,
    "__addDays": __addDays,
    "__arraySum": __arraySum,
    "__embind_register_bool": __embind_register_bool,
    "__embind_register_class": __embind_register_class,
    "__embind_register_class_class_function": __embind_register_class_class_function,
    "__embind_register_class_constructor": __embind_register_class_constructor,
    "__embind_register_class_function": __embind_register_class_function,
    "__embind_register_emval": __embind_register_emval,
    "__embind_register_float": __embind_register_float,
    "__embind_register_integer": __embind_register_integer,
    "__embind_register_memory_view": __embind_register_memory_view,
    "__embind_register_std_string": __embind_register_std_string,
    "__embind_register_std_wstring": __embind_register_std_wstring,
    "__embind_register_void": __embind_register_void,
    "__emscripten_syscall_munmap": __emscripten_syscall_munmap,
    "__emval_decref": __emval_decref,
    "__emval_incref": __emval_incref,
    "__emval_register": __emval_register,
    "__emval_take_value": __emval_take_value,
    "__isLeapYear": __isLeapYear,
    "_abort": _abort,
    "_embind_repr": _embind_repr,
    "_emscripten_get_heap_size": _emscripten_get_heap_size,
    "_emscripten_memcpy_big": _emscripten_memcpy_big,
    "_emscripten_resize_heap": _emscripten_resize_heap,
    "_getenv": _getenv,
    "_llvm_stackrestore": _llvm_stackrestore,
    "_llvm_stacksave": _llvm_stacksave,
    "_pthread_cond_wait": _pthread_cond_wait,
    "_strftime": _strftime,
    "_strftime_l": _strftime_l,
    "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
    "attachFinalizer": attachFinalizer,
    "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType,
    "count_emval_handles": count_emval_handles,
    "craftInvokerFunction": craftInvokerFunction,
    "createNamedFunction": createNamedFunction,
    "demangle": demangle,
    "demangleAll": demangleAll,
    "detachFinalizer": detachFinalizer,
    "downcastPointer": downcastPointer,
    "embind__requireFunction": embind__requireFunction,
    "embind_init_charCodes": embind_init_charCodes,
    "ensureOverloadTable": ensureOverloadTable,
    "exposePublicSymbol": exposePublicSymbol,
    "extendError": extendError,
    "floatReadValueFromPointer": floatReadValueFromPointer,
    "flushPendingDeletes": flushPendingDeletes,
    "genericPointerToWireType": genericPointerToWireType,
    "getBasestPointer": getBasestPointer,
    "getInheritedInstance": getInheritedInstance,
    "getInheritedInstanceCount": getInheritedInstanceCount,
    "getLiveInheritedInstances": getLiveInheritedInstances,
    "getShiftFromSize": getShiftFromSize,
    "getTypeName": getTypeName,
    "get_first_emval": get_first_emval,
    "heap32VectorToArray": heap32VectorToArray,
    "init_ClassHandle": init_ClassHandle,
    "init_RegisteredPointer": init_RegisteredPointer,
    "init_embind": init_embind,
    "init_emval": init_emval,
    "integerReadValueFromPointer": integerReadValueFromPointer,
    "jsStackTrace": jsStackTrace,
    "makeClassHandle": makeClassHandle,
    "makeLegalFunctionName": makeLegalFunctionName,
    "new_": new_,
    "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType,
    "readLatin1String": readLatin1String,
    "registerType": registerType,
    "releaseClassHandle": releaseClassHandle,
    "replacePublicSymbol": replacePublicSymbol,
    "requireRegisteredType": requireRegisteredType,
    "runDestructor": runDestructor,
    "runDestructors": runDestructors,
    "setDelayFunction": setDelayFunction,
    "shallowCopyInternalPointer": shallowCopyInternalPointer,
    "simpleReadValueFromPointer": simpleReadValueFromPointer,
    "stackTrace": stackTrace,
    "throwBindingError": throwBindingError,
    "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted,
    "throwInternalError": throwInternalError,
    "throwUnboundTypeError": throwUnboundTypeError,
    "upcastPointer": upcastPointer,
    "whenDependentTypesAreResolved": whenDependentTypesAreResolved,
    "tempDoublePtr": tempDoublePtr,
    "DYNAMICTOP_PTR": DYNAMICTOP_PTR
};
// EMSCRIPTEN_START_ASM
var asm = Module["asm"]// EMSCRIPTEN_END_ASM
    (asmGlobalArg, asmLibraryArg, buffer);

Module["asm"] = asm;
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function () {
    return Module["asm"]["__ZSt18uncaught_exceptionv"].apply(null, arguments)
};

var ___cxa_can_catch = Module["___cxa_can_catch"] = function () {
    return Module["asm"]["___cxa_can_catch"].apply(null, arguments)
};

var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function () {
    return Module["asm"]["___cxa_is_pointer_type"].apply(null, arguments)
};

var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function () {
    return Module["asm"]["___embind_register_native_and_builtin_types"].apply(null, arguments)
};

var ___errno_location = Module["___errno_location"] = function () {
    return Module["asm"]["___errno_location"].apply(null, arguments)
};

var ___getTypeName = Module["___getTypeName"] = function () {
    return Module["asm"]["___getTypeName"].apply(null, arguments)
};

var _free = Module["_free"] = function () {
    return Module["asm"]["_free"].apply(null, arguments)
};

var _main = Module["_main"] = function () {
    return Module["asm"]["_main"].apply(null, arguments)
};

var _malloc = Module["_malloc"] = function () {
    return Module["asm"]["_malloc"].apply(null, arguments)
};

var _memcpy = Module["_memcpy"] = function () {
    return Module["asm"]["_memcpy"].apply(null, arguments)
};

var _memmove = Module["_memmove"] = function () {
    return Module["asm"]["_memmove"].apply(null, arguments)
};

var _memset = Module["_memset"] = function () {
    return Module["asm"]["_memset"].apply(null, arguments)
};

var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = function () {
    return Module["asm"]["_pthread_cond_broadcast"].apply(null, arguments)
};

var _sbrk = Module["_sbrk"] = function () {
    return Module["asm"]["_sbrk"].apply(null, arguments)
};

var establishStackSpace = Module["establishStackSpace"] = function () {
    return Module["asm"]["establishStackSpace"].apply(null, arguments)
};

var globalCtors = Module["globalCtors"] = function () {
    return Module["asm"]["globalCtors"].apply(null, arguments)
};

var stackAlloc = Module["stackAlloc"] = function () {
    return Module["asm"]["stackAlloc"].apply(null, arguments)
};

var stackRestore = Module["stackRestore"] = function () {
    return Module["asm"]["stackRestore"].apply(null, arguments)
};

var stackSave = Module["stackSave"] = function () {
    return Module["asm"]["stackSave"].apply(null, arguments)
};

var dynCall_i = Module["dynCall_i"] = function () {
    return Module["asm"]["dynCall_i"].apply(null, arguments)
};

var dynCall_ii = Module["dynCall_ii"] = function () {
    return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

var dynCall_iii = Module["dynCall_iii"] = function () {
    return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

var dynCall_iiii = Module["dynCall_iiii"] = function () {
    return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

var dynCall_iiiii = Module["dynCall_iiiii"] = function () {
    return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

var dynCall_iiiiid = Module["dynCall_iiiiid"] = function () {
    return Module["asm"]["dynCall_iiiiid"].apply(null, arguments)
};

var dynCall_iiiiii = Module["dynCall_iiiiii"] = function () {
    return Module["asm"]["dynCall_iiiiii"].apply(null, arguments)
};

var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = function () {
    return Module["asm"]["dynCall_iiiiiid"].apply(null, arguments)
};

var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function () {
    return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments)
};

var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function () {
    return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments)
};

var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function () {
    return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments)
};

var dynCall_iiiiij = Module["dynCall_iiiiij"] = function () {
    return Module["asm"]["dynCall_iiiiij"].apply(null, arguments)
};

var dynCall_jiji = Module["dynCall_jiji"] = function () {
    return Module["asm"]["dynCall_jiji"].apply(null, arguments)
};

var dynCall_v = Module["dynCall_v"] = function () {
    return Module["asm"]["dynCall_v"].apply(null, arguments)
};

var dynCall_vi = Module["dynCall_vi"] = function () {
    return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

var dynCall_vii = Module["dynCall_vii"] = function () {
    return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

var dynCall_viii = Module["dynCall_viii"] = function () {
    return Module["asm"]["dynCall_viii"].apply(null, arguments)
};

var dynCall_viiii = Module["dynCall_viiii"] = function () {
    return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

var dynCall_viiiii = Module["dynCall_viiiii"] = function () {
    return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};

var dynCall_viiiiii = Module["dynCall_viiiiii"] = function () {
    return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

var dynCall_viijii = Module["dynCall_viijii"] = function () {
    return Module["asm"]["dynCall_viijii"].apply(null, arguments)
};
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;








Module["getMemory"] = getMemory;























Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;


Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;





























Module["calledRun"] = calledRun;



var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
    this.name = "ExitStatus";
    this.message = "Program terminated with exit(" + status + ")";
    this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun) run();
    if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {


    args = args || [];

    var argc = args.length + 1;
    var argv = stackAlloc((argc + 1) * 4);
    HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
    for (var i = 1; i < argc; i++) {
        HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
    }
    HEAP32[(argv >> 2) + argc] = 0;


    try {


        var ret = Module['_main'](argc, argv);


        // if we're not running an evented main loop, it's time to exit
        exit(ret, /* implicit = */ true);
    }
    catch (e) {
        if (e instanceof ExitStatus) {
            // exit() throws this once it's done to make sure execution
            // has been stopped completely
            return;
        } else if (e == 'SimulateInfiniteLoop') {
            // running an evented main loop, don't immediately exit
            noExitRuntime = true;
            return;
        } else {
            var toLog = e;
            if (e && typeof e === 'object' && e.stack) {
                toLog = [e, e.stack];
            }
            err('exception thrown: ' + toLog);
            quit_(1, e);
        }
    } finally {
        calledMain = true;
    }
}




/** @type {function(Array=)} */
function run(args) {
    args = args || arguments_;

    if (runDependencies > 0) {
        return;
    }


    preRun();

    if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

    function doRun() {
        // run may have just been called through dependencies being fulfilled just in this very frame,
        // or while the async setStatus time below was happening
        if (calledRun) return;
        calledRun = true;
        Module['calledRun'] = true;

        if (ABORT) return;

        initRuntime();

        preMain();

        if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

        if (shouldRunNow) callMain(args);

        postRun();
    }

    if (Module['setStatus']) {
        Module['setStatus']('Running...');
        setTimeout(function () {
            setTimeout(function () {
                Module['setStatus']('');
            }, 1);
            doRun();
        }, 1);
    } else {
        doRun();
    }
}
Module['run'] = run;


function exit(status, implicit) {

    // if this is just main exit-ing implicitly, and the status is 0, then we
    // don't need to do anything here and can just leave. if the status is
    // non-zero, though, then we need to report it.
    // (we may have warned about this earlier, if a situation justifies doing so)
    if (implicit && noExitRuntime && status === 0) {
        return;
    }

    if (noExitRuntime) {
    } else {

        ABORT = true;
        EXITSTATUS = status;

        exitRuntime();

        if (Module['onExit']) Module['onExit'](status);
    }

    quit_(status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
    if (Module['onAbort']) {
        Module['onAbort'](what);
    }

    what += '';
    out(what);
    err(what);

    ABORT = true;
    EXITSTATUS = 1;

    throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

if (Module['preInit']) {
    if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
    while (Module['preInit'].length > 0) {
        Module['preInit'].pop()();
    }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



